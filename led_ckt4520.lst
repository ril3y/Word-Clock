MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;*****************************************************************************
                      00002 ; led_ckt2520.asm - ports and circuit drivers (dimmers) for 18F2420 / 2520
                      00003 ;*****************************************************************************
                      00004 ;
                      00005 ;    Filename:          led_ckt4520.asm
                      00006 ;    Author:            Alden Hartf
                      00007 ;    Company:           Luke's Lights
                      00008 ;    Copyright:         Alden Hart (c) 2009
                      00009 ;    Board Support:     Supports PIC18F4520 on Board 127, monochrome
                      00010 ;    Revision:          091016
                      00011 ;
                      00012 ;    Description: This module provides the following low-level support:
                      00013 ;       - port initialization
                      00014 ;       - all circuit table functions, including circuit table load and readout
                      00015 ;       - control of timer1 setup and ISR for readout functions
                      00016 ;       - port/bit mapping to specific circuit boards and board revisions
                      00017 ;       - isolation of port bit assignment and dependencies
                      00018 ;
                      00019 
                      00020 ;****************************************************************************
                      00021 ; PORT MAP
                      00022 ;
                      00023 ;          Bit: 7       6       5       4       3       2       1       0
                      00024 ;            ---------------------------------------------------------------
                      00025 ; PORTA:        TWO     IT'S    SIX     TEN     SEVEN'L ELEV'L  ELEV'R  SWITCH
                      00026 ; PORTB:        PLUS1   PLUS2   PLUS3   PLUS4   OCLK'R  OCLK'L  TWEL'L  TWEL'R
                      00027 ; PORTC:        THREE'R MIN'R   MIN'L   TO      HALF    PAST    TWEN'R  TWEN'L  
                      00028 ; PORTD:        SEVEN'R EIGHT   FOUR    THREE'L QUAR'R  QUAR'L  TEN_    FIVE_
                      00029 ; PORTE:        --      --      --      --      --      ONE     FIVE    NINE
                      00030 ;
                      00031 ; KEY:  '_' suffix denotes FIVE to, TEN past... "prefix" copies of FIVE and TEN
                      00032 ;       'L' suffix denotes left LED on paired LEDs
                      00033 ;       'R' suffix denites right LED on paired LEDs
                      00034 ;       'SWITCH' is the time-set switch port
                      00035 ;
                      00036 ; Notes: If you change the arrangement of LEDs you will (or may) need to change:
                      00037 ;       - Port Definitions
                      00038 ;       - CKT_CHANNEL_MAP
                      00039 ;       - CKT_WRITE_B0_OFFSET
                      00040 ;       - CKT_WRITE_BITMASK
                      00041 ;       - if you don't use all 5 ports you have to change a lot (removing LATE)
                      00042 ;       - May need to change the format of the circuit table and all that 
                      00043 ;         implies (WRITE routines, ISR readouts, CKT_TABLE_LEN value, 
                      00044 ;         CKT_TABLE_INCREMENT, etc.)
                      00045 ;
                      00046 ;       We will need to get RA6 and RA7 back for the oscillator. Steal the right 
                      00047 ;       LEDs from THREE and SEVEN. So only make the circuit table run 32 lights
                      00048 ;       over 5 ports. Many things will need to be remapped.
                      00049 
                      00050 ;******************************************************************************
                      00051 ;***** Circuit Table Routines - Background ************************************
                      00052 ;******************************************************************************
                      00053 ;
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00054 ; Routines exist for the following:
                      00055 ;
                      00056 ;   - CKT_INIT            Initialize circuit values, ports and table
                      00057 ;   - CKT_ISR             ISR to work the time and read out next row
                      00058 ;   - CKT_WRITE_CIRCUIT   Write a single mono, R, G, or B byte value into table
                      00059 ;   - CKT_WRITE_CHANNEL   Write a mono or RGB triplet into the circuit table
                      00060 ;   - PORT_INIT           Local routine overrides port init in main device file
                      00061 ;   - T1_INIT             Local routine overrides timer1 init in main device file
                      00062 ;
                      00063 ;***** Circuit Table Modified Bit Angle Modulation (MBAM) ISR Handler *****
                      00064 ;
                      00065 ; In standard bit angle modulation the LEDs are turned on for a time interval 
                      00066 ; proportional to the bit value, as so:
                      00067 ;
                      00068 ;       b0 = 1/256 of a cycle
                      00069 ;       b1 = 1/128 of a cycle
                      00070 ;       b2 = 1/64 of a cycle
                      00071 ;       b3 = 1/32 of a cycle
                      00072 ;       b4 = 1/16 of a cycle
                      00073 ;       b5 = 1/8 of a cycle
                      00074 ;       b6 = 1/4 of a cycle
                      00075 ;       b7 = 1/2 of a cycle
                      00076 ;
                      00077 ; This would require timing out 8 intervals, bit 0 - bit 7. This is a huge 
                      00078 ; savings over the 256 intervals required to perform software PWM (yes, I know, 
                      00079 ; there are ways to get this down, but they are never less than the number of
                      00080 ; unique brightnesses at any given time, which is usually close to the number 
                      00081 ; of distinct circuits, and this type of optimized PWM is very complicated).
                      00082 ;
                      00083 ; This ISR uses a modified BAM scheme in order to smooth out the fade 
                      00084 ; transitions (glitches) when crossing over between high-order bits. The bit6 
                      00085 ; and bit7 intervals are broken into 2 and 4 intervals (respectively) of bit5 
                      00086 ; timing. The following pattern is actually executed:
                      00087 ;
                      00088 ;       b0, b1, b2, b3, b4, b7a, b5, b7b, b6a, b7c, b6b, b7d
                      00089 ;
                      00090 ; ...making for a total of 12 bit timing intervals per cycle.
                      00091 ;
                      00092 ; Further, each bit is split into 2 phases - an ON phase and an OFF phase. 
                      00093 ; This is to duty-cycle the LEDS to get rid of the resistors. A typical duty 
                      00094 ; cycle is about 25% - 33% ON time of the available bit width.
                      00095 ;
                      00096 ; ...so the final total is 24 intervals that must be timed. The cycles run at 
                      00097 ; 150 Hz, so these 24 ISRs execute per each 6.667 mSec cycle.
                      00098 ;
                      00099 ;
                      00100 ;***** Monochrome versus Color Operation *****
                      00101 ;
                      00102 ; The LED subsystem can be run in either monochrome or color mode. In 
                      00103 ; monochrome mode each LED is a single color, and channels generally correspond
                      00104 ; directly to circuits. There are exceptions for parallel circuits which are 
                      00105 ; discussed later. In color mode each channel consists of a triplet that is 
                      00106 ; computed and manipulated in HSB, converted to RGB, then output to the three 
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00107 ; RGB circuits that make up that channel. An attempt has been made to generalize
                      00108 ; the code to work in either mode - within practical limitations. The switch 
                      00109 ; 'MONOCHROME_MODE' in led.inc is set TRUE if monochrome mode is enabled; 
                      00110 ; otherwise color mode is operative.
                      00111 ;
                      00112 ; There are two WRITE routines that write data to the circuit table. 
                      00113 ; 
                      00114 ; CKT_WRITE_CIRCUIT works at the circuit level - writing a level (byte) to 
                      00115 ; the designated circuit. This routine writes the raw level provided into the 
                      00116 ; table, abstracting the table layout from the caller. No level conversion or
                      00117 ; conditioning is performed on the raw level value.
                      00118 ;
                      00119 ; CKT_WRITE_CHANNEL works at the channel level and works differently depending 
                      00120 ; on the mode. In monochrome mode it writes a single level to the circuit table. 
                      00121 ; It performs level conditioning (non-linear transformation to smooth out the 
                      00122 ; low level fades). Is some applications (like this one) it may also "parallel"
                      00123 ; a channel to be written to multiple circuits.
                      00124 ; 
                      00125 ; In color mode WRITE_CHANNEL accepts and HSB triple as input, converts it to
                      00126 ; RGB, with level conditioning, element matching, and white balance; then 
                      00127 ; writes the results into the correct circuits. WRITE_CHANNEL usually calls 
                      00128 ; WRITE_CIRCUIT to write the circuit table, but may bypass WRITE_CIRCUIT 
                      00129 ; and implement its own table write functions directly. This rule violation 
                      00130 ; is sometimes necessary to achieve the write speeds (it's easy to optimize 
                      00131 ; three writes by saving table setup time)
                      00132 ; 
                      00133 
                      00134 ;----- MPLIB settings and include files ------
                      00135 
                      00136 #include <global.inc>                   ; 1: global defines - must be first
                      00001 ;*****************************************************************************
                      00002 ; global.inc - global header file for any application or chip family
                      00003 ;*****************************************************************************
                      00004 ;
                      00005 ;    Filename:          global.inc
                      00006 ;    Function:          define files, global equates and macros
                      00007 ;    Author, Company:   Alden Hart, Luke's Lights
                      00008 ;    Date/Time/Rev:     091015
                      00009 ;
                      00010 ; This file must be the first include file in each .asm file
                      00011 ; Set this file up first
                      00012 
                      00013 ;----- Include file definitions ------
                      00014 ;
                      00015 ; All ASM files must have this set of includes in this order:
                      00016 ;#include <global.inc>                  ; 1: global defines - must be first
                      00017 ;#include <DEV_INCLUDE_FILE>            ; 2: Our device include file
                      00018 ;#include <LED_INCLUDE_FILE>            ; 3: LED subsystem include file
                      00019 ;#include <APP_INCLUDE_FILE>            ; 4: Application include file
                      00020 ;
                      00021 ; Which are set up here:
                      00022 #define DEV_INCLUDE_FILE d18f4520.inc   ; device header file
                      00023 #define LED_INCLUDE_FILE led.inc        ; led sub-system header file
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00024 #define APP_INCLUDE_FILE wClock.inc     ; application header file
                      00025 
                      00026 ;----- Fundamental definitions ------
                      00027 
  00000001            00028 TRUE            equ     1       ; must equal 1 - do not re-assign
  00000000            00029 FALSE           equ     0       ; must equal 0 - do not re-assign
  00000001            00030 ON              equ     1
  00000000            00031 OFF             equ     0
                      00032 
                      00033 ;---- Global error return codes ----
                      00034 
  00000000            00035 ERR_NO_ERROR            equ     .00     ; not actually an error, probably an end
  00000001            00036 ERR_BAD_COMMAND         equ     .01     ; invalid command value
  00000002            00037 ERR_BAD_CHANNEL         equ     .02     ; invalid channel number or encoded channel
  00000003            00038 ERR_BAD_ARGNUM          equ     .03     ; invalid argument number
  00000004            00039 ERR_BAD_OPCODE          equ     .04     ; invalid argument opcode
  00000005            00040 ERR_CMD_LOADER_FAILED   equ     .05     ; command loader failed in cmd module
  00000006            00041 ERR_GET_COMMAND_FAILED  equ     .06     ; get_command failed in presets module
  00000007            00042 ERR_GET_NEXT_CMD_FAILED equ     .07     ; get_next failed in presets module
                      00043 
                      00044 ;---- Handy global macros ----
                      00045 
                      00046 ;---- Handy macro to set a 16 bit pointer to a literal address
                      00047 
                      00048 setptr  macro   ADDRESS, ptr_hi, ptr_lo
                      00049         movlw   HIGH ADDRESS
                      00050         movwf   ptr_hi
                      00051         movlw   LOW ADDRESS
                      00052         movwf   ptr_lo
                      00053         endm
                      00054 
                      00055 ;---- Handy macro to set table pointer to an address
                      00056 
                      00057 tbladdr macro   ADDRESS
                      00058         movlw   HIGH ADDRESS
                      00059         movwf   TBLPTRH
                      00060         movlw   LOW ADDRESS
                      00061         movwf   TBLPTRL
                      00062         endm
                      00063 
                      00064 ;---- Handy macro to set table pointer to an address indexed by a second value
                      00065 
                      00066 tblindx macro   ADDRESS, index  ; index is a mem variable name, not a literal
                      00067         movlw   high ADDRESS
                      00068         movwf   TBLPTRH
                      00069         movlw   low ADDRESS
                      00070         movwf   TBLPTRL
                      00071         rlncf   index,W                 ; multiply index value by 2
                      00072         addwf   TBLPTRL
                      00073         movlw   0                       ; propagate carry (if any)
                      00074         addwfc  TBLPTRH
                      00075         endm
                      00076 
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00077 ;---- Handy macro to read a 16 bitvalue from a table into a pointer
                      00078 ;     Usually follows tbladdr or tblindx
                      00079 ;     Leaves table pointer to next location
                      00080 
                      00081 tblread macro   ptr_hi, ptr_lo          ; hi and lo registers for table read
                      00082         tblrd*+
                      00083         movff   TABLAT,ptr_lo           ; DATA statements are lo/hi endian
                      00084         tblrd*+
                      00085         movff   TABLAT,ptr_hi
                      00086         endm
                      00087 
                      00088 ;---- SWITCH statement macro (jump through a vector table) ----
                      00089 ; OK, it's not REALLY a switch/case statement - ot works differently than C
                      00090 ;
                      00091 ; Calling convention is:
                      00092 ;
                      00093 ;       rlncf   cmd_command,W           ; load table index x2 into W
                      00094 ;       switch                          ; call the macro
                      00095 ;       data    CL_ERROR                ; table index 0
                      00096 ;       data    CL_LOAD_SET_HSB         ; table index 1 (etc).
                      00097 ;       data    CL_LOAD_SET_RGB
                      00098 ;       data    CL_LOAD_PATCH
                      00099 ;       data    CL_LOAD_FADE
                      00100 ;       data    CL_LOAD_WATCH           ; max index. not range checked.
                      00101 ;
                      00102 ; You must also include the following lines in any file but the main:
                      00103 ;
                      00104 ;       extern  tblptrh_temp
                      00105 ;       extern  tblptrl_temp
                      00106 ;
                      00107 ; CONSTRAINTS:
                      00108 ;       W must contain the table index multipled by 2 prior to invoking switch
                      00109 ;       The macro must be followed by the actual jump table as illustrated above.
                      00110 ;       The first element in the jump table must be index zero (0)
                      00111 ;       Tables are limited to 128 entries or you must change case for 16-bit math
                      00112 ;       The macro does not check that the index is in range for the table...
                      00113 ;       ...presumably this is validated by an upstream data validation checker.
                      00114 ;
                      00115 ; This macro is not nearly as code efficient as a computed BRA (below), but  
                      00116 ; doesn't break if it crosses on page boundaries:
                      00117 ;
                      00118 ;       movlw   HIGH jump
                      00119 ;       movwf   PCLATH
                      00120 ;       rlncf   index,W                 ; get command code x2 into W...
                      00121 ;       addlw   LOW jump                ;...this only works with BRAs 
                      00122 ;       movwf   PCL                     ;...GOTOs require x4
                      00123 ;jump   bra     CL_ERROR
                      00124 ;       bra     CL_LOAD_SET_HSB
                      00125 ;       bra     CL_LOAD_SET_RGB
                      00126 ;       bra     CL_LOAD_PATCH
                      00127 ;       bra     CL_LOAD_FADE
                      00128 ;       bra     CL_LOAD_WATCH
                      00129 
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00130 switch  macro
                      00131         local   table_base
                      00132         movff   TBLPTRH,temp_tblptrh    ; save current table pointer
                      00133         movff   TBLPTRL,temp_tblptrl
                      00134 
                      00135         addlw   LOW table_base          ; add index (W) to table base
                      00136         movwf   TBLPTRL                 ; set low pointer
                      00137         movlw   HIGH table_base
                      00138         movwf   TBLPTRH
                      00139         btfsc   STATUS,C                ; propagate the carry from the add
                      00140         incf    TBLPTRH,F
                      00141 
                      00142         tblrd*+                         ; read and save vector address lo byte
                      00143         movf    TABLAT,W
                      00144         tblrd*                          ; read and save vector address hi byte
                      00145         movff   TABLAT,PCLATH
                      00146 
                      00147         movff   temp_tblptrh,TBLPTRH    ; restore calling table pointer
                      00148         movff   temp_tblptrl,TBLPTRL
                      00149 
                      00150         movwf   PCL                     ; jump to case routine
                      00151 table_base
                      00152         endm
                      00153 
                      00137 #include <DEV_INCLUDE_FILE>             ; 2: Our device include file
                      00001 ;*****************************************************************************
                      00002 ; d18f2520 - device header file
                      00003 ;*****************************************************************************
                      00004 ;
                      00005 ;    Filename:          d18f4520.inc
                      00006 ;    Author, Company:   Alden Hart, Luke's Lights
                      00007 ;    Date/Time/Rev:     091015
                      00008 ;
                      00009 ; Choses device and sets basic parameters related to the device and it's 
                      00010 ; use in this application
                      00011 ; 
                      00012 
                      00013 ;----- Common, device-specific definitions -----
                      00014 
  00000018            00015 DEV_FAMILY      equ     18              ; for F18 series
  00000024            00016 FOSC            equ     .36             ; MHz (approximate and must be tested)
                      00017 
                      00018 ; Used to qualify instructions:
  00000000            00019 A       equ     0                       ; Access Bank
  00000001            00020 B       equ     1                       ; BSR banked
                      00021 
                      00022 ;------ Select Device -----
                      00023 ; pick only one:
                      00024 ;DEVTYPE  equ   2420            ; 18F2420
                      00025 ;DEVTYPE  equ   2520            ; 18F2520
  00004420            00026 DEVTYPE  equ    4420            ; 18F4420
                      00027 ;DEVTYPE  equ   4520            ; 18F4520
                      00028 
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00029 ; PIC18F2420
                      00030     if DEVTYPE == 2420
                      00031         nolist
                      00032 #include <p18f2420.inc>
                      00033         list
                      00034 ;       list    p=18f2420               ; not needed - processor is set by MPLAB
                      00035 MAXRAM  equ     0x02FF
                      00036     endif
                      00037 
                      00038 ;PIC18F2520
                      00039     if DEVTYPE == 2520
                      00040         nolist
                      00041 #include <p18f2520.inc>
                      00042         list
                      00043 ;       list    p=18f2520               ; not needed - processor is set by MPLAB
                      00044 MAXRAM  equ     0x05FF
                      00045     endif
                      00046 
                      00047 ;PIC18F4420
                      00048     if DEVTYPE == 4420
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC18F4420 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2007 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      01293         LIST
                      00051         list
                      00052 ;       list    p=18f4420               ; not needed - processor is set by MPLAB
  000002FF            00053 MAXRAM  equ     0x02FF
                      00054     endif
                      00055 
                      00056 ;PIC18F4520
                      00057     if DEVTYPE == 4520
                      00058         nolist
                      00059 #include <p18f4520.inc>
                      00060         list
                      00061 ;       list    p=18f4520               ; not needed - processor is set by MPLAB
                      00062 MAXRAM  equ     0x05FF
                      00063     endif
                      00138 #include <LED_INCLUDE_FILE>             ; 3: LED subsystem include file
                      00001 ;*****************************************************************************
                      00002 ; PIC18F family - LED subsystem include file
                      00003 ;*****************************************************************************
                      00004 ;*****************************************************************************
                      00005 ;
                      00006 ;    Filename:          led.inc
                      00007 ;    Author, Company:   Alden Hart, Luke's Lights
                      00008 ;    Chip Support:      Supports PIC18F family
                      00009 ;    Revision:          091015
                      00010 ;
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00011 ;    This file basically serves as documentation for creating cues and playback
                      00012 ;
                      00013 ;*****************************************************************************
                      00014 ; CUES AND PLAYBACK
                      00015 ; 
                      00016 ; PLAY_INIT               Init playlist/cue module and load first playlist/cue
                      00017 ; PLAY_GET_NEXT_PLAYLIST  Return ptr to next playlist in playlist master table
                      00018 ; PLAY_GET_PREV_PLAYLIST  Return ptr to previous playlist in playlist master table
                      00019 ; PLAY_START_PLAYIST      Start a playlist from playlist ptr (becomes active playlist)
                      00020 ; PLAY_RUN_NEXT_CUE       Run next cue in active playlist
                      00021 ;         
                      00022 ; CUE_LOAD_CUE            Load an entire cue
                      00023 ; CUE_GET_NEXT_COMMAND    Iterator used for for loading an entire cue
                      00024 ; CUE_GET_COMMAND         Load a single command from cue (into FDR_LOADER buffer)
                      00025 ; CUE_SET_ARGUMENT        Load an argument into arg table
                      00026 ; CUE_GET_ARGUMENT        Get an argument from arg table
                      00027 ;
                      00028 ; CUES
                      00029 ;
                      00030 ; A CUE is a set of COMMANDS that run as a unit to load the state of the 
                      00031 ; lighting system. A cue takes data from program memory and loads the commands
                      00032 ; in to the FADER tables (there are some exceptions).
                      00033 ;
                      00034 ; For example, if you wanted to load 8 different hue waveforms, set 
                      00035 ; saturations to 8 different static levels, and PATCH all brightnesses to a 
                      00036 ; master channel, this could be done using a cue. 
                      00037 ;
                      00038 ; The challenge is to define (and encode) complex cues in a way that's both 
                      00039 ; simple to understand and program and is also relatively memory efficicient. 
                      00040 ; The above example would take about ~200 bytes if performed as a simple set of 
                      00041 ; commands. Using the cue tools for definition and encoding this same 
                      00042 ; operation could be encoded in as little as ~20 bytes.
                      00043 ;
                      00044 ; To do this, a series of other operations is supported for cues:
                      00045 ; 
                      00046 ;       - CUE_CMD               load a regular command from pgm memory to RAM
                      00047 ;       - CUE_ARG               load an argument structure into an arg cell
                      00048 ;       - CUE_LOOP              load the next command N times           
                      00049 ;       - CUE_LOOP_BLOCK        loop until END_ADDR, N times, starting at START_ADDR
                      00050 ;       - CUE_JUMP              jump to JUMP_ADDR
                      00051 ;       - CUE_DONE              end of cue or playback
                      00052 ;       - CUE_CODA              start queue over
                      00053 ;
                      00054 ; Details of the above operations are littered throughout the headers in this
                      00055 ; file. Summaries of the cue operations are provided below;
                      00056 ;
                      00057 ; CUE_CMD:      CUE_CMD, cmd, argmask, arg0....argN
                      00058 ;
                      00059 ; Action is to load the command into RAM - similarly to if the command was 
                      00060 ; received in a serial RX buffer. Contains a command code followed by a 
                      00061 ; bitmask specifying which args in the command are to be read lterally from 
                      00062 ; the command line and which args are to be loaded from the argument cells. 
                      00063 ; The argmask is one byte long except in the case of the FADE command where 
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00064 ; it is 2 bytes. See CUE_LOAD_COMMAND for details.
                      00065 ; 
                      00066 ; CUE_ARG:      CUE_ARG, argnum, opcode, var1, [var2], [var3]
                      00067 ;
                      00068 ; Action is to initialize one of the argument cells with an opcode and one or
                      00069 ; more starting values (vars). Consists of a CUE_ARG byte and 3 - 5 data
                      00070 ; bytes. Arguments can increment, decrement, add, and do other things between
                      00071 ; command calls that allow common commands to be set up generically.
                      00072 ; See CUE_LOAD_ARGUMENT for details.
                      00073 ;
                      00074 ; CUE_LOOP:             CUE_LOOP, repeat_count
                      00075 ;
                      00076 ; Action is to run the next command N times. The next table entry must be a 
                      00077 ; command.
                      00078 ;
                      00079 ; CUE_LOOP_BLOCK:       CUE_LOOP_BLOCK, repeat_count, start_address
                      00080 ;
                      00081 ; Action is to loop N times between the start address and CUE_DONE (the 
                      00082 ; "looping block"). CUE execution continues on the next line after the 
                      00083 ; CUE_LOOP_BLOCK command once the loop is complete.
                      00084 ;
                      00085 ; This command is useful to iterate through a series of channels with 
                      00086 ; parameters that vary based on the number of times an arg is used. Typically 
                      00087 ; a set of CUE_ARGS is setup before calling the block. This is useful to 
                      00088 ; create "subroutines" of commonly used preset operations. This command 
                      00089 ; DOES NOT nest and cannot be called recursively (sorry!).
                      00090 ;
                      00091 ; CUE_JUMP:             CUE_JUMP, jump_address
                      00092 ;
                      00093 ; Action is to transfer cue exeution to a new address, from which execution
                      00094 ; will not return. Any number of jumps may be chained. Useful for "finishing up"
                      00095 ; with common code.
                      00096 ;
                      00097 ; CUE_DONE:             CUE_DONE <no parameters>
                      00098 ;
                      00099 ; Signals the end of a cue block (see above descriptions). If found in 
                      00100 ; the main body of the called cue, it terminates the interpretation of the 
                      00101 ; cue and returns control to the caller. If found in a LOOP is terminates
                      00102 ; that iteration of the loop and returns control to the cue line that 
                      00103 ; called the loop.
                      00104 ; 
                      00105 ; 
                      00106 ; RESOURCE USAGE:
                      00107 ; - The PLAYBACK sub-system uses FSR1 as its primary pointer, FSR2 as secondary. 
                      00108 ; - Does not use FSR0 as this is reserved for interrupts.
                      00109 ; - The ARG table takes 128 bytes of RAM to store 32 arguments.
                      00110 ; - Routines follow the convnetion of returning Z bit set for OK, or to indicate
                      00111 ;   the further processing is required.
                      00112 
                      00113 ;----- Circuit and Command Processing Definitions ----
                      00114 ; See Ckt Mapping tab of spreadsheet for further documentation
                      00115 
  0000000D            00116 FDR_TABLE_LEN           equ     .13     ; bytes allocated per fader table
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000015            00117 CHN_NUM_MAX             equ     .21     ; number of color or mono channels (zero based)
  0000001D            00118 CKT_NUM_MAX             equ     .29     ; maximum encoded circuit number (zero based)
  00000005            00119 CKT_TABLE_INCREMENT     equ     .5      ; number of ports being serviced
  00000027            00120 CKT_TABLE_LEN           equ     .39     ; circuit table is 5 ports * 8 bits (zero based)
                      00121 
  00000F80            00122 switch01p               equ     PORTA
  00000000            00123 switch01b               equ     .0
                      00124 
  00000001            00125 MONOCHROME_MODE         equ     TRUE    ; set TRUE if running monochrome, FALSE for color
                      00126 
                      00127 ; not used in monochrome mode apps
  00000000            00128 RED_OFFSET              equ     0       ; table offsets
  00000001            00129 GRN_OFFSET              equ     1
  00000002            00130 BLU_OFFSET              equ     2
  00000003            00131 EXT_OFFSET              equ     3       ; offset for extra channel
  00000000            00132 HUE_OFFSET              equ     0
  00000001            00133 SAT_OFFSET              equ     1
  00000002            00134 BRT_OFFSET              equ     2
                      00135 
                      00136 ;---- COMMAND SET ----
                      00137 ; Command set - MSbyte is command code, LSbyte is argument counter
                      00138 ; Adding a command involves:
                      00139 ;  - adding it to this list and adjusting any values
                      00140 ;  - adding it to CMD_LOADER dispatch table (led_fader.asm)
                      00141 ;  - adding it to CMD_VALIDATE_CMDCODE (led_fader.asm)
                      00142 ;  - adding it to CUE_GET_COMMAND (led_cue.asm)
                      00143 
  00000011            00144 SET_BRT                 equ     0x11    ; set BRT for color or monochrome
  00000023            00145 SET_HSB                 equ     0x23    ; set HSB values (color only)
  00000033            00146 SET_RGB                 equ     0x33    ; set RGB values (color only)
  00000041            00147 PATCH                   equ     0x41    ; PATCH command
  00000056            00148 FADE                    equ     0x56    ; FADE command args up through OFF
  00000057            00149 FADE_REPEAT             equ     0x57    ; FADE command args up through REPEAT 
  00000058            00150 FADE_MIN                equ     0x58    ; FADE command args up through MIN
  00000059            00151 FADE_MAX                equ     0x59    ; FADE command args up through MAX
  0000005A            00152 FADE_X                  equ     0x5A    ; FADE command args up through XFADE
  00000060            00153 WATCH                   equ     0x60    ; WATCH command - takes one arg (0)
                      00154 
  000000FF            00155 NOW                     equ     0xFF    ; WATCH command value - load now
  000000FE            00156 NEVER                   equ     0xFE    ; WATCH command value - never load
                      00157 
                      00158 ;---- Cue command line templates (very useful) ----
                      00159 ; SET_HSB       CUE_CMD  CMD_SET_HSB  mask  chn  hue   sat   brt        
                      00160 ; PATCH         CUE_CMD  CMD_PATCH  mask   slave_ckt     master_ckt
                      00161 ; FADE_46       CUE_CMD CMD_FADE  mask  ckt_num     presc  dly   up   on  down off      
                      00162 
                      00163 ;---- CUE AND PLAYBACK EQUATES ----
                      00164 
  00000000            00165 ARG_NUM_MAX             equ     .0      ; maximum argument number (zero is a valid #)
                      00166                                         ; each arg takes 4 bytes of RAM
  00000000            00167 ARG_HI_FLAG             equ     .0      ; bit to set and test for hi args (>7)
                      00168 
  00000000            00169 CUE_DONE                equ     .00     ; should be zero
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000001            00170 CUE_CMD                 equ     .01     ; prefix for a command
  00000002            00171 CUE_ARG                 equ     .02     ; prefix for an argument
  00000003            00172 CUE_LOOP                equ     .03
  00000004            00173 CUE_LOOP_BLOCK          equ     .04
  00000005            00174 CUE_JUMP                equ     .05
  00000005            00175 CUE_MAX                 equ     .05     ; maximum allowable cmd instruction value
                      00176 
                      00177 ; MSbyte of these PLAYLIST_xxxx values must be zero:
  00000000            00178 PLAYLIST_DONE           equ     0x0000  ; requries a 16 bit value
  00000001            00179 PLAYLIST_CODA           equ     0x0001
                      00180 
                      00181 ;---- Argument OPCODE definitions ----
                      00182 ;
                      00183 ; Command arguments (args) are 4 byte structures that perform substitutions 
                      00184 ; for command variables during command loads. Args can perform literal 
                      00185 ; substitution for variables or a variety of simple math functions. Structure:
                      00186 ;
                      00187 ;       - Arg number    args number 0 - N. Implicit based on location in table
                      00188 ;       - Opcode        operation to perform during argument substitution
                      00189 ;       - Operand1      (op1) first operand interprested by opcode
                      00190 ;       - Operand2      (op2) second operand interprested by opcode
                      00191 ;       - Operand3      (op3) thirg operand interprested by opcode
                      00192 ;
                      00193 ; op2(op1) means use the value of op1 found at the argnum provided in op2
                      00194 ;   an arg error returns the value of zero.
                      00195 ;
                      00196 ; opcode            op1    op2    op3   usage
                      00197 ; OP_LIT            value  ---    ---   ; use op1 as literal value
                      00198 ; OP_INC            start  ---    ---   ; use op1, post increment & store in op1
                      00199 ; OP_INC_RANGE      start  max    min   ; inc by 1 [op2=max, op3=min], store in op1
                      00200 ; OP_INCX2_RANGE    start  max    min   ; inc by 2 [op2=max, op3=min], store in op1
                      00201 ; OP_INCX3_RANGE    start  max    min   ; inc by 3 [op2=max, op3=min], store in op1
                      00202 ; OP_INCX4_RANGE    start  max    min   ; inc by 4 [op2=max, op3=min], store in op1
                      00203 ; OP_DEC            start  ---    ---   ; use op1, post decrement & store in op1
                      00204 ; OP_DEC_RANGE      start  max    min   ; dec by 1 [op2=max, op3=min], store in op1
                      00205 ; OP_DECX2_RANGE    start  max    min   ; dec by 2 [op2=max, op3=min], store in op1
                      00206 ; OP_DECX3_RANGE    start  max    min   ; dec by 3 [op2=max, op3=min], store in op1
                      00207 ; OP_DECX4_RANGE    start  max    min   ; dec by 4 [op2=max, op3=min], store in op1
                      00208 ; OP_ADD            start  add    ---   ; (op1+op2), save result in op1
                      00209 ; OP_ADD_AND        start  add    and   ; (op1+op2), AND with op3, do not save result
                      00210 ; OP_ADD_AND_SAVE   start  add    and   ; (op1+op2), AND with op3l, save result in op1
                      00211 ; OP_ADD_IND        start  ind    ---   ; (op1+op2(op1)), do not save result
                      00212 ; OP_ADD_IND_SAVE   start  ind    ---   ; (op1+op2(op1)), save result in op1
                      00213 ; OP_ADD_IND_AND    start  ind    and   ; (op1+op2(op1)), AND with op3, do not save
                      00214 ; OP_ADD_IND_AND_SAVE srt  ind    and   ; (op1+op2(op1)), AND with op3, save in op1
                      00215 ; OP_SUB            start  sub    ---   ; (op1-op2), save result in op1
                      00216 ; OP_SUB_AND        start  sub    and   ; (op1-op2), AND with op3, do not save result
                      00217 ; OP_SUB_AND_SAVE   start  sub    and   ; (op1-op2), AND with op3, save in op1
                      00218 ; OP_SUB_IND        start  ind    ---   ; (op1-op2(op1)), do not save result
                      00219 ; OP_SUB_IND_SAVE   start  ind    ---   ; (op1-op2(op1)), save result in op1
                      00220 ; OP_SUB_IND_AND    start  ind    and   ; (op1-op2(op1)), AND with op3, do not save
                      00221 ; OP_SUB_IND_AND_SAVE srt  ind    and   ; (op1-op2(op1)), AND with op3, save in op1
                      00222 ; OP_RAND           seed   ---    ---   ; pseudo-random#, op1=seed, update seed
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00223 ; OP_RAND_RANGE     seed   max    min   ; pseudo-random# [op2=max, op3=min], op1=seed
                      00224 
                      00225 ; actual definitions used by the code:
                      00226 
  00000000            00227 OP_LIT                  equ     .00     ; use op1 as literal value
  00000001            00228 OP_INC                  equ     .01     ; use op1, post increment & store in op1
  00000002            00229 OP_INC_RANGE            equ     .02     ; inc by 1 [op2=max, op3=min], store in op1
  00000003            00230 OP_INCX2_RANGE          equ     .03     ; inc by 2 [op2=max, op3=min], store in op1
  00000004            00231 OP_INCX3_RANGE          equ     .04     ; inc by 3 [op2=max, op3=min], store in op1
  00000005            00232 OP_INCX4_RANGE          equ     .05     ; inc by 4 [op2=max, op3=min], store in op1
  00000006            00233 OP_DEC                  equ     .06     ; use op1, post decrement & store in op1
  00000007            00234 OP_DEC_RANGE            equ     .07     ; dec by 1 [op2=max, op3=min], store in op1
  00000008            00235 OP_DECX2_RANGE          equ     .08     ; dec by 2 [op2=max, op3=min], store in op1
  00000009            00236 OP_DECX3_RANGE          equ     .09     ; dec by 3 [op2=max, op3=min], store in op1
  0000000A            00237 OP_DECX4_RANGE          equ     .10     ; dec by 4 [op2=max, op3=min], store in op1
  0000000B            00238 OP_ADD                  equ     .11     ; (op1+op2), save result in op1
  0000000C            00239 OP_ADD_AND              equ     .12     ; (op1+op2), AND with op3, do not save result
  0000000D            00240 OP_ADD_AND_SAVE         equ     .13     ; (op1+op2), AND with op3l, save result in op1
  0000000E            00241 OP_ADD_IND              equ     .14     ; (op1+op2(op1)), do not save result
  0000000F            00242 OP_ADD_IND_SAVE         equ     .15     ; (op1+op2(op1)), save result in op1
  00000010            00243 OP_ADD_IND_AND          equ     .16     ; (op1+op2(op1)), AND with op3, do not save
  00000011            00244 OP_ADD_IND_AND_SAVE     equ     .17     ; (op1+op2(op1)), AND with op3, save in op1
  00000012            00245 OP_SUB                  equ     .18     ; (op1-op2), save result in op1
  00000013            00246 OP_SUB_AND              equ     .19     ; (op1-op2), AND with op3, do not save result
  00000014            00247 OP_SUB_AND_SAVE         equ     .20     ; (op1-op2), AND with op3, save in op1
  00000015            00248 OP_SUB_IND              equ     .21     ; (op1-op2(op1)), do not save result
  00000016            00249 OP_SUB_IND_SAVE         equ     .22     ; (op1-op2(op1)), save result in op1
  00000017            00250 OP_SUB_IND_AND          equ     .23     ; (op1-op2(op1)), AND with op3, do not save
  00000018            00251 OP_SUB_IND_AND_SAVE     equ     .24     ; (op1-op2(op1)), AND with op3, save in op1
  00000019            00252 OP_RAND                 equ     .25     ; pseudo-random#, op1=seed, update seed
  0000001A            00253 OP_RAND_RANGE           equ     .26     ; pseudo-random# [op2=max, op3=min], op1=seed
  0000001A            00254 OP_OPCODE_MAX           equ     .26     ; MAXIMUM LEGAL OPCODE VALUE
                      00255 
                      00256 
                      00257 ;--- SOME USEFUL SHORTHAND ----
                      00258 
  00000000            00259 HUE     equ     HUE_OFFSET
  00000001            00260 SAT     equ     SAT_OFFSET
  00000002            00261 BRT     equ     BRT_OFFSET
                      00262 
                      00263 ; Colors (applies to HUE)
                      00264 
  00000000            00265 RED     equ     0x00                    ; red
  00000015            00266 ORN     equ     0x15                    ; orange
  0000002A            00267 YEL     equ     0x2A                    ; yellow
  00000055            00268 GRN     equ     0x55                    ; green
  0000007F            00269 CYN     equ     0x7F                    ; cyan
  000000AB            00270 BLU     equ     0xAB                    ; blue
  000000D5            00271 MAG     equ     0xD5                    ; magenta
  000000D5            00272 VIO     equ     MAG                     ; violet = magenta
                      00273 
                      00274 ; Channel specifiers with the 2 left shifts:
  00000000            00275 c00     equ     .00 <<2
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000004            00276 c01     equ     .01 <<2
  00000008            00277 c02     equ     .02 <<2
  0000000C            00278 c03     equ     .03 <<2
  00000010            00279 c04     equ     .04 <<2
  00000014            00280 c05     equ     .05 <<2
  00000018            00281 c06     equ     .06 <<2
  0000001C            00282 c07     equ     .07 <<2
  00000020            00283 c08     equ     .08 <<2
  00000024            00284 c09     equ     .09 <<2
  00000028            00285 c10     equ     .10 <<2
  0000002C            00286 c11     equ     .11 <<2
  00000030            00287 c12     equ     .12 <<2
  00000034            00288 c13     equ     .13 <<2
  00000038            00289 c14     equ     .14 <<2
  0000003C            00290 c15     equ     .15 <<2
  00000040            00291 c16     equ     .16 <<2
  00000044            00292 c17     equ     .17 <<2
  00000048            00293 c18     equ     .18 <<2
  0000004C            00294 c19     equ     .19 <<2
  00000050            00295 c20     equ     .20 <<2
  00000054            00296 c21     equ     .21 <<2
  00000058            00297 c22     equ     .22 <<2
  0000005C            00298 c23     equ     .23 <<2
  00000060            00299 c24     equ     .24 <<2
  00000064            00300 c25     equ     .25 <<2
  00000068            00301 c26     equ     .26 <<2
  0000006C            00302 c27     equ     .27 <<2
  00000070            00303 c28     equ     .28 <<2
  00000074            00304 c29     equ     .29 <<2
  00000078            00305 c30     equ     .30 <<2
  0000007C            00306 c31     equ     .31 <<2
  00000080            00307 c32     equ     .32 <<2
  00000084            00308 c33     equ     .33 <<2
  00000088            00309 c34     equ     .34 <<2
  0000008C            00310 c35     equ     .35 <<2
  00000090            00311 c36     equ     .36 <<2
  00000094            00312 c37     equ     .37 <<2
  00000098            00313 c38     equ     .38 <<2
  0000009C            00314 c39     equ     .39 <<2
  000000A0            00315 c40     equ     .40 <<2
  000000A4            00316 c41     equ     .41 <<2
  000000A8            00317 c42     equ     .42 <<2
  000000AC            00318 c43     equ     .43 <<2
  000000B0            00319 c44     equ     .44 <<2
  000000B4            00320 c45     equ     .45 <<2
  000000B8            00321 c46     equ     .46 <<2
  000000BC            00322 c47     equ     .47 <<2
  000000C0            00323 c48     equ     .48 <<2
  000000C4            00324 c49     equ     .49 <<2
  000000C8            00325 c50     equ     .50 <<2
  000000CC            00326 c51     equ     .51 <<2
  000000D0            00327 c52     equ     .52 <<2
  000000D4            00328 c53     equ     .53 <<2
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  000000D8            00329 c54     equ     .54 <<2
  000000DC            00330 c55     equ     .55 <<2
  000000E0            00331 c56     equ     .56 <<2
  000000E4            00332 c57     equ     .57 <<2
  000000E8            00333 c58     equ     .58 <<2
  000000EC            00334 c59     equ     .59 <<2
  000000F0            00335 c60     equ     .60 <<2
  000000F4            00336 c61     equ     .61 <<2
  000000F8            00337 c62     equ     .62 <<2
  000000FC            00338 c63     equ     .63 <<2
                      00339 
                      00340         
                      00139 #include <APP_INCLUDE_FILE>             ; 4: Application include file
                      00001 ;*****************************************************************************
                      00002 ; wClock - common header file
                      00003 ;*****************************************************************************
                      00004 ;
                      00005 ;    Filename:          wClock.inc
                      00006 ;    Author, Company:   Alden Hart, Luke's Lights
                      00007 ;    Date/Time/Rev:     091015
                      00008 ;
                      00009 ;    'sproke notes: If shit breaks, look in the following places:
                      00010 ;       - test ISR dispatcher for not crossing a page boundary
                      00011 ;       - look for all occurrences of "HACK HACK"
                      00012 
                      00013 ;------ Application Switches -----      
                      00014 ; The default initialization routines are provided in the device file: d18fxxxx.asm
                      00015 ; Setting an _EXTERNAL switch TRUE will use an init located in some other file.
                      00016 ; You must also set up an extern in the d18fxxxx.asm file and a global in the 
                      00017 ; target application file to override the default init.
                      00018 
  00000001            00019 INIT_PORTS_EXTERNAL     equ     TRUE    ; set true to use an external init routine
  00000001            00020 INIT_T0_EXTERNAL        equ     TRUE    ; uses the one in wClock.asm
  00000001            00021 INIT_T1_EXTERNAL        equ     TRUE    ; uses the one in led_ckt4520.asm
  00000001            00022 INIT_WATCHDOG_TIMER     equ     TRUE    ; set if WDT enabled. See WDT_INIT
                      00023 
                      00024 ;----- Assembly-Time Switches ------
                      00025 
  00000000            00026 RX_ENABLED              equ     FALSE   ; enable RX ISR processing
  00000000            00027 ICD_ENABLED             equ     FALSE   ; enable ICD2 debugging
  00000001            00028 UNITS_ENABLED           equ     TRUE    ; enable unit tests
  00000001            00029 DIAGNOSTICS_ENABLED     equ     TRUE    ; takes up space and time
                      00030 
  00000BDC            00031 CLK_TIMER               equ     0x0BDC  ; value for prescale 128 (rev 1)
                      00032 ;CLK_TIMER              equ     0xC000  ; TEST value for prescale 128
                      00033 
                      00034 ;----- switch port assignments and equates
                      00035 
  00000008            00036 SW_DEBOUNCE_MAX         equ     .8      ; # of 6.66 ms cycles to debounce switch
  0000003C            00037 SW_HELD_COUNT           equ     .60     ; # of 6.66 ms increments before advance
  00000000            00038 SW_STATE_ON_bp          equ     .00     ; 1=switch is on  0=switch is off
  00000001            00039 SW_STATE_RISING_bp      equ     .01     ; rising edge (this state can be removed)
  00000002            00040 SW_STATE_FALLING_bp     equ     .02     ; falling edge (this state can be removed)
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00041 
                      00042 ;----- Table program memory allocation -----
                      00043 ; The following  tables must be aligned on a 0x100 page boundary
                      00044 ; Look at the eFruit.map file for optimal placement
                      00045 
  00002000            00046 BASE_OF_TABLES          equ     0x2000
  00000600            00047 HSB_TABLES_LEN          equ     0x600
                      00048 ;HSB_TABLES_LEN         equ     0x00
                      00049 
  00002000            00050 HSB_TABLES_START        equ     BASE_OF_TABLES
  00002600            00051 CUE_TABLES_START        equ     HSB_TABLES_START + HSB_TABLES_LEN 
                      00052 ; Cue tables can use the rest of program memory if they need to, and should be last
                      00053 
                      00054 ;--- Flag values for app_flags ----
                      00055 ; Notes on TIME bits:
                      00056 ; - TIME_5MS is an approximate flag set by cycle processing (for switch timing)
                      00057 ; - The other TIME flags are managed by CLK_IRQ
                      00058 
  00000000            00059 DIRTY_BIT               equ     0       ; set to signal new dimmer value
  00000001            00060 CYCLE_START_FLAG        equ     1       ; set once per cycle during BAM interval
  00000002            00061 SWITCH_READ_FLAG        equ     2       ; is set approx every 6 ms
  00000003            00062 SECOND_FLAG             equ     3       ; is set every second (exactly)
                      00063 
                      00064 ;---- Word to channel mapping ----
                      00065 
  00000000            00066 ITS             equ     .0              ; Channel 0 is "IT'S"
  00000001            00067 HALF            equ     .1
  00000002            00068 TEN_            equ     .2              ; differentiate from hour TEN
  00000003            00069 QUARTER         equ     .3
  00000004            00070 TWENTY          equ     .4
  00000005            00071 FIVE_           equ     .5              ; differentiate from hour FIVE
  00000006            00072 MINUTES         equ     .6
  00000007            00073 PAST            equ     .7
  00000008            00074 TO_             equ     .8              ; must have an underscore
  00000009            00075 ONE             equ     .9
  0000000A            00076 TWO             equ     .10
  0000000B            00077 THREE           equ     .11
  0000000C            00078 FOUR            equ     .12
  0000000D            00079 FIVE            equ     .13
  0000000E            00080 SIX             equ     .14
  0000000F            00081 SEVEN           equ     .15
  00000010            00082 EIGHT           equ     .16
  00000011            00083 NINE            equ     .17
  00000012            00084 TEN             equ     .18
  00000013            00085 ELEVEN          equ     .19
  00000014            00086 TWELVE          equ     .20
  00000015            00087 OCLOCK          equ     .21
                      00088 ;PLUS_1         equ     .22
                      00089 ;PLUS_2         equ     .23
                      00090 ;PLUS_3         equ     .24
                      00091 ;PLUS_4         equ     .25
                      00140 
                      00141 ;------ Exports (globals) -----
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00142 
  0000                00143         global  chn_num                 ; channel number
  0000                00144         global  ckt_num                 ; circuit number
  0000                00145         global  ckt_level               ; circuit level
  0000                00146         global  CKT_INIT                ; circuit sub-system inits
  0000                00147         global  CKT_ISR                 ; ISR to read out next row
  0000                00148         global  CKT_WRITE_CIRCUIT       ; write a mono or R,G, or B byte into ckt table
  0000                00149         global  CKT_WRITE_CHANNEL       ; write a mono value or RGB triplet to ckt table
                      00150 
                      00151     if INIT_PORTS_EXTERNAL
  0000                00152         global  PORT_INIT               ; use local port initializations
                      00153     endif
                      00154     if INIT_T1_EXTERNAL
  0000                00155         global  T1_INIT                 ; use local timer1 init
  0000                00156         global  T1_STOP                 ; use local timer1 init
  0000                00157         global  T1_START                ; use local timer1 start
                      00158     endif
                      00159 
                      00160     if MONOCHROME_MODE
  0000                00161         global  chn_level               ; channel level
                      00162     else
                      00163         global  red_level               ; need all these level for color mode
                      00164         global  grn_level
                      00165         global  blu_level
                      00166         global  hue_level
                      00167         global  sat_level
                      00168         global  brt_level
                      00169     endif
                      00170 
  0000                00171         global  UT_CKT                  ; circuit unit tests
                      00172 
                      00173 ;----- External variables -----
                      00174 
  0000                00175         extern  app_flags
                      00176 
                      00177 ;---- Port Definitions ----             ; from portmap, above
                      00178 ; LED driver bits...
                      00179 ; If we were doing bit operations to test, set and clear bits (btfss, bsf, bcf)
                      00180 ; we would need the following forms:
                      00181 ;    CKT_00p    equ     LATA            ; PORT A
                      00182 ;    CKT_00b    equ     .6              ; BIT 6
                      00183 ;
                      00184 ; But we are doing port register loads and bitmasking so we need the following:
  00000000            00185 baseA   equ     0x00                    ; offset into ckt_table for port A bits
  00000001            00186 baseB   equ     0x01
  00000002            00187 baseC   equ     0x02
  00000003            00188 baseD   equ     0x03
  00000004            00189 baseE   equ     0x04
                      00190 
  00000001            00191 mask0   equ     0x01                    ; bitmask mask definitions
  00000002            00192 mask1   equ     0x02
  00000004            00193 mask2   equ     0x04
  00000008            00194 mask3   equ     0x08
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000010            00195 mask4   equ     0x10
  00000020            00196 mask5   equ     0x20
  00000040            00197 mask6   equ     0x40
  00000080            00198 mask7   equ     0x80
                      00199 
                      00200 ; To convert between them run search and replace on:
                      00201 ;       LAT ---> base
                      00202 ;       '.' ---> mask   (and vice versa)
                      00203 
  00000002            00204 CKT_00p         equ     baseC           ; D1 (IT'S)
  00000002            00205 CKT_00b         equ     mask1
                      00206 
  00000003            00207 CKT_01p         equ     baseD           ; D2 (HALF)
  00000001            00208 CKT_01b         equ     mask0
  00000003            00209 CKT_02p         equ     baseD           ; D3 (TEN)
  00000004            00210 CKT_02b         equ     mask2
  00000003            00211 CKT_03p         equ     baseD           ; D4 (QUARTER left)
  00000008            00212 CKT_03b         equ     mask3
  00000002            00213 CKT_04p         equ     baseC           ; D5 (QUARTER right)
  00000020            00214 CKT_04b         equ     mask5
                      00215 
  00000002            00216 CKT_05p         equ     baseC           ; D6 (TWENTY left)
  00000001            00217 CKT_05b         equ     mask0
  00000002            00218 CKT_06p         equ     baseC           ; D7 (TWENTY right)
  00000008            00219 CKT_06b         equ     mask3
  00000003            00220 CKT_07p         equ     baseD           ; D8 (FIVE)
  00000002            00221 CKT_07b         equ     mask1
  00000002            00222 CKT_08p         equ     baseC           ; D9 (MINUTES left)
  00000040            00223 CKT_08b         equ     mask6
  00000003            00224 CKT_09p         equ     baseD           ; D10 (MINUTES right)
  00000020            00225 CKT_09b         equ     mask5
                      00226 
  00000002            00227 CKT_10p         equ     baseC           ; D11 (PAST)
  00000004            00228 CKT_10b         equ     mask2
  00000002            00229 CKT_11p         equ     baseC           ; D12 (TO)
  00000010            00230 CKT_11b         equ     mask4
                      00231 
  00000004            00232 CKT_12p         equ     baseE           ; D13 (ONE)
  00000004            00233 CKT_12b         equ     mask2
  00000001            00234 CKT_13p         equ     baseB           ; D14 (TWO)
  00000002            00235 CKT_13b         equ     mask1
  00000003            00236 CKT_14p         equ     baseD           ; D15 (THREE left)
  00000010            00237 CKT_14b         equ     mask4
  00000002            00238 CKT_15p         equ     baseC           ; D16 (THREE right)
  00000080            00239 CKT_15b         equ     mask7
  00000003            00240 CKT_16p         equ     baseD           ; D17 (FOUR)
  00000040            00241 CKT_16b         equ     mask6
                      00242 
  00000004            00243 CKT_17p         equ     baseE           ; D18 (FIVE)
  00000002            00244 CKT_17b         equ     mask1
  00000000            00245 CKT_18p         equ     baseA           ; D19 (SIX)
  00000020            00246 CKT_18b         equ     mask5
  00000000            00247 CKT_19p         equ     baseA           ; D20 (SEVEN left)
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000008            00248 CKT_19b         equ     mask3
  00000003            00249 CKT_20p         equ     baseD           ; D21 (SEVEN right)
  00000080            00250 CKT_20b         equ     mask7
  00000001            00251 CKT_21p         equ     baseB           ; D22 (EIGHT)
  00000001            00252 CKT_21b         equ     mask0
                      00253 
  00000004            00254 CKT_22p         equ     baseE           ; D23 (NINE)
  00000001            00255 CKT_22b         equ     mask0
  00000000            00256 CKT_23p         equ     baseA           ; D24 (TEN)
  00000010            00257 CKT_23b         equ     mask4
  00000000            00258 CKT_24p         equ     baseA           ; D25 (ELEVEN left)
  00000004            00259 CKT_24b         equ     mask2
  00000000            00260 CKT_25p         equ     baseA           ; D26 (ELEVEN right)
  00000002            00261 CKT_25b         equ     mask1
  00000001            00262 CKT_26p         equ     baseB           ; D27 (TWELVE left)
  00000020            00263 CKT_26b         equ     mask5
  00000001            00264 CKT_27p         equ     baseB           ; D28 (TWELVE right)
  00000010            00265 CKT_27b         equ     mask4
                      00266 
  00000001            00267 CKT_28p         equ     baseB           ; D29 (O'CLOCK left)
  00000004            00268 CKT_28b         equ     mask2
  00000001            00269 CKT_29p         equ     baseB           ; D30 (O'CLOCK right)
  00000008            00270 CKT_29b         equ     mask3
                      00271 ;CKT_30p                equ     base            ; D31 (PLUS 1)
                      00272 ;CKT_30b                equ     mask
                      00273 ;CKT_31p                equ     base            ; D32 (PLUS 2)
                      00274 ;CKT_31b                equ     mask
                      00275 ;CKT_32p                equ     base            ; D33 (PLUS 3)
                      00276 ;CKT_32b                equ     mask
                      00277 ;CKT_33p                equ     base            ; D34 (PLUS 4)
                      00278 ;CKT_33b                equ     mask
                      00279 
                      00280 ;---- Circuit timer settings, 150 Hz ----
                      00281 ; See "Ballasting" tab in spreadsheet for timing computation
                      00282 ; Note: B0_ON cannot be so narrow that the timer expires before the ISR exits.
                      00283 
  0000FFBF            00284 CKT_TMR_B0_ON   equ     0xFFBF                  ; bit 0 ON timing
  0000FF71            00285 CKT_TMR_B0_OFF  equ     0xFF71                  ; bit 0 OFF timing
                      00286 
  0000FF71            00287 CKT_TMR_B1_ON   equ     0xFF71
  0000FED4            00288 CKT_TMR_B1_OFF  equ     0xFED4
                      00289 
  0000FED4            00290 CKT_TMR_B2_ON   equ     0xFED4
  0000FD9A            00291 CKT_TMR_B2_OFF  equ     0xFD9A
                      00292 
  0000FD9A            00293 CKT_TMR_B3_ON   equ     0xFD9A
  0000FB27            00294 CKT_TMR_B3_OFF  equ     0xFB27
                      00295 
  0000FB27            00296 CKT_TMR_B4_ON   equ     0xFB27
  0000F640            00297 CKT_TMR_B4_OFF  equ     0xF640
                      00298 
  0000F640            00299 CKT_TMR_B5_ON   equ     0xF640
  0000EC72            00300 CKT_TMR_B5_OFF  equ     0xEC72
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00301 
                      00302 ; Bit6 and bit7 timings are actually not used but are here for completeness
  0000EC72            00303 CKT_TMR_B6_ON   equ     0xEC72                  
  0000D8D6            00304 CKT_TMR_B6_OFF  equ     0xD8D6
  0000D8D6            00305 CKT_TMR_B7_ON   equ     0xD8D6
  0000B19E            00306 CKT_TMR_B7_OFF  equ     0xB19E
                      00307 
                      00308 
                      00309 ;*****************************************************************************
                      00310 ;**************************** RAM DEFINITIONS ********************************
                      00311 ;*****************************************************************************
                      00312 
                      00313 ;##### BANK 0 #####
                      00314 UDATA_BANK_0_ACS        udata_acs       ; linker allocates space in bank 0
                      00315 
                      00316 ;----- BAM ISR variables ----           ; regs for use only by BAM timer ISR
000000                00317 isrckt_W        res     1               ; W reg save
000001                00318 isrckt_status   res     1               ; STATUS reg save
000002                00319 isrckt_index    res     1               ; index for dispatcher
                      00320 
                      00321 ;----- shared circuit variables ----
                      00322 ; In MONOCHROME MODE circuit number is simple. In COLOR MODE its encoded thusly:
                      00323 ; ckt_num - encoded as:
                      00324 ;     <b4-b2>   channel 0 - channel 7
                      00325 ;     <b1-b0>   00 = HUE
                      00326 ;               01 = SAT
                      00327 ;               01 = BRT
                      00328 ;               11 = EXTRA - extra command channels: <none> are valid
                      00329 
000003                00330 ckt_num         res     1               ; encoded circuit number as above
000004                00331 ckt_temp        res     1               ; temp for circuit routines
000005                00332 ckt_level       res     1               ; level to set
000006                00333 ckt_offset      res     1               ; offset into circuit table
000007                00334 ckt_ormask      res     1               ; OR bitmask
000008                00335 ckt_andmask     res     1               ; AND bitmask
000009                00336 ckt_table res   CKT_TABLE_LEN+1         ; LED readout table
                      00337 #define ct ckt_table                    ; shorthand
                      00338 
                      00339 ;----- variables used for channels and levels
                      00340 
000031                00341 chn_num         res     1               ; active channel number
                      00342 
                      00343     if MONOCHROME_MODE
000032                00344 chn_level       res     1
                      00345     else
                      00346 red_level       res     1
                      00347 grn_level       res     1
                      00348 blu_level       res     1
                      00349 hue_level       res     1
                      00350 sat_level       res     1
                      00351 brt_level       res     1
                      00352     endif
                      00353 
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00354 ;----- variables used for unit testing
                      00355 
                      00356     if UNITS_ENABLED
000033                00357 ut_delay_hi     res     1
000034                00358 ut_delay_lo     res     1
000035                00359 ut_loop         res     1
                      00360     endif
                      00361 
                      00362 ;###############################
                      00363 ;##### BEGIN CODE SECTION ######
                      00364 ;###############################
                      00365 
                      00366 CODE_LED_CIRCUIT_DRIVERS        code
                      00367 
                      00368 ;******************************************************************************
                      00369 ; CKT_INIT
                      00370 ; Initialize circuit sub-system
                      00371 
000000                00372 CKT_INIT
                      00373         ; set all active port bits to OFF
000000 0EFE           00374         movlw   ~TRISA_INIT             
000002 6E89           00375         movwf   LATA
000004 0EFF           00376         movlw   ~TRISB_INIT
000006 6E8A           00377         movwf   LATB
000008 0EFF           00378         movlw   ~TRISC_INIT
00000A 6E8B           00379         movwf   LATC
00000C 0EFF           00380         movlw   ~TRISD_INIT
00000E 6E8C           00381         movwf   LATD
000010 0E17           00382         movlw   ~TRISE_INIT
000012 6E8D           00383         movwf   LATE
                      00384 
                      00385         ; initialize ISR dispatcher index
000014 6A??           00386         clrf    isrckt_index
                      00387 
                      00388         ; set circuit table to 0xFF (turn all circuits OFF)
000016 EE?? F0??      00389         lfsr    FSR0,ckt_table+CKT_TABLE_LEN ; clear down from top table address
00001A 0EFF           00390 CKT_IN0 movlw   0xFF
00001C 6EED           00391         movwf   POSTDEC0
00001E 0E??           00392         movlw   ckt_table
000020 60E9           00393         cpfslt  FSR0L
000022 D???           00394         bra     CKT_IN0
000024 0012           00395         return
                      00396 
                      00397 ;******************************************************************************
                      00398 ; CKT_ISR - Bit Angle Modulation (BAM) Handler
                      00399 ;
                      00400 ; Implements BAM dimming and sofwtare ballasting. See spreadsheet for details.
                      00401 ;
                      00402 ; INPUTS: <none>        it's an ISR
                      00403 ;
                      00404 ; NOTE: THIS ISR HAD TO BE RE_WRITTEN TO USE A DISPATCH TABLE AS USING THE 
                      00405 ; TBLPTR ACROSS ISR AND MAIN CODE SEEMS TO HAVE A BUG IN IT (EVEN WHEN BEING 
                      00406 ; VERY CAREFUL TO PRESERVE THE TABLE POINTER BETWEEN THE REGIONS.
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00407 ;
                      00408 ; An alternative that's more robust to the page crossing issue is to keep a 
                      00409 ; vector of the next state and dispatch through the vector. This actually uses 
                      00410 ; a few more cycles than the jump table approach, and one more register variable.
                      00411 ;
                      00412 ; Notes on functions: The dispatcher uses an index counter that starts at 0 
                      00413 ; (for _b0on) and increments each time the ISR is called. It resets to zero 
                      00414 ; when the last interval is run. The dispatcher calls a diffferent macro for each 
                      00415 ; pass through the ISR, with the last pass ('X') reseting the index counter to 0.
                      00416 ; 
                      00417 ; Profile: XX instruction cycles, Y.Y uSec at 32 MHz
                      00418 
000026                00419 CKT_ISR 
000026 6E??           00420         movwf   isrckt_W                ; save W reg
000028 CFD8 F???      00421         movff   STATUS,isrckt_status    ; save STATUS reg
                      00422 
                      00423         ;#### THIS CODE SEGMENT CANNOT CROSS A 0x100 PROGRAM MEMORY BOUNDARY
00002C 0E??           00424         movlw   HIGH CKI_JMP
00002E 6EFA           00425         movwf   PCLATH
000030 44??           00426         rlncf   isrckt_index,W          ; get index x2 into W...
000032 0F??           00427         addlw   LOW CKI_JMP             ;...this only works with BRAs 
000034 6EF9           00428         movwf   PCL                     ;...GOTOs require x4
                      00429 
000036 D???           00430 CKI_JMP bra     _b0on                   ; dispatch to bit 0, ON phase
000038 D???           00431         bra     _b0off
00003A D???           00432         bra     _b1on                   ; bit 1
00003C D???           00433         bra     _b1off
00003E D???           00434         bra     _b2on                   ; bit 2
000040 D???           00435         bra     _b2off
000042 D???           00436         bra     _b3on                   ; bit 3
000044 D???           00437         bra     _b3off
000046 D???           00438         bra     _b4on                   ; bit 4
000048 D???           00439         bra     _b4off  ; this dispatch sequence performs the b6/b7 scramble
00004A D???           00440         bra     _b7on                   ; bit 7a  
00004C D???           00441         bra     _b7off          
00004E D???           00442         bra     _b5on                   ; bit 5
000050 D???           00443         bra     _b5off
000052 D???           00444         bra     _b7on                   ; bit 7b
000054 D???           00445         bra     _b7off
000056 D???           00446         bra     _b6on                   ; bit 6a
000058 D???           00447         bra     _b6off
00005A D???           00448         bra     _b7on                   ; bit 7c
00005C D???           00449         bra     _b7off
00005E D???           00450         bra     _b6on                   ; bit 6b
000060 D???           00451         bra     _b6off
000062 D???           00452         bra     _b7on                   ; bit 7d
000064 D???           00453         bra     _b7offX ; <--- needs to be this one to reset isr_index
                      00454         ; #### TO HERE
                      00455 
                      00456         ; return point for BRA table routines
000066 50??           00457 CKI_RET movf    isrckt_W,W              ; restore state and return
000068 909E           00458         bcf     PIR1,TMR1IF             ; clear timer INT flag or it will keep IRQ'ing
00006A C??? FFD8      00459         movff   isrckt_status,STATUS    ; do this last
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00006E 0010           00460         retfie
                      00461 
                      00462 ;---- CKT_ISR bit/phase handlers -----
                      00463 ; The macro call arguments are really brute force and ugly becuase I can't get 
                      00464 ; MPASM to behave when interpreting more complex expressions. Bueller?
                      00465 
                      00466 ; _bp_on macro parameters:
                      00467 ;   - timer             16 bit time value for timing out rest of this interval
                      00468 ;   - portA - portE     offsets for the port/bit being set
                      00469 
                      00470 _bp_on  macro   tmr, portA, portB, portC, portD, portE 
                      00471         movlw   HIGH tmr                ; load timer for this ON interval
                      00472         movwf   TMR1H
                      00473         movlw   LOW tmr
                      00474         movwf   TMR1L
                      00475         incf    isrckt_index,F          ; increment dispatch index
                      00476         movff   portA,LATA              ; dump table bits to ports
                      00477         movff   portB,LATB
                      00478         movff   portC,LATC
                      00479         movff   portD,LATD
                      00480         movff   portE,LATE
                      00481         bra     CKI_RET                 ; return to main ISR
                      00482         endm
                      00483 
                      00484 ; _bp_off macro parameters:
                      00485 ;   - timer             16 bit time value for timing out rest of this interval
                      00486 ;   - cycle_start       set TRUE to set new cycle flag (FALSE to ignore)
                      00487 
                      00488 _bp_off macro   tmr, cycle_start
                      00489         movlw   HIGH tmr                ; load timer for this OFF interval
                      00490         movwf   TMR1H
                      00491         movlw   LOW tmr
                      00492         movwf   TMR1L
                      00493         incf    isrckt_index,F          ; increment dispatch index
                      00494         movlw   ~TRISA_INIT             ; set all active bits to OFF
                      00495         movwf   LATA
                      00496         movlw   ~TRISB_INIT
                      00497         movwf   LATB
                      00498         movlw   ~TRISC_INIT
                      00499         movwf   LATC
                      00500         movlw   ~TRISD_INIT
                      00501         movwf   LATD
                      00502         movlw   ~TRISE_INIT
                      00503         movwf   LATE
                      00504     if cycle_start                              ; conditional assembly
                      00505         bsf     app_flags,CYCLE_START_FLAG      ; start a new cycle
                      00506     endif
                      00507         bra     CKI_RET                 ; return to main ISR
                      00508         endm
                      00509 
                      00510 ; Last off cycle: same as _bp_off except resets dispatcher index as well
                      00511 _bp_offX  macro  timer
                      00512         movlw   HIGH timer              ; reset timer
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00513         movwf   TMR1H
                      00514         movlw   LOW timer
                      00515         movwf   TMR1L
                      00516         clrf    isrckt_index            ; reset dispatch index
                      00517         movlw   ~TRISA_INIT             ; set all active bits to OFF
                      00518         movwf   LATA
                      00519         movlw   ~TRISB_INIT
                      00520         movwf   LATB
                      00521         movlw   ~TRISC_INIT
                      00522         movwf   LATC
                      00523         movlw   ~TRISD_INIT
                      00524         movwf   LATD
                      00525         movlw   ~TRISE_INIT
                      00526         movwf   LATE
                      00527         bra     CKI_RET                 ; return to main ISR
                      00528         endm
                      00529 
                      00530 ; Actual dispatched macro lines. Each line is a complete macro that returns
                      00531 ; to the ISR. They do not execute in sequence like instructions.
                      00532 
                      00533 _b0on   _bp_on  CKT_TMR_B0_ON, ct+.0, ct+.1, ct+.2, ct+.3, ct+.4
000070 0EFF               M         movlw   HIGH CKT_TMR_B0_ON      ; load timer for this ON interval
000072 6ECF               M         movwf   TMR1H
000074 0EBF               M         movlw   LOW CKT_TMR_B0_ON
000076 6ECE               M         movwf   TMR1L
000078 2A??               M         incf    isrckt_index,F          ; increment dispatch index
00007A C??? FF89          M         movff   ckt_table+.0,LATA       ; dump table bits to ports
00007E C??? FF8A          M         movff   ckt_table+.1,LATB
000082 C??? FF8B          M         movff   ckt_table+.2,LATC
000086 C??? FF8C          M         movff   ckt_table+.3,LATD
00008A C??? FF8D          M         movff   ckt_table+.4,LATE
00008E D???               M         bra     CKI_RET                 ; return to main ISR
                      00534 _b0off  _bp_off CKT_TMR_B0_OFF, FALSE
000090 0EFF               M         movlw   HIGH CKT_TMR_B0_OFF     ; load timer for this OFF interval
000092 6ECF               M         movwf   TMR1H
000094 0E71               M         movlw   LOW CKT_TMR_B0_OFF
000096 6ECE               M         movwf   TMR1L
000098 2A??               M         incf    isrckt_index,F          ; increment dispatch index
00009A 0EFE               M         movlw   ~TRISA_INIT             ; set all active bits to OFF
00009C 6E89               M         movwf   LATA
00009E 0EFF               M         movlw   ~TRISB_INIT
0000A0 6E8A               M         movwf   LATB
0000A2 0EFF               M         movlw   ~TRISC_INIT
0000A4 6E8B               M         movwf   LATC
0000A6 0EFF               M         movlw   ~TRISD_INIT
0000A8 6E8C               M         movwf   LATD
0000AA 0E17               M         movlw   ~TRISE_INIT
0000AC 6E8D               M         movwf   LATE
                          M     if FALSE                                    ; conditional assembly
                          M         bsf     app_flags,CYCLE_START_FLAG      ; start a new cycle
                          M     endif
0000AE D???               M         bra     CKI_RET                 ; return to main ISR
                      00535 _b1on   _bp_on  CKT_TMR_B1_ON, ct+.5, ct+.6, ct+.7, ct+.8, ct+.9
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000B0 0EFF               M         movlw   HIGH CKT_TMR_B1_ON      ; load timer for this ON interval
0000B2 6ECF               M         movwf   TMR1H
0000B4 0E71               M         movlw   LOW CKT_TMR_B1_ON
0000B6 6ECE               M         movwf   TMR1L
0000B8 2A??               M         incf    isrckt_index,F          ; increment dispatch index
0000BA C??? FF89          M         movff   ckt_table+.5,LATA       ; dump table bits to ports
0000BE C??? FF8A          M         movff   ckt_table+.6,LATB
0000C2 C??? FF8B          M         movff   ckt_table+.7,LATC
0000C6 C??? FF8C          M         movff   ckt_table+.8,LATD
0000CA C??? FF8D          M         movff   ckt_table+.9,LATE
0000CE D???               M         bra     CKI_RET                 ; return to main ISR
                      00536 _b1off  _bp_off CKT_TMR_B1_OFF, FALSE
0000D0 0EFE               M         movlw   HIGH CKT_TMR_B1_OFF     ; load timer for this OFF interval
0000D2 6ECF               M         movwf   TMR1H
0000D4 0ED4               M         movlw   LOW CKT_TMR_B1_OFF
0000D6 6ECE               M         movwf   TMR1L
0000D8 2A??               M         incf    isrckt_index,F          ; increment dispatch index
0000DA 0EFE               M         movlw   ~TRISA_INIT             ; set all active bits to OFF
0000DC 6E89               M         movwf   LATA
0000DE 0EFF               M         movlw   ~TRISB_INIT
0000E0 6E8A               M         movwf   LATB
0000E2 0EFF               M         movlw   ~TRISC_INIT
0000E4 6E8B               M         movwf   LATC
0000E6 0EFF               M         movlw   ~TRISD_INIT
0000E8 6E8C               M         movwf   LATD
0000EA 0E17               M         movlw   ~TRISE_INIT
0000EC 6E8D               M         movwf   LATE
                          M     if FALSE                                    ; conditional assembly
                          M         bsf     app_flags,CYCLE_START_FLAG      ; start a new cycle
                          M     endif
0000EE D???               M         bra     CKI_RET                 ; return to main ISR
                      00537 _b2on   _bp_on  CKT_TMR_B2_ON, ct+.10, ct+.11, ct+.12, ct+.13, ct+.14
0000F0 0EFE               M         movlw   HIGH CKT_TMR_B2_ON      ; load timer for this ON interval
0000F2 6ECF               M         movwf   TMR1H
0000F4 0ED4               M         movlw   LOW CKT_TMR_B2_ON
0000F6 6ECE               M         movwf   TMR1L
0000F8 2A??               M         incf    isrckt_index,F          ; increment dispatch index
0000FA C??? FF89          M         movff   ckt_table+.10,LATA      ; dump table bits to ports
0000FE C??? FF8A          M         movff   ckt_table+.11,LATB
000102 C??? FF8B          M         movff   ckt_table+.12,LATC
000106 C??? FF8C          M         movff   ckt_table+.13,LATD
00010A C??? FF8D          M         movff   ckt_table+.14,LATE
00010E D???               M         bra     CKI_RET                 ; return to main ISR
                      00538 _b2off  _bp_off CKT_TMR_B2_OFF, FALSE
000110 0EFD               M         movlw   HIGH CKT_TMR_B2_OFF     ; load timer for this OFF interval
000112 6ECF               M         movwf   TMR1H
000114 0E9A               M         movlw   LOW CKT_TMR_B2_OFF
000116 6ECE               M         movwf   TMR1L
000118 2A??               M         incf    isrckt_index,F          ; increment dispatch index
00011A 0EFE               M         movlw   ~TRISA_INIT             ; set all active bits to OFF
00011C 6E89               M         movwf   LATA
00011E 0EFF               M         movlw   ~TRISB_INIT
000120 6E8A               M         movwf   LATB
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000122 0EFF               M         movlw   ~TRISC_INIT
000124 6E8B               M         movwf   LATC
000126 0EFF               M         movlw   ~TRISD_INIT
000128 6E8C               M         movwf   LATD
00012A 0E17               M         movlw   ~TRISE_INIT
00012C 6E8D               M         movwf   LATE
                          M     if FALSE                                    ; conditional assembly
                          M         bsf     app_flags,CYCLE_START_FLAG      ; start a new cycle
                          M     endif
00012E D???               M         bra     CKI_RET                 ; return to main ISR
                      00539 _b3on   _bp_on  CKT_TMR_B3_ON, ct+.15, ct+.16, ct+.17, ct+.18, ct+.19
000130 0EFD               M         movlw   HIGH CKT_TMR_B3_ON      ; load timer for this ON interval
000132 6ECF               M         movwf   TMR1H
000134 0E9A               M         movlw   LOW CKT_TMR_B3_ON
000136 6ECE               M         movwf   TMR1L
000138 2A??               M         incf    isrckt_index,F          ; increment dispatch index
00013A C??? FF89          M         movff   ckt_table+.15,LATA      ; dump table bits to ports
00013E C??? FF8A          M         movff   ckt_table+.16,LATB
000142 C??? FF8B          M         movff   ckt_table+.17,LATC
000146 C??? FF8C          M         movff   ckt_table+.18,LATD
00014A C??? FF8D          M         movff   ckt_table+.19,LATE
00014E D???               M         bra     CKI_RET                 ; return to main ISR
                      00540 _b3off  _bp_off CKT_TMR_B3_OFF, FALSE
000150 0EFB               M         movlw   HIGH CKT_TMR_B3_OFF     ; load timer for this OFF interval
000152 6ECF               M         movwf   TMR1H
000154 0E27               M         movlw   LOW CKT_TMR_B3_OFF
000156 6ECE               M         movwf   TMR1L
000158 2A??               M         incf    isrckt_index,F          ; increment dispatch index
00015A 0EFE               M         movlw   ~TRISA_INIT             ; set all active bits to OFF
00015C 6E89               M         movwf   LATA
00015E 0EFF               M         movlw   ~TRISB_INIT
000160 6E8A               M         movwf   LATB
000162 0EFF               M         movlw   ~TRISC_INIT
000164 6E8B               M         movwf   LATC
000166 0EFF               M         movlw   ~TRISD_INIT
000168 6E8C               M         movwf   LATD
00016A 0E17               M         movlw   ~TRISE_INIT
00016C 6E8D               M         movwf   LATE
                          M     if FALSE                                    ; conditional assembly
                          M         bsf     app_flags,CYCLE_START_FLAG      ; start a new cycle
                          M     endif
00016E D???               M         bra     CKI_RET                 ; return to main ISR
                      00541 _b4on   _bp_on  CKT_TMR_B4_ON, ct+.20, ct+.21, ct+.22, ct+.23, ct+.24
000170 0EFB               M         movlw   HIGH CKT_TMR_B4_ON      ; load timer for this ON interval
000172 6ECF               M         movwf   TMR1H
000174 0E27               M         movlw   LOW CKT_TMR_B4_ON
000176 6ECE               M         movwf   TMR1L
000178 2A??               M         incf    isrckt_index,F          ; increment dispatch index
00017A C??? FF89          M         movff   ckt_table+.20,LATA      ; dump table bits to ports
00017E C??? FF8A          M         movff   ckt_table+.21,LATB
000182 C??? FF8B          M         movff   ckt_table+.22,LATC
000186 C??? FF8C          M         movff   ckt_table+.23,LATD
00018A C??? FF8D          M         movff   ckt_table+.24,LATE
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00018E D???               M         bra     CKI_RET                 ; return to main ISR
                      00542 _b4off  _bp_off CKT_TMR_B4_OFF, FALSE
000190 0EF6               M         movlw   HIGH CKT_TMR_B4_OFF     ; load timer for this OFF interval
000192 6ECF               M         movwf   TMR1H
000194 0E40               M         movlw   LOW CKT_TMR_B4_OFF
000196 6ECE               M         movwf   TMR1L
000198 2A??               M         incf    isrckt_index,F          ; increment dispatch index
00019A 0EFE               M         movlw   ~TRISA_INIT             ; set all active bits to OFF
00019C 6E89               M         movwf   LATA
00019E 0EFF               M         movlw   ~TRISB_INIT
0001A0 6E8A               M         movwf   LATB
0001A2 0EFF               M         movlw   ~TRISC_INIT
0001A4 6E8B               M         movwf   LATC
0001A6 0EFF               M         movlw   ~TRISD_INIT
0001A8 6E8C               M         movwf   LATD
0001AA 0E17               M         movlw   ~TRISE_INIT
0001AC 6E8D               M         movwf   LATE
                          M     if FALSE                                    ; conditional assembly
                          M         bsf     app_flags,CYCLE_START_FLAG      ; start a new cycle
                          M     endif
0001AE D???               M         bra     CKI_RET                 ; return to main ISR
                      00543 _b5on   _bp_on  CKT_TMR_B5_ON, ct+.25, ct+.26, ct+.27, ct+.28, ct+.29
0001B0 0EF6               M         movlw   HIGH CKT_TMR_B5_ON      ; load timer for this ON interval
0001B2 6ECF               M         movwf   TMR1H
0001B4 0E40               M         movlw   LOW CKT_TMR_B5_ON
0001B6 6ECE               M         movwf   TMR1L
0001B8 2A??               M         incf    isrckt_index,F          ; increment dispatch index
0001BA C??? FF89          M         movff   ckt_table+.25,LATA      ; dump table bits to ports
0001BE C??? FF8A          M         movff   ckt_table+.26,LATB
0001C2 C??? FF8B          M         movff   ckt_table+.27,LATC
0001C6 C??? FF8C          M         movff   ckt_table+.28,LATD
0001CA C??? FF8D          M         movff   ckt_table+.29,LATE
0001CE D???               M         bra     CKI_RET                 ; return to main ISR
                      00544 _b5off  _bp_off CKT_TMR_B5_OFF, TRUE    ; START CYCLE ON THIS SLICE
0001D0 0EEC               M         movlw   HIGH CKT_TMR_B5_OFF     ; load timer for this OFF interval
0001D2 6ECF               M         movwf   TMR1H
0001D4 0E72               M         movlw   LOW CKT_TMR_B5_OFF
0001D6 6ECE               M         movwf   TMR1L
0001D8 2A??               M         incf    isrckt_index,F          ; increment dispatch index
0001DA 0EFE               M         movlw   ~TRISA_INIT             ; set all active bits to OFF
0001DC 6E89               M         movwf   LATA
0001DE 0EFF               M         movlw   ~TRISB_INIT
0001E0 6E8A               M         movwf   LATB
0001E2 0EFF               M         movlw   ~TRISC_INIT
0001E4 6E8B               M         movwf   LATC
0001E6 0EFF               M         movlw   ~TRISD_INIT
0001E8 6E8C               M         movwf   LATD
0001EA 0E17               M         movlw   ~TRISE_INIT
0001EC 6E8D               M         movwf   LATE
                          M     if TRUE                                     ; conditional assembly
0001EE 82??               M         bsf     app_flags,CYCLE_START_FLAG      ; start a new cycle
                          M     endif
0001F0 D???               M         bra     CKI_RET                 ; return to main ISR
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00545 _b6on   _bp_on  CKT_TMR_B5_ON, ct+.30, ct+.31, ct+.32, ct+.33, ct+.34
0001F2 0EF6               M         movlw   HIGH CKT_TMR_B5_ON      ; load timer for this ON interval
0001F4 6ECF               M         movwf   TMR1H
0001F6 0E40               M         movlw   LOW CKT_TMR_B5_ON
0001F8 6ECE               M         movwf   TMR1L
0001FA 2A??               M         incf    isrckt_index,F          ; increment dispatch index
0001FC C??? FF89          M         movff   ckt_table+.30,LATA      ; dump table bits to ports
000200 C??? FF8A          M         movff   ckt_table+.31,LATB
000204 C??? FF8B          M         movff   ckt_table+.32,LATC
000208 C??? FF8C          M         movff   ckt_table+.33,LATD
00020C C??? FF8D          M         movff   ckt_table+.34,LATE
000210 D???               M         bra     CKI_RET                 ; return to main ISR
                      00546 _b6off  _bp_off CKT_TMR_B5_OFF, FALSE
000212 0EEC               M         movlw   HIGH CKT_TMR_B5_OFF     ; load timer for this OFF interval
000214 6ECF               M         movwf   TMR1H
000216 0E72               M         movlw   LOW CKT_TMR_B5_OFF
000218 6ECE               M         movwf   TMR1L
00021A 2A??               M         incf    isrckt_index,F          ; increment dispatch index
00021C 0EFE               M         movlw   ~TRISA_INIT             ; set all active bits to OFF
00021E 6E89               M         movwf   LATA
000220 0EFF               M         movlw   ~TRISB_INIT
000222 6E8A               M         movwf   LATB
000224 0EFF               M         movlw   ~TRISC_INIT
000226 6E8B               M         movwf   LATC
000228 0EFF               M         movlw   ~TRISD_INIT
00022A 6E8C               M         movwf   LATD
00022C 0E17               M         movlw   ~TRISE_INIT
00022E 6E8D               M         movwf   LATE
                          M     if FALSE                                    ; conditional assembly
                          M         bsf     app_flags,CYCLE_START_FLAG      ; start a new cycle
                          M     endif
000230 D???               M         bra     CKI_RET                 ; return to main ISR
                      00547 _b7on   _bp_on  CKT_TMR_B5_ON, ct+.35, ct+.36, ct+.37, ct+.38, ct+.39
000232 0EF6               M         movlw   HIGH CKT_TMR_B5_ON      ; load timer for this ON interval
000234 6ECF               M         movwf   TMR1H
000236 0E40               M         movlw   LOW CKT_TMR_B5_ON
000238 6ECE               M         movwf   TMR1L
00023A 2A??               M         incf    isrckt_index,F          ; increment dispatch index
00023C C??? FF89          M         movff   ckt_table+.35,LATA      ; dump table bits to ports
000240 C??? FF8A          M         movff   ckt_table+.36,LATB
000244 C??? FF8B          M         movff   ckt_table+.37,LATC
000248 C??? FF8C          M         movff   ckt_table+.38,LATD
00024C C??? FF8D          M         movff   ckt_table+.39,LATE
000250 D???               M         bra     CKI_RET                 ; return to main ISR
                      00548 _b7off  _bp_off CKT_TMR_B5_OFF, FALSE
000252 0EEC               M         movlw   HIGH CKT_TMR_B5_OFF     ; load timer for this OFF interval
000254 6ECF               M         movwf   TMR1H
000256 0E72               M         movlw   LOW CKT_TMR_B5_OFF
000258 6ECE               M         movwf   TMR1L
00025A 2A??               M         incf    isrckt_index,F          ; increment dispatch index
00025C 0EFE               M         movlw   ~TRISA_INIT             ; set all active bits to OFF
00025E 6E89               M         movwf   LATA
000260 0EFF               M         movlw   ~TRISB_INIT
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000262 6E8A               M         movwf   LATB
000264 0EFF               M         movlw   ~TRISC_INIT
000266 6E8B               M         movwf   LATC
000268 0EFF               M         movlw   ~TRISD_INIT
00026A 6E8C               M         movwf   LATD
00026C 0E17               M         movlw   ~TRISE_INIT
00026E 6E8D               M         movwf   LATE
                          M     if FALSE                                    ; conditional assembly
                          M         bsf     app_flags,CYCLE_START_FLAG      ; start a new cycle
                          M     endif
000270 D???               M         bra     CKI_RET                 ; return to main ISR
                      00549 _b7offX _bp_offX CKT_TMR_B5_OFF
000272 0EEC               M         movlw   HIGH CKT_TMR_B5_OFF     ; reset timer
000274 6ECF               M         movwf   TMR1H
000276 0E72               M         movlw   LOW CKT_TMR_B5_OFF
000278 6ECE               M         movwf   TMR1L
00027A 6A??               M         clrf    isrckt_index            ; reset dispatch index
00027C 0EFE               M         movlw   ~TRISA_INIT             ; set all active bits to OFF
00027E 6E89               M         movwf   LATA
000280 0EFF               M         movlw   ~TRISB_INIT
000282 6E8A               M         movwf   LATB
000284 0EFF               M         movlw   ~TRISC_INIT
000286 6E8B               M         movwf   LATC
000288 0EFF               M         movlw   ~TRISD_INIT
00028A 6E8C               M         movwf   LATD
00028C 0E17               M         movlw   ~TRISE_INIT
00028E 6E8D               M         movwf   LATE
000290 D???               M         bra     CKI_RET                 ; return to main ISR
                      00550 
                      00551 ; test versions of bit 0 - no macros
                      00552     if FALSE
                      00553 _b0on   movlw   HIGH CKT_TMR_B0_ON      ; load timer for this ON interval
                      00554         movwf   TMR1H
                      00555         movlw   LOW CKT_TMR_B0_ON
                      00556         movwf   TMR1L
                      00557         incf    isrckt_index,F          ; increment dispatch index
                      00558         movff   ct+.0,LATA              ; dump table bits to ports
                      00559         movff   ct+.1,LATB
                      00560         movff   ct+.2,LATC
                      00561         movff   ct+.3,LATD
                      00562         movff   ct+.4,LATE
                      00563         bra     CKI_RET                 ; return to main ISR
                      00564 
                      00565 _b0off  movlw   HIGH CKT_TMR_B0_OFF     ; load timer for this OFF interval
                      00566         movwf   TMR1H
                      00567         movlw   LOW CKT_TMR_B0_OFF
                      00568         movwf   TMR1L
                      00569         incf    isrckt_index,F          ; increment dispatch index
                      00570         movlw   ~TRISA_INIT             ; set all active bits to OFF
                      00571         movwf   LATA
                      00572         movlw   ~TRISB_INIT
                      00573         movwf   LATB
                      00574         movlw   ~TRISC_INIT
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00575         movwf   LATC
                      00576         movlw   ~TRISD_INIT
                      00577         movwf   LATD
                      00578         movlw   ~TRISE_INIT
                      00579         movwf   LATE
                      00580         bra     CKI_RET                 ; return to main ISR
                      00581     endif
                      00582 
                      00583 ;******************************************************************************
                      00584 ; CKT_WRITE_CHANNEL
                      00585 ;
                      00586 ; Write a channel. This is either a mono channel or an RGB channel. 
                      00587 ; In RGB versions it may either use the write_circuit routine three times, 
                      00588 ; or may implement a more efficient write to the circuit tables (bypassing 
                      00589 ; the write_circuit routine).
                      00590 ;
                      00591 ; This monochrome version abstracts the channel number to one or two LEDs, 
                      00592 ; as some clock display cells have one LED while others have two.
                      00593 ;
                      00594 ; INPUTS:
                      00595 ;       - chn_num       channel number to write to table
                      00596 ;       - chn_level     value to write to table
                      00597 ;
                      00598 ; RETURNS:
                      00599 ;       <none> - except for writing into the circuit table
                      00600 ;
                      00601 ; PROFILE: XXX instructions, YYY uSeconds at 32 MHz.
                      00602 ;
                      00603 ; NOTE: Channel mapping tables follow CKT_WRITE_CIRCUIT
                      00604 
000292                00605 CKT_WRITE_CHANNEL
000292 50??           00606         movf    chn_num,W
000294 EC?? F???      00607         call    CKT_CHECK_CHNNUM
000298 E1??           00608         bnz     CWC_x                   ; skip the write if bad channel num
                      00609 
                      00610         ; get circuit number(s) and write circuits
                      00611         ; (doing it this way because CKT_WRITE_CIRCUIT also uses tables) 
                      00612         tblindx CKT_CHANNEL_MAP,chn_num
00029A 0E??               M         movlw   high CKT_CHANNEL_MAP
00029C 6EF7               M         movwf   TBLPTRH
00029E 0E??               M         movlw   low CKT_CHANNEL_MAP
0002A0 6EF6               M         movwf   TBLPTRL
0002A2 44??               M         rlncf   chn_num,W               ; multiply index value by 2
0002A4 26F6               M         addwf   TBLPTRL
0002A6 0E00               M         movlw   0                       ; propagate carry (if any)
0002A8 22F7               M         addwfc  TBLPTRH
0002AA 0009           00613         tblrd*+                         ; get first circuit number
0002AC CFF5 F???      00614         movff   TABLAT,ckt_num
0002B0 0008           00615         tblrd*                          ; get optional second circuit number
0002B2 CFF5 F???      00616         movff   TABLAT,ckt_temp
0002B6 C??? F???      00617         movff   chn_level,ckt_level     ; set circuit level
0002BA EC?? F???      00618         call    CKT_WRITE_CIRCUIT       ; write first circuit
0002BE 50??           00619         movf    ckt_temp,W              ; recover second circuit number
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0002C0 6E??           00620         movwf   ckt_num                 ; can't use movff here, no status bits
0002C2 E6??           00621         bn      CWC_x                   ; no ckt = 0xFF, which is negative
0002C4 EC?? F???      00622         call    CKT_WRITE_CIRCUIT       ; write (optional) second circuit
0002C8 0012           00623 CWC_x   return
                      00624 
                      00625 ;******************************************************************************
                      00626 ; CKT_WRITE_CIRCUIT
                      00627 ;
                      00628 ; Write a single level value to the circuit table. This is the lower level 
                      00629 ; routine to write_channel.
                      00630 ;
                      00631 ; This version has the following parameters:
                      00632 ;       - Number of circuits = 34
                      00633 ;       - Works in monochrome (not RGB)
                      00634 ;       - Byte pattern in circuit table is transposed for readout efficiency
                      00635 ;       - Bit sense is inverted: 1=off, 0=on (and init sets to all 0xFF)
                      00636 ;
                      00637 ; This particular version writes monochrome levels (bytes) into the ckt table
                      00638 ; in transposed, inverted bit form over five ports as per the following pattern:
                      00639 ;
                      00640 ;       Table entry 00 (0x00):  Bit 0 - Port A
                      00641 ;                   01 (0x01):  Bit 0 - Port B
                      00642 ;                   02 (0x02):  Bit 0 - Port C
                      00643 ;                   03 (0x03):  Bit 0 - Port D
                      00644 ;                   04 (0x04):  Bit 0 - Port E
                      00645 ;                   05 (0x05):  Bit 1 - Port A
                      00646 ;                   ....
                      00647 ;                   39 (0x27):  Bit 7 - Port E
                      00648 ;
                      00649 ; INPUTS:
                      00650 ;       - ckt_num       encoded circuit number (see ckt_num declaration)
                      00651 ;       - ckt_level     value to write to table
                      00652 ;
                      00653 ; RETURNS:
                      00654 ;       <none> - except for writing into the circuit table
                      00655 ;
                      00656 ; PROFILE: 116 instructions, 14.5 uSeconds at 32 MHz.
                      00657 
0002CA                00658 CKT_WRITE_CIRCUIT
0002CA 50??           00659         movf    ckt_num,W
0002CC EC?? F???      00660         call    CKT_CHECK_CKTNUM
0002D0 E1??           00661         bnz     CWK_x                   ; skip the write if bad circuit num
                      00662 
                      00663         ; retrieve b0 offset and bitmasks from the table
                      00664         tblindx CKT_WRITE_PARAMETERS,ckt_num
0002D2 0E??               M         movlw   high CKT_WRITE_PARAMETERS
0002D4 6EF7               M         movwf   TBLPTRH
0002D6 0E??               M         movlw   low CKT_WRITE_PARAMETERS
0002D8 6EF6               M         movwf   TBLPTRL
0002DA 44??               M         rlncf   ckt_num,W               ; multiply index value by 2
0002DC 26F6               M         addwf   TBLPTRL
0002DE 0E00               M         movlw   0                       ; propagate carry (if any)
0002E0 22F7               M         addwfc  TBLPTRH
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0002E2 0009           00665         tblrd*+                         ; get b0 offset
0002E4 CFF5 F???      00666         movff   TABLAT,ckt_offset
0002E8 0008           00667         tblrd*                          ; get bitmasks
0002EA 50F5           00668         movf    TABLAT,W
0002EC 6E??           00669         movwf   ckt_ormask
0002EE 0AFF           00670         xorlw   0xFF
0002F0 6E??           00671         movwf   ckt_andmask
                      00672         
                      00673         ; set FSR1 to base of ckt_table b0
0002F2 6AE2           00674         clrf    FSR1H                   ; assumes ckt_table is in page zero...
0002F4 0E??           00675         movlw   ckt_table
0002F6 24??           00676         addwf   ckt_offset,W
0002F8 6EE1           00677         movwf   FSR1L                   ; ...and does not span memory pages
                      00678 
                      00679         ; macro to test and set a table bit (actually test and clear)
                      00680 cws_bit macro   bit
                      00681         movf    ckt_ormask,W            ; get the OR mask
                      00682         iorwf   INDF1,F                 ; always set the bit in table (turn OFF)
                      00683         movf    ckt_andmask,W           ; get the AND mask
                      00684         btfsc   ckt_level,bit           ; test if bit is set in level (ON)
                      00685         andwf   INDF1,F                 ; clear the bit in the table (turn ON)
                      00686         movlw   CKT_TABLE_INCREMENT     ; increment FSR1 to next byte position
                      00687         addwf   FSR1L
                      00688         endm
                      00689 
                      00690         ; scan the table and set or clear bits from b0 to b7
                      00691         cws_bit 0                       ; do bit 0
0002FA 50??               M         movf    ckt_ormask,W            ; get the OR mask
0002FC 12E7               M         iorwf   INDF1,F                 ; always set the bit in table (turn OFF)
0002FE 50??               M         movf    ckt_andmask,W           ; get the AND mask
000300 B0??               M         btfsc   ckt_level,0             ; test if bit is set in level (ON)
000302 16E7               M         andwf   INDF1,F                 ; clear the bit in the table (turn ON)
000304 0E05               M         movlw   CKT_TABLE_INCREMENT     ; increment FSR1 to next byte position
000306 26E1               M         addwf   FSR1L
                      00692         cws_bit 1
000308 50??               M         movf    ckt_ormask,W            ; get the OR mask
00030A 12E7               M         iorwf   INDF1,F                 ; always set the bit in table (turn OFF)
00030C 50??               M         movf    ckt_andmask,W           ; get the AND mask
00030E B2??               M         btfsc   ckt_level,1             ; test if bit is set in level (ON)
000310 16E7               M         andwf   INDF1,F                 ; clear the bit in the table (turn ON)
000312 0E05               M         movlw   CKT_TABLE_INCREMENT     ; increment FSR1 to next byte position
000314 26E1               M         addwf   FSR1L
                      00693         cws_bit 2
000316 50??               M         movf    ckt_ormask,W            ; get the OR mask
000318 12E7               M         iorwf   INDF1,F                 ; always set the bit in table (turn OFF)
00031A 50??               M         movf    ckt_andmask,W           ; get the AND mask
00031C B4??               M         btfsc   ckt_level,2             ; test if bit is set in level (ON)
00031E 16E7               M         andwf   INDF1,F                 ; clear the bit in the table (turn ON)
000320 0E05               M         movlw   CKT_TABLE_INCREMENT     ; increment FSR1 to next byte position
000322 26E1               M         addwf   FSR1L
                      00694         cws_bit 3
000324 50??               M         movf    ckt_ormask,W            ; get the OR mask
000326 12E7               M         iorwf   INDF1,F                 ; always set the bit in table (turn OFF)
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000328 50??               M         movf    ckt_andmask,W           ; get the AND mask
00032A B6??               M         btfsc   ckt_level,3             ; test if bit is set in level (ON)
00032C 16E7               M         andwf   INDF1,F                 ; clear the bit in the table (turn ON)
00032E 0E05               M         movlw   CKT_TABLE_INCREMENT     ; increment FSR1 to next byte position
000330 26E1               M         addwf   FSR1L
                      00695         cws_bit 4
000332 50??               M         movf    ckt_ormask,W            ; get the OR mask
000334 12E7               M         iorwf   INDF1,F                 ; always set the bit in table (turn OFF)
000336 50??               M         movf    ckt_andmask,W           ; get the AND mask
000338 B8??               M         btfsc   ckt_level,4             ; test if bit is set in level (ON)
00033A 16E7               M         andwf   INDF1,F                 ; clear the bit in the table (turn ON)
00033C 0E05               M         movlw   CKT_TABLE_INCREMENT     ; increment FSR1 to next byte position
00033E 26E1               M         addwf   FSR1L
                      00696         cws_bit 5
000340 50??               M         movf    ckt_ormask,W            ; get the OR mask
000342 12E7               M         iorwf   INDF1,F                 ; always set the bit in table (turn OFF)
000344 50??               M         movf    ckt_andmask,W           ; get the AND mask
000346 BA??               M         btfsc   ckt_level,5             ; test if bit is set in level (ON)
000348 16E7               M         andwf   INDF1,F                 ; clear the bit in the table (turn ON)
00034A 0E05               M         movlw   CKT_TABLE_INCREMENT     ; increment FSR1 to next byte position
00034C 26E1               M         addwf   FSR1L
                      00697         cws_bit 6
00034E 50??               M         movf    ckt_ormask,W            ; get the OR mask
000350 12E7               M         iorwf   INDF1,F                 ; always set the bit in table (turn OFF)
000352 50??               M         movf    ckt_andmask,W           ; get the AND mask
000354 BC??               M         btfsc   ckt_level,6             ; test if bit is set in level (ON)
000356 16E7               M         andwf   INDF1,F                 ; clear the bit in the table (turn ON)
000358 0E05               M         movlw   CKT_TABLE_INCREMENT     ; increment FSR1 to next byte position
00035A 26E1               M         addwf   FSR1L
                      00698                                         ; do bit 7, finish up
00035C 50??           00699         movf    ckt_ormask,W            ; get the OR mask
00035E 12E7           00700         iorwf   INDF1,F                 ; always set the bit in table (turn OFF)
000360 50??           00701         movf    ckt_andmask,W           ; get the AND mask
000362 BE??           00702         btfsc   ckt_level,7             ; test if bit is set in level (ON)
000364 16E7           00703         andwf   INDF1,F                 ; clear the bit in the table (turn ON)
000366 0012           00704 CWK_x   return    
                      00705 
                      00706 ;***** CHANNEL AND CIRCUIT MAPPING TABLES *****
                      00707 
                      00708 DATA_CIRCUIT_MAP_TABLES  code_pack      ; new code_pack region must have a label
                      00709 
                      00710 ; Table for mapping circuits to channels. Each entry (channel number) has 
                      00711 ; two values:circuit #1 and circuit #2 for that channel. The value of -1 
                      00712 ; (0xFF) is used if no second circuit exists for a channel (as 0x00 is a 
                      00713 ; valid value)
                      00714 
000000                00715 CKT_CHANNEL_MAP
000000 00 FF          00716         db      .00, -1         ; IT'S (channel 0)
000002 01 FF          00717         db      .01, -1         ; HALF
000004 02 FF          00718         db      .02, -1         ; TEN
000006 03 04          00719         db      .03, .04        ; QUARTER
000008 05 06          00720         db      .05, .06        ; TWENTY
00000A 07 FF          00721         db      .07, -1         ; FIVE
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00000C 08 09          00722         db      .08, .09        ; MINUTES
00000E 0A FF          00723         db      .10, -1         ; PAST
000010 0B FF          00724         db      .11, -1         ; TO
000012 0C FF          00725         db      .12, -1         ; ONE
000014 0D FF          00726         db      .13, -1         ; TWO (channel 10)
000016 0E 0F          00727         db      .14, .15        ; THREE
000018 10 FF          00728         db      .16, -1         ; FOUR
00001A 11 FF          00729         db      .17, -1         ; FIVE
00001C 12 FF          00730         db      .18, -1         ; SIX
00001E 13 14          00731         db      .19, .20        ; SEVEN
000020 15 FF          00732         db      .21, -1         ; EIGHT
000022 16 FF          00733         db      .22, -1         ; NINE
000024 17 FF          00734         db      .23, -1         ; TEN
000026 18 19          00735         db      .24, .25        ; ELEVEN (channel 20)
000028 1A 1B          00736         db      .26, .27        ; TWELVE
00002A 1C 1D          00737         db      .28, .29        ; O'CLOCK
                      00738 ;       db      .30, -1         ; +
                      00739 ;       db      .31, -1         ; +
                      00740 ;       db      .32, -1         ; +
                      00741 ;       db      .33, -1         ; +
                      00742 
                      00743 
                      00744 ; circuit table mapping for bit0 base address lookup
00002C                00745 CKT_WRITE_PARAMETERS     ; initial table offsets for b0 location & bitmasks
00002C 02 02          00746         db      low CKT_00p, low CKT_00b ; circuit 00
00002E 03 01          00747         db      low CKT_01p, low CKT_01b
000030 03 04          00748         db      low CKT_02p, low CKT_02b
000032 03 08          00749         db      low CKT_03p, low CKT_03b
000034 02 20          00750         db      low CKT_04p, low CKT_04b
000036 02 01          00751         db      low CKT_05p, low CKT_05b
000038 02 08          00752         db      low CKT_06p, low CKT_06b
00003A 03 02          00753         db      low CKT_07p, low CKT_07b
00003C 02 40          00754         db      low CKT_08p, low CKT_08b
00003E 03 20          00755         db      low CKT_09p, low CKT_09b
000040 02 04          00756         db      low CKT_10p, low CKT_10b
000042 02 10          00757         db      low CKT_11p, low CKT_11b
000044 04 04          00758         db      low CKT_12p, low CKT_12b
000046 01 02          00759         db      low CKT_13p, low CKT_13b
000048 03 10          00760         db      low CKT_14p, low CKT_14b
00004A 02 80          00761         db      low CKT_15p, low CKT_15b
00004C 03 40          00762         db      low CKT_16p, low CKT_16b
00004E 04 02          00763         db      low CKT_17p, low CKT_17b
000050 00 20          00764         db      low CKT_18p, low CKT_18b
000052 00 08          00765         db      low CKT_19p, low CKT_19b
000054 03 80          00766         db      low CKT_20p, low CKT_20b
000056 01 01          00767         db      low CKT_21p, low CKT_21b
000058 04 01          00768         db      low CKT_22p, low CKT_22b
00005A 00 10          00769         db      low CKT_23p, low CKT_23b
00005C 00 04          00770         db      low CKT_24p, low CKT_24b
00005E 00 02          00771         db      low CKT_25p, low CKT_25b
000060 01 20          00772         db      low CKT_26p, low CKT_26b
000062 01 10          00773         db      low CKT_27p, low CKT_27b
000064 01 04          00774         db      low CKT_28p, low CKT_28b
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000066 01 08          00775         db      low CKT_29p, low CKT_29b
                      00776 ;       db      low CKT_30p, low CKT_30b
                      00777 ;       db      low CKT_31p, low CKT_31b
                      00778 ;       db      low CKT_32p, low CKT_32b
                      00779 ;       db      low CKT_33p, low CKT_33b
                      00780 
                      00781 DATA_CIRCUIT_MAP_TABLES_END     code            ; end must also have a label
                      00782 
                      00783 
                      00784 ;---- VALIDATORS ----
                      00785 ;---- CKT_CHECK_CKTNUM / CKT_CHECK_CHNNUM ----
                      00786 ; Helper function to check for a valid ckt ot channel number
                      00787 ; - takes argnum in W (destroys W)
                      00788 ; - returns Z = 1 if OK
                      00789 ; - returns Z = 0 if ERROR
                      00790  
000000                00791 CKT_CHECK_CKTNUM
000000 081D           00792         sublw   CKT_NUM_MAX
000002 84D8           00793         bsf     STATUS,Z
000004 E2??           00794         bc      CCCKx
000006 94D8           00795         bcf     STATUS,Z
000008 0012           00796 CCCKx   return  
                      00797 
00000A                00798 CKT_CHECK_CHNNUM
00000A 0815           00799         sublw   CHN_NUM_MAX
00000C 84D8           00800         bsf     STATUS,Z
00000E E2??           00801         bc      CCCNx
000010 94D8           00802         bcf     STATUS,Z
000012 0012           00803 CCCNx   return  
                      00804 
                      00805 
                      00806 ;******************************************************************************
                      00807 ; T1_INIT  - Initialize timer1  - USED FOR BAM INTERVAL TIMING
                      00808 ; T1_STOP  - Stop timer1
                      00809 ; T1_START - Start timer1
                      00810 
  00000080            00811 T1CON_INIT      equ     b'10000000'             ; 16 bit R/W (see pg 181)
  00000081            00812 T1CON_START     equ     b'10000001'             ; 16 bit R/W (see pg 181)
  000000FF            00813 TMR1H_INIT      equ     HIGH(CKT_TMR_B0_ON)     ; hi byte initial value
  000000BF            00814 TMR1L_INIT      equ     LOW(CKT_TMR_B0_ON)      ; lo byte initial value
                      00815 
000014                00816 T1_INIT
000014 0E80           00817 T1_STOP movlw   T1CON_INIT
000016 6ECD           00818         movwf   T1CON
000018 909E           00819         bcf     PIR1,TMR1IF             ; clear interrupt flag
00001A 909D           00820         bcf     PIE1,TMR1IE             ; disable interrupts
00001C 909F           00821         bcf     IPR1,TMR1IP             ; set to low priority
00001E 0012           00822         return
                      00823 
000020                00824 T1_START 
000020 0E81           00825         movlw   T1CON_START
000022 6ECD           00826         movwf   T1CON
000024 0EBF           00827         movlw   TMR1L_INIT
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000026 6ECE           00828         movwf   TMR1L
000028 0EFF           00829         movlw   TMR1H_INIT
00002A 6ECF           00830         movwf   TMR1H
00002C 909E           00831         bcf     PIR1,TMR1IF             ; clear interrupt flag
00002E 809D           00832         bsf     PIE1,TMR1IE             ; enable interrupts
                      00833 ;       bsf     IPR1,TMR1IP             ; 1 = set to high priority
000030 909F           00834         bcf     IPR1,TMR1IP             ; 0 = set to low priority
000032 0012           00835         return
                      00836 
                      00837 ;******************************************************************************
                      00838 ; PORT_INIT - Initialize all ports - sets pins as in/out/analog/etc.
                      00839 ;
                      00840 ; Modules that affect the digital IO ports:
                      00841 ;       - AD_INIT       AD must be set to digital ports
                      00842 ;       - CMP_INIT      COmparator defaults are for digital ports
                      00843 ;
                      00844 ; Note: doesn't deal with PORTB weak pullups, which disable on output and reset
                      00845 
                      00846     if INIT_PORTS_EXTERNAL == TRUE      ; value set in dev.inc file d18f4520.inc
                      00847 
  00000001            00848 TRISA_INIT      equ     b'00000001'     ; all outputs except the switch bit
  00000000            00849 TRISB_INIT      equ     b'00000000'     ; all outputs
  00000000            00850 TRISC_INIT      equ     b'00000000'     ; all outputs
  00000000            00851 TRISD_INIT      equ     b'00000000'     ; all outputs
  000000E8            00852 TRISE_INIT      equ     b'11101000'     ; uses lower 3 bits as outputs
                      00853                                         ; must clear b4 to disable PSP mode...
                      00854                                         ;...on port C
000034                00855 PORT_INIT
000034 0E01           00856         movlw   TRISA_INIT
000036 6E92           00857         movwf   TRISA
000038 0E00           00858         movlw   TRISB_INIT
00003A 6E93           00859         movwf   TRISB
00003C 0E00           00860         movlw   TRISC_INIT
00003E 6E94           00861         movwf   TRISC
000040 0E00           00862         movlw   TRISD_INIT
000042 6E95           00863         movwf   TRISD
000044 0EE8           00864         movlw   TRISE_INIT
000046 6E96           00865         movwf   TRISE
                      00866 
                      00867 ;       bsf     INTCON,PEIE             ; peripheral irq must also be enabled
000048 0012           00868         return
                      00869     endif
                      00870 
                      00871 
                      00872 ;*****************************************************************************
                      00873 ;***** UNIT TESTS ************************************************************
                      00874 ;*****************************************************************************
                      00875 
00004A                00876 UT_CKT
                      00877  if UNITS_ENABLED
                      00878 ;       call    UT_ELECTRICAL_TEST      ; low level electrical test
                      00879 ;       call    UT_CKT_WRITE_CIRCUIT    ; test circuit write routine
                      00880 ;       call    UT_CKT_WRITE_CHANNEL    ; test channel write rroutine
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00004A EC?? F???      00881         call    UT_LOAD_CIRCUIT_TABLE   ; load table with some initial values
                      00882 ;       call    UT_DUTY_CYCLE_TEST      ; duty cycle generator
                      00883     endif
00004E 0012           00884         return
                      00885 
                      00886  if UNITS_ENABLED
                      00887 
                      00888 ;-------------------------------------------------
                      00889 ;---- Electrical test - turn on LEDs directly ----
                      00890 ;-------------------------------------------------
                      00891 ; This test routine is left over from a non-transposed circuit table
                      00892 ; Must disable the BAM timer (T1) for this to work correctly
                      00893 
  00000000            00894 value   equ     0x00
                      00895 
  00000000            00896 testA   equ     value
  00000000            00897 testB   equ     value
  00000000            00898 testC   equ     value
  00000000            00899 testD   equ     value
  00000000            00900 testE   equ     value
                      00901 
                      00902 
000050                00903 UT_ELECTRICAL_TEST
000050 EC?? F???      00904         call    T1_INIT                 ; T1 CAN'T BE ON FOR THIS TO WORK
                      00905                                         ; otherwise rows are being strobed
                      00906 ;       movlw   testA
                      00907 ;       movwf   PORTA
                      00908 ;       movlw   testB
                      00909 ;       movwf   PORTB
                      00910 ;       movlw   testC
                      00911 ;       movwf   PORTC
                      00912 
000054 0E00           00913         movlw   testD
000056 6E83           00914         movwf   PORTD
                      00915 
                      00916 ;       movlw   testE
                      00917 ;       movwf   PORTE
                      00918 
000058 D???           00919 UTETxx  bra     UTETxx
                      00920 
                      00921 ;----------------------------------------------
                      00922 ;---- write a value into the circuit table ----
                      00923 ;----------------------------------------------
                      00924 
00005A                00925 UT_CKT_WRITE_CIRCUIT
                      00926 
                      00927 t_ckt   macro   ckt, lvl
                      00928         movlw   ckt
                      00929         movwf   ckt_num
                      00930         movlw   lvl                     ; value to write
                      00931         movwf   ckt_level
                      00932         call    CKT_WRITE_CIRCUIT
                      00933         endm
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00934 
                      00935         t_ckt 0x00, 0xFF
00005A 0E00               M         movlw   0x00
00005C 6E??               M         movwf   ckt_num
00005E 0EFF               M         movlw   0xFF                    ; value to write
000060 6E??               M         movwf   ckt_level
000062 EC?? F???          M         call    CKT_WRITE_CIRCUIT
                      00936         t_ckt 0x00, 0x00
000066 0E00               M         movlw   0x00
000068 6E??               M         movwf   ckt_num
00006A 0E00               M         movlw   0x00                    ; value to write
00006C 6E??               M         movwf   ckt_level
00006E EC?? F???          M         call    CKT_WRITE_CIRCUIT
                      00937 
                      00938         t_ckt 0x00, 0x11
000072 0E00               M         movlw   0x00
000074 6E??               M         movwf   ckt_num
000076 0E11               M         movlw   0x11                    ; value to write
000078 6E??               M         movwf   ckt_level
00007A EC?? F???          M         call    CKT_WRITE_CIRCUIT
                      00939         t_ckt 0x01, 0x22
00007E 0E01               M         movlw   0x01
000080 6E??               M         movwf   ckt_num
000082 0E22               M         movlw   0x22                    ; value to write
000084 6E??               M         movwf   ckt_level
000086 EC?? F???          M         call    CKT_WRITE_CIRCUIT
                      00940         t_ckt 0x02, 0x33
00008A 0E02               M         movlw   0x02
00008C 6E??               M         movwf   ckt_num
00008E 0E33               M         movlw   0x33                    ; value to write
000090 6E??               M         movwf   ckt_level
000092 EC?? F???          M         call    CKT_WRITE_CIRCUIT
                      00941         t_ckt 0x04, 0x44
000096 0E04               M         movlw   0x04
000098 6E??               M         movwf   ckt_num
00009A 0E44               M         movlw   0x44                    ; value to write
00009C 6E??               M         movwf   ckt_level
00009E EC?? F???          M         call    CKT_WRITE_CIRCUIT
                      00942         t_ckt 0x05, 0x55
0000A2 0E05               M         movlw   0x05
0000A4 6E??               M         movwf   ckt_num
0000A6 0E55               M         movlw   0x55                    ; value to write
0000A8 6E??               M         movwf   ckt_level
0000AA EC?? F???          M         call    CKT_WRITE_CIRCUIT
                      00943         t_ckt 0x06, 0x66
0000AE 0E06               M         movlw   0x06
0000B0 6E??               M         movwf   ckt_num
0000B2 0E66               M         movlw   0x66                    ; value to write
0000B4 6E??               M         movwf   ckt_level
0000B6 EC?? F???          M         call    CKT_WRITE_CIRCUIT
                      00944         t_ckt 0x08, 0x77
0000BA 0E08               M         movlw   0x08
0000BC 6E??               M         movwf   ckt_num
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000BE 0E77               M         movlw   0x77                    ; value to write
0000C0 6E??               M         movwf   ckt_level
0000C2 EC?? F???          M         call    CKT_WRITE_CIRCUIT
                      00945         t_ckt 0x09, 0x88
0000C6 0E09               M         movlw   0x09
0000C8 6E??               M         movwf   ckt_num
0000CA 0E88               M         movlw   0x88                    ; value to write
0000CC 6E??               M         movwf   ckt_level
0000CE EC?? F???          M         call    CKT_WRITE_CIRCUIT
                      00946         t_ckt 0x1E, 0x99                ; maximum legal value
0000D2 0E1E               M         movlw   0x1E
0000D4 6E??               M         movwf   ckt_num
0000D6 0E99               M         movlw   0x99                    ; value to write
0000D8 6E??               M         movwf   ckt_level
0000DA EC?? F???          M         call    CKT_WRITE_CIRCUIT
                      00947         t_ckt 0x1F, 0xAA                ; one over maximum legal value
0000DE 0E1F               M         movlw   0x1F
0000E0 6E??               M         movwf   ckt_num
0000E2 0EAA               M         movlw   0xAA                    ; value to write
0000E4 6E??               M         movwf   ckt_level
0000E6 EC?? F???          M         call    CKT_WRITE_CIRCUIT
0000EA 0012           00948         return
                      00949 
                      00950 ;-----------------------------------------------------------
                      00951 ;---- write a triple value (HSB) into the circuit table ----
                      00952 ;-----------------------------------------------------------
                      00953 
0000EC                00954 UT_CKT_WRITE_CHANNEL_HSB
                      00955 
                      00956     if MONOCHROME_MODE == FALSE
                      00957 t_triple macro  cktnum, red, grn, blu
                      00958         movlw   red
                      00959         movwf   red_level
                      00960         movlw   grn
                      00961         movwf   grn_level
                      00962         movlw   blu
                      00963         movwf   blu_level
                      00964         movlw   LOW (cktnum <<2)        ; requires 2 shifts
                      00965         movwf   ckt_num
                      00966         call    CKT_WRITE_CHANNEL
                      00967         endm
                      00968 
                      00969         t_triple .00, 0x00, 0x00, 0xFF
                      00970         t_triple .01, 0xFF, 0xAA, 0x55
                      00971         t_triple .02, 0xFF, 0xAA, 0x55
                      00972         t_triple .03, 0xFF, 0xAA, 0x55
                      00973     endif
0000EC 0012           00974         return
                      00975 
                      00976 ;--------------------------------------------
                      00977 ;---- load values into the circuit table ----
                      00978 ;--------------------------------------------
                      00979 
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000EE                00980 UT_LOAD_CIRCUIT_TABLE
                      00981 
  000000FF            00982 cktlvl  equ     0xFF
                      00983 
                      00984 t_load  macro   ckt, lvl
                      00985         movlw   ckt
                      00986         movwf   ckt_num
                      00987         movlw   lvl                     ; value to write
                      00988         movwf   ckt_level
                      00989         call    CKT_WRITE_CIRCUIT
                      00990         endm
                      00991 
                      00992 ;       t_load ckt, level
                      00993         t_load .00, cktlvl
0000EE 0E00               M         movlw   .00
0000F0 6E??               M         movwf   ckt_num
0000F2 0EFF               M         movlw   cktlvl                  ; value to write
0000F4 6E??               M         movwf   ckt_level
0000F6 EC?? F???          M         call    CKT_WRITE_CIRCUIT
                      00994         t_load .01, cktlvl
0000FA 0E01               M         movlw   .01
0000FC 6E??               M         movwf   ckt_num
0000FE 0EFF               M         movlw   cktlvl                  ; value to write
000100 6E??               M         movwf   ckt_level
000102 EC?? F???          M         call    CKT_WRITE_CIRCUIT
                      00995         t_load .02, cktlvl
000106 0E02               M         movlw   .02
000108 6E??               M         movwf   ckt_num
00010A 0EFF               M         movlw   cktlvl                  ; value to write
00010C 6E??               M         movwf   ckt_level
00010E EC?? F???          M         call    CKT_WRITE_CIRCUIT
                      00996         t_load .03, cktlvl
000112 0E03               M         movlw   .03
000114 6E??               M         movwf   ckt_num
000116 0EFF               M         movlw   cktlvl                  ; value to write
000118 6E??               M         movwf   ckt_level
00011A EC?? F???          M         call    CKT_WRITE_CIRCUIT
                      00997         t_load .04, cktlvl
00011E 0E04               M         movlw   .04
000120 6E??               M         movwf   ckt_num
000122 0EFF               M         movlw   cktlvl                  ; value to write
000124 6E??               M         movwf   ckt_level
000126 EC?? F???          M         call    CKT_WRITE_CIRCUIT
                      00998     if FALSE
                      00999         t_load .05, cktlvl
                      01000         t_load .06, cktlvl
                      01001         t_load .07, cktlvl
                      01002         t_load .08, cktlvl
                      01003         t_load .09, cktlvl
                      01004         t_load .10, cktlvl
                      01005         t_load .11, cktlvl
                      01006         t_load .12, cktlvl
                      01007         t_load .13, cktlvl
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01008         t_load .14, cktlvl
                      01009         t_load .15, cktlvl
                      01010         t_load .16, cktlvl
                      01011         t_load .17, cktlvl
                      01012         t_load .18, cktlvl
                      01013         t_load .19, cktlvl
                      01014         t_load .20, cktlvl
                      01015         t_load .21, cktlvl
                      01016         t_load .22, cktlvl
                      01017         t_load .23, cktlvl
                      01018         t_load .24, cktlvl
                      01019         t_load .25, cktlvl
                      01020         t_load .26, cktlvl
                      01021         t_load .27, cktlvl
                      01022         t_load .28, cktlvl
                      01023         t_load .29, cktlvl
                      01024         t_load .30, cktlvl
                      01025         t_load .31, cktlvl
                      01026         t_load .32, cktlvl
                      01027         t_load .33, cktlvl              ; don't exceed CKT_NUM_MAX
                      01028     endif
00012A 0012           01029         return
                      01030 
                      01031 ;------------------------------
                      01032 ;---- duty cycle generator ----
                      01033 ;------------------------------
                      01034 
00012C                01035 UT_DUTY_CYCLE_TEST
                      01036 
  0000F447            01037 DCT_TMR equ     0xF447                  ; times out 5% of a 150 Hz cycle
                      01038 
                      01039 ; This routine requires replacing the jump table with the following:
                      01040 ; (remove the comment on the label:)
                      01041 ;CKI_JMP        bra     dct_00                  ; initialize
00012C D???           01042         bra     dct_A0                  ; 5%
00012E D???           01043         bra     dct_A1                  ; 10%
000130 D???           01044         bra     dct_A2                  ; 15%
000132 D???           01045         bra     dct_A3                  ; 20%
000134 D???           01046         bra     dct_A4                  ; 25%
000136 D???           01047         bra     dct_A5                  ; 30%
000138 D???           01048         bra     dct_A6                  ; 40%
00013A D???           01049         bra     dct_A7                  ; 45%
00013C D???           01050         bra     dct_B0                  ; 50%
00013E D???           01051         bra     dct_B1                  ; 55%
000140 D???           01052         bra     dct_B2                  ; 60%
000142 D???           01053         bra     dct_B3                  ; 65%
000144 D???           01054         bra     dct_B4                  ; 70%
000146 D???           01055         bra     dct_B5                  ; 78%
000148 D???           01056         bra     dct_B6                  ; 80%
00014A D???           01057         bra     dct_B7                  ; 85%
00014C D???           01058         bra     dct_C0                  ; 90%
00014E D???           01059         bra     dct_C1                  ; 95%
000150 D???           01060         bra     dct_C2                  ; 100%
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01061 
                      01062 dct_tmr macro                           ; set timer to 5% or 150 hz period
                      01063         movlw   HIGH DCT_TMR
                      01064         movwf   TMR1H
                      01065         movlw   LOW DCT_TMR
                      01066         movwf   TMR1L
                      01067         incf    isrckt_index,F          ; increment index
                      01068         endm
                      01069 
                      01070 dct_set macro   port,bit                ; set timer to 5% or 150 hz period
                      01071         movlw   HIGH DCT_TMR
                      01072         movwf   TMR1H
                      01073         movlw   LOW DCT_TMR
                      01074         movwf   TMR1L
                      01075         bsf     port,bit                ; turn off the indicated bit
                      01076         incf    isrckt_index,F          ; increment index
                      01077         goto    CKI_RET                 ; return
                      01078         endm
                      01079 
                      01080 dct_00  dct_tmr 
000152 0EF4               M         movlw   HIGH DCT_TMR
000154 6ECF               M         movwf   TMR1H
000156 0E47               M         movlw   LOW DCT_TMR
000158 6ECE               M         movwf   TMR1L
00015A 2A??               M         incf    isrckt_index,F          ; increment index
00015C 6A89           01081         clrf    LATA                    ; turn on all bits
00015E 6A8A           01082         clrf    LATB
000160 6A8B           01083         clrf    LATC
000162 EF?? F???      01084         goto    CKI_RET
                      01085 
                      01086 dct_A0  dct_set LATA,0
000166 0EF4               M         movlw   HIGH DCT_TMR
000168 6ECF               M         movwf   TMR1H
00016A 0E47               M         movlw   LOW DCT_TMR
00016C 6ECE               M         movwf   TMR1L
00016E 8089               M         bsf     LATA,0                  ; turn off the indicated bit
000170 2A??               M         incf    isrckt_index,F          ; increment index
000172 EF?? F???          M         goto    CKI_RET                 ; return
                      01087 dct_A1  dct_set LATA,1
000176 0EF4               M         movlw   HIGH DCT_TMR
000178 6ECF               M         movwf   TMR1H
00017A 0E47               M         movlw   LOW DCT_TMR
00017C 6ECE               M         movwf   TMR1L
00017E 8289               M         bsf     LATA,1                  ; turn off the indicated bit
000180 2A??               M         incf    isrckt_index,F          ; increment index
000182 EF?? F???          M         goto    CKI_RET                 ; return
                      01088 dct_A2  dct_set LATA,2
000186 0EF4               M         movlw   HIGH DCT_TMR
000188 6ECF               M         movwf   TMR1H
00018A 0E47               M         movlw   LOW DCT_TMR
00018C 6ECE               M         movwf   TMR1L
00018E 8489               M         bsf     LATA,2                  ; turn off the indicated bit
000190 2A??               M         incf    isrckt_index,F          ; increment index
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000192 EF?? F???          M         goto    CKI_RET                 ; return
                      01089 dct_A3  dct_set LATA,3
000196 0EF4               M         movlw   HIGH DCT_TMR
000198 6ECF               M         movwf   TMR1H
00019A 0E47               M         movlw   LOW DCT_TMR
00019C 6ECE               M         movwf   TMR1L
00019E 8689               M         bsf     LATA,3                  ; turn off the indicated bit
0001A0 2A??               M         incf    isrckt_index,F          ; increment index
0001A2 EF?? F???          M         goto    CKI_RET                 ; return
                      01090 dct_A4  dct_set LATA,4
0001A6 0EF4               M         movlw   HIGH DCT_TMR
0001A8 6ECF               M         movwf   TMR1H
0001AA 0E47               M         movlw   LOW DCT_TMR
0001AC 6ECE               M         movwf   TMR1L
0001AE 8889               M         bsf     LATA,4                  ; turn off the indicated bit
0001B0 2A??               M         incf    isrckt_index,F          ; increment index
0001B2 EF?? F???          M         goto    CKI_RET                 ; return
                      01091 dct_A5  dct_set LATA,5
0001B6 0EF4               M         movlw   HIGH DCT_TMR
0001B8 6ECF               M         movwf   TMR1H
0001BA 0E47               M         movlw   LOW DCT_TMR
0001BC 6ECE               M         movwf   TMR1L
0001BE 8A89               M         bsf     LATA,5                  ; turn off the indicated bit
0001C0 2A??               M         incf    isrckt_index,F          ; increment index
0001C2 EF?? F???          M         goto    CKI_RET                 ; return
                      01092 dct_A6  dct_set LATA,6
0001C6 0EF4               M         movlw   HIGH DCT_TMR
0001C8 6ECF               M         movwf   TMR1H
0001CA 0E47               M         movlw   LOW DCT_TMR
0001CC 6ECE               M         movwf   TMR1L
0001CE 8C89               M         bsf     LATA,6                  ; turn off the indicated bit
0001D0 2A??               M         incf    isrckt_index,F          ; increment index
0001D2 EF?? F???          M         goto    CKI_RET                 ; return
                      01093 dct_A7  dct_set LATA,7
0001D6 0EF4               M         movlw   HIGH DCT_TMR
0001D8 6ECF               M         movwf   TMR1H
0001DA 0E47               M         movlw   LOW DCT_TMR
0001DC 6ECE               M         movwf   TMR1L
0001DE 8E89               M         bsf     LATA,7                  ; turn off the indicated bit
0001E0 2A??               M         incf    isrckt_index,F          ; increment index
0001E2 EF?? F???          M         goto    CKI_RET                 ; return
                      01094 dct_B0  dct_set LATB,0
0001E6 0EF4               M         movlw   HIGH DCT_TMR
0001E8 6ECF               M         movwf   TMR1H
0001EA 0E47               M         movlw   LOW DCT_TMR
0001EC 6ECE               M         movwf   TMR1L
0001EE 808A               M         bsf     LATB,0                  ; turn off the indicated bit
0001F0 2A??               M         incf    isrckt_index,F          ; increment index
0001F2 EF?? F???          M         goto    CKI_RET                 ; return
                      01095 dct_B1  dct_set LATB,1
0001F6 0EF4               M         movlw   HIGH DCT_TMR
0001F8 6ECF               M         movwf   TMR1H
0001FA 0E47               M         movlw   LOW DCT_TMR
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0001FC 6ECE               M         movwf   TMR1L
0001FE 828A               M         bsf     LATB,1                  ; turn off the indicated bit
000200 2A??               M         incf    isrckt_index,F          ; increment index
000202 EF?? F???          M         goto    CKI_RET                 ; return
                      01096 dct_B2  dct_set LATB,2
000206 0EF4               M         movlw   HIGH DCT_TMR
000208 6ECF               M         movwf   TMR1H
00020A 0E47               M         movlw   LOW DCT_TMR
00020C 6ECE               M         movwf   TMR1L
00020E 848A               M         bsf     LATB,2                  ; turn off the indicated bit
000210 2A??               M         incf    isrckt_index,F          ; increment index
000212 EF?? F???          M         goto    CKI_RET                 ; return
                      01097 dct_B3  dct_set LATB,3
000216 0EF4               M         movlw   HIGH DCT_TMR
000218 6ECF               M         movwf   TMR1H
00021A 0E47               M         movlw   LOW DCT_TMR
00021C 6ECE               M         movwf   TMR1L
00021E 868A               M         bsf     LATB,3                  ; turn off the indicated bit
000220 2A??               M         incf    isrckt_index,F          ; increment index
000222 EF?? F???          M         goto    CKI_RET                 ; return
                      01098 dct_B4  dct_set LATB,4
000226 0EF4               M         movlw   HIGH DCT_TMR
000228 6ECF               M         movwf   TMR1H
00022A 0E47               M         movlw   LOW DCT_TMR
00022C 6ECE               M         movwf   TMR1L
00022E 888A               M         bsf     LATB,4                  ; turn off the indicated bit
000230 2A??               M         incf    isrckt_index,F          ; increment index
000232 EF?? F???          M         goto    CKI_RET                 ; return
                      01099 dct_B5  dct_set LATB,5
000236 0EF4               M         movlw   HIGH DCT_TMR
000238 6ECF               M         movwf   TMR1H
00023A 0E47               M         movlw   LOW DCT_TMR
00023C 6ECE               M         movwf   TMR1L
00023E 8A8A               M         bsf     LATB,5                  ; turn off the indicated bit
000240 2A??               M         incf    isrckt_index,F          ; increment index
000242 EF?? F???          M         goto    CKI_RET                 ; return
                      01100 dct_B6  dct_set LATB,6
000246 0EF4               M         movlw   HIGH DCT_TMR
000248 6ECF               M         movwf   TMR1H
00024A 0E47               M         movlw   LOW DCT_TMR
00024C 6ECE               M         movwf   TMR1L
00024E 8C8A               M         bsf     LATB,6                  ; turn off the indicated bit
000250 2A??               M         incf    isrckt_index,F          ; increment index
000252 EF?? F???          M         goto    CKI_RET                 ; return
                      01101 dct_B7  dct_set LATB,7
000256 0EF4               M         movlw   HIGH DCT_TMR
000258 6ECF               M         movwf   TMR1H
00025A 0E47               M         movlw   LOW DCT_TMR
00025C 6ECE               M         movwf   TMR1L
00025E 8E8A               M         bsf     LATB,7                  ; turn off the indicated bit
000260 2A??               M         incf    isrckt_index,F          ; increment index
000262 EF?? F???          M         goto    CKI_RET                 ; return
                      01102 dct_C0  dct_set LATC,0
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000266 0EF4               M         movlw   HIGH DCT_TMR
000268 6ECF               M         movwf   TMR1H
00026A 0E47               M         movlw   LOW DCT_TMR
00026C 6ECE               M         movwf   TMR1L
00026E 808B               M         bsf     LATC,0                  ; turn off the indicated bit
000270 2A??               M         incf    isrckt_index,F          ; increment index
000272 EF?? F???          M         goto    CKI_RET                 ; return
                      01103 dct_C1  dct_set LATC,1
000276 0EF4               M         movlw   HIGH DCT_TMR
000278 6ECF               M         movwf   TMR1H
00027A 0E47               M         movlw   LOW DCT_TMR
00027C 6ECE               M         movwf   TMR1L
00027E 828B               M         bsf     LATC,1                  ; turn off the indicated bit
000280 2A??               M         incf    isrckt_index,F          ; increment index
000282 EF?? F???          M         goto    CKI_RET                 ; return
                      01104 
                      01105 dct_C2  dct_tmr
000286 0EF4               M         movlw   HIGH DCT_TMR
000288 6ECF               M         movwf   TMR1H
00028A 0E47               M         movlw   LOW DCT_TMR
00028C 6ECE               M         movwf   TMR1L
00028E 2A??               M         incf    isrckt_index,F          ; increment index
000290 848B           01106         bsf     LATC,2                  ; turn off the indicated bit
000292 6A??           01107         clrf    isrckt_index            ; reset index
000294 EF?? F???      01108         goto    CKI_RET                 ; return
                      01109 
                      01110   endif ; UNITS_ENABLED
                      01111 
                      01112         END
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 45


SYMBOL TABLE
  LABEL                             VALUE 

A                                 00000000
ABDEN                             00000000
ABDOVF                            00000007
ACCESS                            00000000
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACQT0                             00000003
ACQT1                             00000004
ACQT2                             00000005
ADCON0                            00000FC2
ADCON1                            00000FC1
ADCON2                            00000FC0
ADCS0                             00000000
ADCS1                             00000001
ADCS2                             00000002
ADDEN                             00000003
ADEN                              00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADIP                              00000006
ADON                              00000000
ADRES                             00000FC3
ADRESH                            00000FC4
ADRESL                            00000FC3
AN10                              00000001
AN11                              00000004
AN12                              00000000
AN4                               00000005
AN8                               00000002
AN9                               00000003
APP_INCLUDE_FILE                  wClock.inc
ARG_HI_FLAG                       00000000
ARG_NUM_MAX                       00000000
B                                 00000001
BANKED                            00000001
BASE_OF_TABLES                    00002000
BAUDCON                           00000FB8
BAUDCTL                           00000FB8
BCLIE                             00000003
BCLIF                             00000003
BCLIP                             00000003
BF                                00000000
BGST                              00000005
BLU                               000000AB
BLU_OFFSET                        00000002
BOR                               00000000
BRG16                             00000003
BRGH                              00000002
BRT                               00000002
BRT_OFFSET                        00000002
BSR                               00000FE0
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 46


SYMBOL TABLE
  LABEL                             VALUE 

C                                 00000000
C1INV                             00000004
C1OUT                             00000006
C2INV                             00000005
C2OUT                             00000007
CCCKx                             00000008
CCCNx                             00000012
CCP1                              00000002
CCP1CON                           00000FBD
CCP1IE                            00000002
CCP1IF                            00000002
CCP1IP                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           00000FBA
CCP2IE                            00000000
CCP2IF                            00000000
CCP2IP                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCP2_PORTB                        00000003
CCP2_PORTC                        00000001
CCPR1                             00000FBE
CCPR1H                            00000FBF
CCPR1L                            00000FBE
CCPR2                             00000FBB
CCPR2H                            00000FBC
CCPR2L                            00000FBB
CFGS                              00000006
CHN_NUM_MAX                       00000015
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CIS                               00000003
CK                                00000006
CKE                               00000006
CKI_JMP                           00000036
CKI_RET                           00000066
CKP                               00000004
CKT_00b                           00000002
CKT_00p                           00000002
CKT_01b                           00000001
CKT_01p                           00000003
CKT_02b                           00000004
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 47


SYMBOL TABLE
  LABEL                             VALUE 

CKT_02p                           00000003
CKT_03b                           00000008
CKT_03p                           00000003
CKT_04b                           00000020
CKT_04p                           00000002
CKT_05b                           00000001
CKT_05p                           00000002
CKT_06b                           00000008
CKT_06p                           00000002
CKT_07b                           00000002
CKT_07p                           00000003
CKT_08b                           00000040
CKT_08p                           00000002
CKT_09b                           00000020
CKT_09p                           00000003
CKT_10b                           00000004
CKT_10p                           00000002
CKT_11b                           00000010
CKT_11p                           00000002
CKT_12b                           00000004
CKT_12p                           00000004
CKT_13b                           00000002
CKT_13p                           00000001
CKT_14b                           00000010
CKT_14p                           00000003
CKT_15b                           00000080
CKT_15p                           00000002
CKT_16b                           00000040
CKT_16p                           00000003
CKT_17b                           00000002
CKT_17p                           00000004
CKT_18b                           00000020
CKT_18p                           00000000
CKT_19b                           00000008
CKT_19p                           00000000
CKT_20b                           00000080
CKT_20p                           00000003
CKT_21b                           00000001
CKT_21p                           00000001
CKT_22b                           00000001
CKT_22p                           00000004
CKT_23b                           00000010
CKT_23p                           00000000
CKT_24b                           00000004
CKT_24p                           00000000
CKT_25b                           00000002
CKT_25p                           00000000
CKT_26b                           00000020
CKT_26p                           00000001
CKT_27b                           00000010
CKT_27p                           00000001
CKT_28b                           00000004
CKT_28p                           00000001
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 48


SYMBOL TABLE
  LABEL                             VALUE 

CKT_29b                           00000008
CKT_29p                           00000001
CKT_CHANNEL_MAP                   00000000
CKT_CHECK_CHNNUM                  0000000A
CKT_CHECK_CKTNUM                  00000000
CKT_IN0                           0000001A
CKT_INIT                          00000000
CKT_ISR                           00000026
CKT_NUM_MAX                       0000001D
CKT_TABLE_INCREMENT               00000005
CKT_TABLE_LEN                     00000027
CKT_TMR_B0_OFF                    0000FF71
CKT_TMR_B0_ON                     0000FFBF
CKT_TMR_B1_OFF                    0000FED4
CKT_TMR_B1_ON                     0000FF71
CKT_TMR_B2_OFF                    0000FD9A
CKT_TMR_B2_ON                     0000FED4
CKT_TMR_B3_OFF                    0000FB27
CKT_TMR_B3_ON                     0000FD9A
CKT_TMR_B4_OFF                    0000F640
CKT_TMR_B4_ON                     0000FB27
CKT_TMR_B5_OFF                    0000EC72
CKT_TMR_B5_ON                     0000F640
CKT_TMR_B6_OFF                    0000D8D6
CKT_TMR_B6_ON                     0000EC72
CKT_TMR_B7_OFF                    0000B19E
CKT_TMR_B7_ON                     0000D8D6
CKT_WRITE_CHANNEL                 00000292
CKT_WRITE_CIRCUIT                 000002CA
CKT_WRITE_PARAMETERS              0000002C
CLK_TIMER                         00000BDC
CM0                               00000000
CM1                               00000001
CM2                               00000002
CMCON                             00000FB4
CMIE                              00000006
CMIF                              00000006
CMIP                              00000006
CREN                              00000004
CS                                00000002
CSRC                              00000007
CUE_ARG                           00000002
CUE_CMD                           00000001
CUE_DONE                          00000000
CUE_JUMP                          00000005
CUE_LOOP                          00000003
CUE_LOOP_BLOCK                    00000004
CUE_MAX                           00000005
CUE_TABLES_START                  00002600
CVR0                              00000000
CVR1                              00000001
CVR2                              00000002
CVR3                              00000003
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 49


SYMBOL TABLE
  LABEL                             VALUE 

CVRCON                            00000FB5
CVREN                             00000007
CVROE                             00000006
CVRR                              00000005
CVRSS                             00000004
CWC_x                             000002C8
CWK_x                             00000366
CYCLE_START_FLAG                  00000001
CYN                               0000007F
D                                 00000005
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DC2B0                             00000004
DC2B1                             00000005
DCT_TMR                           0000F447
DDRA                              TRISA
DDRB                              TRISB
DDRC                              TRISC
DDRD                              TRISD
DDRE                              TRISE
DEVTYPE                           00004420
DEV_FAMILY                        00000018
DEV_INCLUDE_FILE                  d18f4520.inc
DIAGNOSTICS_ENABLED               00000001
DIRTY_BIT                         00000000
DONE                              00000001
D_A                               00000005
ECCP1AS                           00000FB6
ECCPAS                            00000FB6
ECCPAS0                           00000004
ECCPAS1                           00000005
ECCPAS2                           00000006
ECCPASE                           00000007
EEADR                             00000FA9
EECON1                            00000FA6
EECON2                            00000FA7
EEDATA                            00000FA8
EEIE                              00000004
EEIF                              00000004
EEIP                              00000004
EEPGD                             00000007
EIGHT                             00000010
ELEVEN                            00000013
ERR_BAD_ARGNUM                    00000003
ERR_BAD_CHANNEL                   00000002
ERR_BAD_COMMAND                   00000001
ERR_BAD_OPCODE                    00000004
ERR_CMD_LOADER_FAILED             00000005
ERR_GET_COMMAND_FAILED            00000006
ERR_GET_NEXT_CMD_FAILED           00000007
ERR_NO_ERROR                      00000000
EXT_OFFSET                        00000003
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 50


SYMBOL TABLE
  LABEL                             VALUE 

FADE                              00000056
FADE_MAX                          00000059
FADE_MIN                          00000058
FADE_REPEAT                       00000057
FADE_X                            0000005A
FALSE                             00000000
FAST                              00000001
FDR_TABLE_LEN                     0000000D
FERR                              00000002
FIVE                              0000000D
FIVE_                             00000005
FLTS                              00000002
FOSC                              00000024
FOUR                              0000000C
FREE                              00000004
FSR0                              00000000
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1                              00000001
FSR1H                             00000FE2
FSR1L                             00000FE1
FSR2                              00000002
FSR2H                             00000FDA
FSR2L                             00000FD9
GCEN                              00000007
GIE                               00000007
GIEH                              00000007
GIEL                              00000006
GO                                00000001
GO_DONE                           00000001
GRN                               00000055
GRN_OFFSET                        00000001
HALF                              00000001
HLVDCON                           00000FD2
HLVDEN                            00000004
HLVDIE                            00000002
HLVDIF                            00000002
HLVDIP                            00000002
HLVDL0                            00000000
HLVDL1                            00000001
HLVDL2                            00000002
HLVDL3                            00000003
HSB_TABLES_LEN                    00000600
HSB_TABLES_START                  00002000
HUE                               00000000
HUE_OFFSET                        00000000
IBF                               00000007
IBOV                              00000005
ICD_ENABLED                       00000000
IDLEN                             00000007
INDF0                             00000FEF
INDF1                             00000FE7
INDF2                             00000FDF
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 51


SYMBOL TABLE
  LABEL                             VALUE 

INIT_PORTS_EXTERNAL               00000001
INIT_T0_EXTERNAL                  00000001
INIT_T1_EXTERNAL                  00000001
INIT_WATCHDOG_TIMER               00000001
INT0                              00000000
INT0E                             00000004
INT0F                             00000001
INT0IE                            00000004
INT0IF                            00000001
INT1                              00000001
INT1E                             00000003
INT1F                             00000000
INT1IE                            00000003
INT1IF                            00000000
INT1IP                            00000006
INT1P                             00000006
INT2                              00000002
INT2E                             00000004
INT2F                             00000001
INT2IE                            00000004
INT2IF                            00000001
INT2IP                            00000007
INT2P                             00000007
INTCON                            00000FF2
INTCON2                           00000FF1
INTCON3                           00000FF0
INTEDG0                           00000006
INTEDG1                           00000005
INTEDG2                           00000004
INTSRC                            00000007
IOFS                              00000002
IPEN                              00000007
IPR1                              00000F9F
IPR2                              00000FA2
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
IRVST                             00000005
ITS                               00000000
IVRST                             00000005
KBI0                              00000004
KBI1                              00000005
KBI2                              00000006
KBI3                              00000007
LATA                              00000F89
LATA0                             00000000
LATA1                             00000001
LATA2                             00000002
LATA3                             00000003
LATA4                             00000004
LATA5                             00000005
LATA6                             00000006
LATA7                             00000007
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

LATB                              00000F8A
LATB0                             00000000
LATB1                             00000001
LATB2                             00000002
LATB3                             00000003
LATB4                             00000004
LATB5                             00000005
LATB6                             00000006
LATB7                             00000007
LATC                              00000F8B
LATC0                             00000000
LATC1                             00000001
LATC2                             00000002
LATC3                             00000003
LATC4                             00000004
LATC5                             00000005
LATC6                             00000006
LATC7                             00000007
LATD                              00000F8C
LATD0                             00000000
LATD1                             00000001
LATD2                             00000002
LATD3                             00000003
LATD4                             00000004
LATD5                             00000005
LATD6                             00000006
LATD7                             00000007
LATE                              00000F8D
LATE0                             00000000
LATE1                             00000001
LATE2                             00000002
LED_INCLUDE_FILE                  led.inc
LVDCON                            00000FD2
LVDEN                             00000004
LVDIE                             00000002
LVDIF                             00000002
LVDIN                             00000005
LVDIP                             00000002
LVDL0                             00000000
LVDL1                             00000001
LVDL2                             00000002
LVDL3                             00000003
LVV0                              00000000
LVV1                              00000001
LVV2                              00000002
LVV3                              00000003
MAG                               000000D5
MAXRAM                            000002FF
MINUTES                           00000006
MONOCHROME_MODE                   00000001
N                                 00000004
NEVER                             000000FE
NINE                              00000011
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 53


SYMBOL TABLE
  LABEL                             VALUE 

NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_CS                            00000002
NOT_DONE                          00000001
NOT_PD                            00000002
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RD                            00000000
NOT_RI                            00000004
NOT_SS                            00000005
NOT_T1SYNC                        00000002
NOT_T3SYNC                        00000002
NOT_TO                            00000003
NOT_W                             00000002
NOT_WR                            00000001
NOT_WRITE                         00000002
NOW                               000000FF
OBF                               00000006
OCLOCK                            00000015
OERR                              00000001
OFF                               00000000
ON                                00000001
ONE                               00000009
OP_ADD                            0000000B
OP_ADD_AND                        0000000C
OP_ADD_AND_SAVE                   0000000D
OP_ADD_IND                        0000000E
OP_ADD_IND_AND                    00000010
OP_ADD_IND_AND_SAVE               00000011
OP_ADD_IND_SAVE                   0000000F
OP_DEC                            00000006
OP_DECX2_RANGE                    00000008
OP_DECX3_RANGE                    00000009
OP_DECX4_RANGE                    0000000A
OP_DEC_RANGE                      00000007
OP_INC                            00000001
OP_INCX2_RANGE                    00000003
OP_INCX3_RANGE                    00000004
OP_INCX4_RANGE                    00000005
OP_INC_RANGE                      00000002
OP_LIT                            00000000
OP_OPCODE_MAX                     0000001A
OP_RAND                           00000019
OP_RAND_RANGE                     0000001A
OP_SUB                            00000012
OP_SUB_AND                        00000013
OP_SUB_AND_SAVE                   00000014
OP_SUB_IND                        00000015
OP_SUB_IND_AND                    00000017
OP_SUB_IND_AND_SAVE               00000018
OP_SUB_IND_SAVE                   00000016
ORN                               00000015
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 54


SYMBOL TABLE
  LABEL                             VALUE 

OSCCON                            00000FD3
OSCFIE                            00000007
OSCFIF                            00000007
OSCFIP                            00000007
OSCTUNE                           00000F9B
OSTS                              00000003
OV                                00000003
P                                 00000004
P1B                               00000005
P1C                               00000006
P1D                               00000007
P1M0                              00000006
P1M1                              00000007
PAST                              00000007
PATCH                             00000041
PC                                00000FF9
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PD                                00000002
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
PDC4                              00000004
PDC5                              00000005
PDC6                              00000006
PEIE                              00000006
PEN                               00000002
PGC                               00000006
PGD                               00000007
PGM                               00000005
PIE1                              00000F9D
PIE2                              00000FA0
PIR1                              00000F9E
PIR2                              00000FA1
PLAYLIST_CODA                     00000001
PLAYLIST_DONE                     00000000
PLLEN                             00000006
PLUSW0                            00000FEB
PLUSW1                            00000FE3
PLUSW2                            00000FDB
POR                               00000001
PORTA                             00000F80
PORTB                             00000F81
PORTC                             00000F82
PORTD                             00000F83
PORTE                             00000F84
PORT_INIT                         00000034
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 55


SYMBOL TABLE
  LABEL                             VALUE 

POSTDEC0                          00000FED
POSTDEC1                          00000FE5
POSTDEC2                          00000FDD
POSTINC0                          00000FEE
POSTINC1                          00000FE6
POSTINC2                          00000FDE
PR2                               00000FCB
PREINC0                           00000FEC
PREINC1                           00000FE4
PREINC2                           00000FDC
PROD                              00000FF3
PRODH                             00000FF4
PRODL                             00000FF3
PRSEN                             00000007
PSA                               00000003
PSP0                              00000000
PSP1                              00000001
PSP2                              00000002
PSP3                              00000003
PSP4                              00000004
PSP5                              00000005
PSP6                              00000006
PSP7                              00000007
PSPIE                             00000007
PSPIF                             00000007
PSPIP                             00000007
PSPMODE                           00000004
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
PSSBD1                            00000001
PWM1CON                           00000FB7
QUARTER                           00000003
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RA6                               00000006
RA7                               00000007
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RBIP                              00000000
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 56


SYMBOL TABLE
  LABEL                             VALUE 

RBPU                              00000007
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RCEN                              00000003
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCIP                              00000005
RCMT                              00000006
RCON                              00000FD0
RCREG                             00000FAE
RCSTA                             00000FAB
RD                                00000000
RD0                               00000000
RD1                               00000001
RD16                              00000007
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
RE3                               00000003
RED                               00000000
RED_OFFSET                        00000000
RI                                00000004
RSEN                              00000001
RX                                00000007
RX9                               00000006
RX9D                              00000000
RXDTP                             00000005
RX_ENABLED                        00000000
R_W                               00000002
S                                 00000003
SAT                               00000001
SAT_OFFSET                        00000001
SBOREN                            00000006
SCK                               00000003
SCKP                              00000004
SCL                               00000003
SCS0                              00000000
SCS1                              00000001
SDA                               00000004
SDI                               00000004
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 57


SYMBOL TABLE
  LABEL                             VALUE 

SDO                               00000005
SECOND_FLAG                       00000003
SEN                               00000000
SENDB                             00000003
SET_BRT                           00000011
SET_HSB                           00000023
SET_RGB                           00000033
SEVEN                             0000000F
SIX                               0000000E
SMP                               00000007
SP0                               00000000
SP1                               00000001
SP2                               00000002
SP3                               00000003
SP4                               00000004
SPBRG                             00000FAF
SPBRGH                            00000FB0
SPEN                              00000007
SREN                              00000005
SS                                00000005
SSPADD                            00000FC8
SSPBUF                            00000FC9
SSPCON1                           00000FC6
SSPCON2                           00000FC5
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPIP                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000FC7
STATUS                            00000FD8
STKFUL                            00000007
STKOVF                            00000007
STKPTR                            00000FFC
STKUNF                            00000006
SWDTE                             00000000
SWDTEN                            00000000
SWITCH_READ_FLAG                  00000002
SW_DEBOUNCE_MAX                   00000008
SW_HELD_COUNT                     0000003C
SW_STATE_FALLING_bp               00000002
SW_STATE_ON_bp                    00000000
SW_STATE_RISING_bp                00000001
SYNC                              00000004
T016BIT                           00000006
T08BIT                            00000006
T0CKI                             00000004
T0CON                             00000FD5
T0CS                              00000005
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 58


SYMBOL TABLE
  LABEL                             VALUE 

T0IE                              00000005
T0IF                              00000002
T0PS0                             00000000
T0PS1                             00000001
T0PS2                             00000002
T0PS3                             00000003
T0SE                              00000004
T13CKI                            00000000
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000FCD
T1CON_INIT                        00000080
T1CON_START                       00000081
T1OSCEN                           00000003
T1OSI                             00000001
T1OSO                             00000000
T1RUN                             00000006
T1SYNC                            00000002
T1_INIT                           00000014
T1_START                          00000020
T1_STOP                           00000014
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000FCA
T2OUTPS0                          00000003
T2OUTPS1                          00000004
T2OUTPS2                          00000005
T2OUTPS3                          00000006
T3CCP1                            00000003
T3CCP2                            00000006
T3CKPS0                           00000004
T3CKPS1                           00000005
T3CON                             00000FB1
T3SYNC                            00000002
TABLAT                            00000FF5
TBLPTR                            00000FF6
TBLPTRH                           00000FF7
TBLPTRL                           00000FF6
TBLPTRU                           00000FF8
TEN                               00000012
TEN_                              00000002
THREE                             0000000B
TMR0H                             00000FD7
TMR0IE                            00000005
TMR0IF                            00000002
TMR0IP                            00000002
TMR0L                             00000FD6
TMR0ON                            00000007
TMR1CS                            00000001
TMR1H                             00000FCF
TMR1H_INIT                        000000FF
TMR1IE                            00000000
TMR1IF                            00000000
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 59


SYMBOL TABLE
  LABEL                             VALUE 

TMR1IP                            00000000
TMR1L                             00000FCE
TMR1L_INIT                        000000BF
TMR1ON                            00000000
TMR2                              00000FCC
TMR2IE                            00000001
TMR2IF                            00000001
TMR2IP                            00000001
TMR2ON                            00000002
TMR3CS                            00000001
TMR3H                             00000FB3
TMR3IE                            00000001
TMR3IF                            00000001
TMR3IP                            00000001
TMR3L                             00000FB2
TMR3ON                            00000000
TO                                00000003
TOS                               00000FFD
TOSH                              00000FFE
TOSL                              00000FFD
TOSU                              00000FFF
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TO_                               00000008
TRISA                             00000F92
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISA6                            00000006
TRISA7                            00000007
TRISA_INIT                        00000001
TRISB                             00000F93
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISB_INIT                        00000000
TRISC                             00000F94
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 60


SYMBOL TABLE
  LABEL                             VALUE 

TRISC6                            00000006
TRISC7                            00000007
TRISC_INIT                        00000000
TRISD                             00000F95
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISD_INIT                        00000000
TRISE                             00000F96
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRISE_INIT                        000000E8
TRMT                              00000001
TRUE                              00000001
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TWELVE                            00000014
TWENTY                            00000004
TWO                               0000000A
TX                                00000006
TX9                               00000006
TX9D                              00000000
TXCKP                             00000004
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXIP                              00000004
TXREG                             00000FAD
TXSTA                             00000FAC
UA                                00000001
UNITS_ENABLED                     00000001
UTETxx                            00000058
UT_CKT                            0000004A
UT_CKT_WRITE_CHANNEL_HSB          000000EC
UT_CKT_WRITE_CIRCUIT              0000005A
UT_DUTY_CYCLE_TEST                0000012C
UT_ELECTRICAL_TEST                00000050
UT_LOAD_CIRCUIT_TABLE             000000EE
VCFG0                             00000004
VCFG1                             00000005
VDIRMAG                           00000007
VIO                               000000D5
W                                 00000000
WATCH                             00000060
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 61


SYMBOL TABLE
  LABEL                             VALUE 

WCOL                              00000007
WDTCON                            00000FD1
WR                                00000001
WREG                              00000FE8
WREN                              00000002
WRERR                             00000003
WUE                               00000001
YEL                               0000002A
Z                                 00000002
_BOREN_NOSLP_2L                   000000FD
_BOREN_OFF_2L                     000000F9
_BOREN_ON_2L                      000000FB
_BOREN_SBORDIS_2L                 000000FF
_BORV_0_2L                        000000E7
_BORV_1_2L                        000000EF
_BORV_2_2L                        000000F7
_BORV_3_2L                        000000FF
_CCP2MX_PORTBE_3H                 000000FE
_CCP2MX_PORTC_3H                  000000FF
_CONFIG1H                         00300001
_CONFIG2H                         00300003
_CONFIG2L                         00300002
_CONFIG3H                         00300005
_CONFIG4L                         00300006
_CONFIG5H                         00300009
_CONFIG5L                         00300008
_CONFIG6H                         0030000B
_CONFIG6L                         0030000A
_CONFIG7H                         0030000D
_CONFIG7L                         0030000C
_CP0_OFF_5L                       000000FF
_CP0_ON_5L                        000000FE
_CP1_OFF_5L                       000000FF
_CP1_ON_5L                        000000FD
_CPB_OFF_5H                       000000FF
_CPB_ON_5H                        000000BF
_CPD_OFF_5H                       000000FF
_CPD_ON_5H                        0000007F
_DEBUG_OFF_4L                     000000FF
_DEBUG_ON_4L                      0000007F
_DEVID1                           003FFFFE
_DEVID2                           003FFFFF
_EBTR0_OFF_7L                     000000FF
_EBTR0_ON_7L                      000000FE
_EBTR1_OFF_7L                     000000FF
_EBTR1_ON_7L                      000000FD
_EBTRB_OFF_7H                     000000FF
_EBTRB_ON_7H                      000000BF
_FCMEN_OFF_1H                     000000BF
_FCMEN_ON_1H                      000000FF
_IDLOC0                           00200000
_IDLOC1                           00200001
_IDLOC2                           00200002
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 62


SYMBOL TABLE
  LABEL                             VALUE 

_IDLOC3                           00200003
_IDLOC4                           00200004
_IDLOC5                           00200005
_IDLOC6                           00200006
_IDLOC7                           00200007
_IESO_OFF_1H                      0000007F
_IESO_ON_1H                       000000FF
_LPT1OSC_OFF_3H                   000000FB
_LPT1OSC_ON_3H                    000000FF
_LVP_OFF_4L                       000000FB
_LVP_ON_4L                        000000FF
_MCLRE_OFF_3H                     0000007F
_MCLRE_ON_3H                      000000FF
_OSC_ECIO6_1H                     000000F5
_OSC_EC_1H                        000000F4
_OSC_HSPLL_1H                     000000F6
_OSC_HS_1H                        000000F2
_OSC_INTIO67_1H                   000000F8
_OSC_INTIO7_1H                    000000F9
_OSC_LP_1H                        000000F0
_OSC_RCIO6_1H                     000000F7
_OSC_RC_1H                        000000F3
_OSC_XT_1H                        000000F1
_PBADEN_OFF_3H                    000000FD
_PBADEN_ON_3H                     000000FF
_PWRT_OFF_2L                      000000FF
_PWRT_ON_2L                       000000FE
_STVREN_OFF_4L                    000000FE
_STVREN_ON_4L                     000000FF
_WDTPS_1024_2H                    000000F5
_WDTPS_128_2H                     000000EF
_WDTPS_16384_2H                   000000FD
_WDTPS_16_2H                      000000E9
_WDTPS_1_2H                       000000E1
_WDTPS_2048_2H                    000000F7
_WDTPS_256_2H                     000000F1
_WDTPS_2_2H                       000000E3
_WDTPS_32768_2H                   000000FF
_WDTPS_32_2H                      000000EB
_WDTPS_4096_2H                    000000F9
_WDTPS_4_2H                       000000E5
_WDTPS_512_2H                     000000F3
_WDTPS_64_2H                      000000ED
_WDTPS_8192_2H                    000000FB
_WDTPS_8_2H                       000000E7
_WDT_OFF_2H                       000000FE
_WDT_ON_2H                        000000FF
_WRT0_OFF_6L                      000000FF
_WRT0_ON_6L                       000000FE
_WRT1_OFF_6L                      000000FF
_WRT1_ON_6L                       000000FD
_WRTB_OFF_6H                      000000FF
_WRTB_ON_6H                       000000BF
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 63


SYMBOL TABLE
  LABEL                             VALUE 

_WRTC_OFF_6H                      000000FF
_WRTC_ON_6H                       000000DF
_WRTD_OFF_6H                      000000FF
_WRTD_ON_6H                       0000007F
_XINST_OFF_4L                     000000BF
_XINST_ON_4L                      000000FF
__18F4420                         00000001
_b0off                            00000090
_b0on                             00000070
_b1off                            000000D0
_b1on                             000000B0
_b2off                            00000110
_b2on                             000000F0
_b3off                            00000150
_b3on                             00000130
_b4off                            00000190
_b4on                             00000170
_b5off                            000001D0
_b5on                             000001B0
_b6off                            00000212
_b6on                             000001F2
_b7off                            00000252
_b7offX                           00000272
_b7on                             00000232
_bp_off                           
_bp_offX                          
_bp_on                            
app_flags                         00000000
baseA                             00000000
baseB                             00000001
baseC                             00000002
baseD                             00000003
baseE                             00000004
c00                               00000000
c01                               00000004
c02                               00000008
c03                               0000000C
c04                               00000010
c05                               00000014
c06                               00000018
c07                               0000001C
c08                               00000020
c09                               00000024
c10                               00000028
c11                               0000002C
c12                               00000030
c13                               00000034
c14                               00000038
c15                               0000003C
c16                               00000040
c17                               00000044
c18                               00000048
c19                               0000004C
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 64


SYMBOL TABLE
  LABEL                             VALUE 

c20                               00000050
c21                               00000054
c22                               00000058
c23                               0000005C
c24                               00000060
c25                               00000064
c26                               00000068
c27                               0000006C
c28                               00000070
c29                               00000074
c30                               00000078
c31                               0000007C
c32                               00000080
c33                               00000084
c34                               00000088
c35                               0000008C
c36                               00000090
c37                               00000094
c38                               00000098
c39                               0000009C
c40                               000000A0
c41                               000000A4
c42                               000000A8
c43                               000000AC
c44                               000000B0
c45                               000000B4
c46                               000000B8
c47                               000000BC
c48                               000000C0
c49                               000000C4
c50                               000000C8
c51                               000000CC
c52                               000000D0
c53                               000000D4
c54                               000000D8
c55                               000000DC
c56                               000000E0
c57                               000000E4
c58                               000000E8
c59                               000000EC
c60                               000000F0
c61                               000000F4
c62                               000000F8
c63                               000000FC
chn_level                         00000032
chn_num                           00000031
ckt_andmask                       00000008
ckt_level                         00000005
ckt_num                           00000003
ckt_offset                        00000006
ckt_ormask                        00000007
ckt_table                         00000009
ckt_temp                          00000004
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 65


SYMBOL TABLE
  LABEL                             VALUE 

cktlvl                            000000FF
ct                                ckt_table
cws_bit                           
dct_00                            00000152
dct_A0                            00000166
dct_A1                            00000176
dct_A2                            00000186
dct_A3                            00000196
dct_A4                            000001A6
dct_A5                            000001B6
dct_A6                            000001C6
dct_A7                            000001D6
dct_B0                            000001E6
dct_B1                            000001F6
dct_B2                            00000206
dct_B3                            00000216
dct_B4                            00000226
dct_B5                            00000236
dct_B6                            00000246
dct_B7                            00000256
dct_C0                            00000266
dct_C1                            00000276
dct_C2                            00000286
dct_set                           
dct_tmr                           
isrckt_W                          00000000
isrckt_index                      00000002
isrckt_status                     00000001
mask0                             00000001
mask1                             00000002
mask2                             00000004
mask3                             00000008
mask4                             00000010
mask5                             00000020
mask6                             00000040
mask7                             00000080
setptr                            
switch                            
switch01b                         00000000
switch01p                         00000F80
t_ckt                             
t_load                            
tbladdr                           
tblindx                           
tblread                           
testA                             00000000
testB                             00000000
testC                             00000000
testD                             00000000
testE                             00000000
ut_delay_hi                       00000033
ut_delay_lo                       00000034
ut_loop                           00000035
MPASM  5.34                   LED_CKT4520.ASM   5-22-2010  11:42:41         PAGE 66


SYMBOL TABLE
  LABEL                             VALUE 

value                             00000000

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed


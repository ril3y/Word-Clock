MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;*****************************************************************************
                      00002 ; PIC18F family - commands and fader processing
                      00003 ;*****************************************************************************
                      00004 ;
                      00005 ;    Filename:          led_fader.asm
                      00006 ;    Function:          supports fader commands
                      00007 ;    Author, Company:   Alden Hart, Luke's Lights
                      00008 ;    Chip Support:      Supports PIC18F family chips
                      00009 ;    Revision:          090711
                      00010 ;
                      00011 ; Faders are the command tables that perform fades. Commands (fader commands) 
                      00012 ; are the instructions that are loaded into them. Things that work with commands 
                      00013 ; are prefixed by CMD_ or cmd_. Things that work with faders are prefixed by
                      00014 ; FDR_ or fdr_. The commands and fader definitions are so intertwined that I 
                      00015 ; decided not to separate them out.
                      00016 
                      00017 ;----- Include files and other setup------
                      00018 
                      00019 #include <global.inc>                   ; 1: global defines - must be first
                      00001 ;*****************************************************************************
                      00002 ; global.inc - global header file for any application or chip family
                      00003 ;*****************************************************************************
                      00004 ;
                      00005 ;    Filename:          global.inc
                      00006 ;    Function:          define files, global equates and macros
                      00007 ;    Author, Company:   Alden Hart, Luke's Lights
                      00008 ;    Date/Time/Rev:     091015
                      00009 ;
                      00010 ; This file must be the first include file in each .asm file
                      00011 ; Set this file up first
                      00012 
                      00013 ;----- Include file definitions ------
                      00014 ;
                      00015 ; All ASM files must have this set of includes in this order:
                      00016 ;#include <global.inc>                  ; 1: global defines - must be first
                      00017 ;#include <DEV_INCLUDE_FILE>            ; 2: Our device include file
                      00018 ;#include <LED_INCLUDE_FILE>            ; 3: LED subsystem include file
                      00019 ;#include <APP_INCLUDE_FILE>            ; 4: Application include file
                      00020 ;
                      00021 ; Which are set up here:
                      00022 #define DEV_INCLUDE_FILE d18f4520.inc   ; device header file
                      00023 #define LED_INCLUDE_FILE led.inc        ; led sub-system header file
                      00024 #define APP_INCLUDE_FILE wClock.inc     ; application header file
                      00025 
                      00026 ;----- Fundamental definitions ------
                      00027 
  00000001            00028 TRUE            equ     1       ; must equal 1 - do not re-assign
  00000000            00029 FALSE           equ     0       ; must equal 0 - do not re-assign
  00000001            00030 ON              equ     1
  00000000            00031 OFF             equ     0
                      00032 
                      00033 ;---- Global error return codes ----
                      00034 
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000000            00035 ERR_NO_ERROR            equ     .00     ; not actually an error, probably an end
  00000001            00036 ERR_BAD_COMMAND         equ     .01     ; invalid command value
  00000002            00037 ERR_BAD_CHANNEL         equ     .02     ; invalid channel number or encoded channel
  00000003            00038 ERR_BAD_ARGNUM          equ     .03     ; invalid argument number
  00000004            00039 ERR_BAD_OPCODE          equ     .04     ; invalid argument opcode
  00000005            00040 ERR_CMD_LOADER_FAILED   equ     .05     ; command loader failed in cmd module
  00000006            00041 ERR_GET_COMMAND_FAILED  equ     .06     ; get_command failed in presets module
  00000007            00042 ERR_GET_NEXT_CMD_FAILED equ     .07     ; get_next failed in presets module
                      00043 
                      00044 ;---- Handy global macros ----
                      00045 
                      00046 ;---- Handy macro to set a 16 bit pointer to a literal address
                      00047 
                      00048 setptr  macro   ADDRESS, ptr_hi, ptr_lo
                      00049         movlw   HIGH ADDRESS
                      00050         movwf   ptr_hi
                      00051         movlw   LOW ADDRESS
                      00052         movwf   ptr_lo
                      00053         endm
                      00054 
                      00055 ;---- Handy macro to set table pointer to an address
                      00056 
                      00057 tbladdr macro   ADDRESS
                      00058         movlw   HIGH ADDRESS
                      00059         movwf   TBLPTRH
                      00060         movlw   LOW ADDRESS
                      00061         movwf   TBLPTRL
                      00062         endm
                      00063 
                      00064 ;---- Handy macro to set table pointer to an address indexed by a second value
                      00065 
                      00066 tblindx macro   ADDRESS, index  ; index is a mem variable name, not a literal
                      00067         movlw   high ADDRESS
                      00068         movwf   TBLPTRH
                      00069         movlw   low ADDRESS
                      00070         movwf   TBLPTRL
                      00071         rlncf   index,W                 ; multiply index value by 2
                      00072         addwf   TBLPTRL
                      00073         movlw   0                       ; propagate carry (if any)
                      00074         addwfc  TBLPTRH
                      00075         endm
                      00076 
                      00077 ;---- Handy macro to read a 16 bitvalue from a table into a pointer
                      00078 ;     Usually follows tbladdr or tblindx
                      00079 ;     Leaves table pointer to next location
                      00080 
                      00081 tblread macro   ptr_hi, ptr_lo          ; hi and lo registers for table read
                      00082         tblrd*+
                      00083         movff   TABLAT,ptr_lo           ; DATA statements are lo/hi endian
                      00084         tblrd*+
                      00085         movff   TABLAT,ptr_hi
                      00086         endm
                      00087 
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00088 ;---- SWITCH statement macro (jump through a vector table) ----
                      00089 ; OK, it's not REALLY a switch/case statement - ot works differently than C
                      00090 ;
                      00091 ; Calling convention is:
                      00092 ;
                      00093 ;       rlncf   cmd_command,W           ; load table index x2 into W
                      00094 ;       switch                          ; call the macro
                      00095 ;       data    CL_ERROR                ; table index 0
                      00096 ;       data    CL_LOAD_SET_HSB         ; table index 1 (etc).
                      00097 ;       data    CL_LOAD_SET_RGB
                      00098 ;       data    CL_LOAD_PATCH
                      00099 ;       data    CL_LOAD_FADE
                      00100 ;       data    CL_LOAD_WATCH           ; max index. not range checked.
                      00101 ;
                      00102 ; You must also include the following lines in any file but the main:
                      00103 ;
                      00104 ;       extern  tblptrh_temp
                      00105 ;       extern  tblptrl_temp
                      00106 ;
                      00107 ; CONSTRAINTS:
                      00108 ;       W must contain the table index multipled by 2 prior to invoking switch
                      00109 ;       The macro must be followed by the actual jump table as illustrated above.
                      00110 ;       The first element in the jump table must be index zero (0)
                      00111 ;       Tables are limited to 128 entries or you must change case for 16-bit math
                      00112 ;       The macro does not check that the index is in range for the table...
                      00113 ;       ...presumably this is validated by an upstream data validation checker.
                      00114 ;
                      00115 ; This macro is not nearly as code efficient as a computed BRA (below), but  
                      00116 ; doesn't break if it crosses on page boundaries:
                      00117 ;
                      00118 ;       movlw   HIGH jump
                      00119 ;       movwf   PCLATH
                      00120 ;       rlncf   index,W                 ; get command code x2 into W...
                      00121 ;       addlw   LOW jump                ;...this only works with BRAs 
                      00122 ;       movwf   PCL                     ;...GOTOs require x4
                      00123 ;jump   bra     CL_ERROR
                      00124 ;       bra     CL_LOAD_SET_HSB
                      00125 ;       bra     CL_LOAD_SET_RGB
                      00126 ;       bra     CL_LOAD_PATCH
                      00127 ;       bra     CL_LOAD_FADE
                      00128 ;       bra     CL_LOAD_WATCH
                      00129 
                      00130 switch  macro
                      00131         local   table_base
                      00132         movff   TBLPTRH,temp_tblptrh    ; save current table pointer
                      00133         movff   TBLPTRL,temp_tblptrl
                      00134 
                      00135         addlw   LOW table_base          ; add index (W) to table base
                      00136         movwf   TBLPTRL                 ; set low pointer
                      00137         movlw   HIGH table_base
                      00138         movwf   TBLPTRH
                      00139         btfsc   STATUS,C                ; propagate the carry from the add
                      00140         incf    TBLPTRH,F
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00141 
                      00142         tblrd*+                         ; read and save vector address lo byte
                      00143         movf    TABLAT,W
                      00144         tblrd*                          ; read and save vector address hi byte
                      00145         movff   TABLAT,PCLATH
                      00146 
                      00147         movff   temp_tblptrh,TBLPTRH    ; restore calling table pointer
                      00148         movff   temp_tblptrl,TBLPTRL
                      00149 
                      00150         movwf   PCL                     ; jump to case routine
                      00151 table_base
                      00152         endm
                      00153 
                      00020 #include <DEV_INCLUDE_FILE>             ; 2: Our device include file
                      00001 ;*****************************************************************************
                      00002 ; d18f2520 - device header file
                      00003 ;*****************************************************************************
                      00004 ;
                      00005 ;    Filename:          d18f4520.inc
                      00006 ;    Author, Company:   Alden Hart, Luke's Lights
                      00007 ;    Date/Time/Rev:     091015
                      00008 ;
                      00009 ; Choses device and sets basic parameters related to the device and it's 
                      00010 ; use in this application
                      00011 ; 
                      00012 
                      00013 ;----- Common, device-specific definitions -----
                      00014 
  00000018            00015 DEV_FAMILY      equ     18              ; for F18 series
  00000024            00016 FOSC            equ     .36             ; MHz (approximate and must be tested)
                      00017 
                      00018 ; Used to qualify instructions:
  00000000            00019 A       equ     0                       ; Access Bank
  00000001            00020 B       equ     1                       ; BSR banked
                      00021 
                      00022 ;------ Select Device -----
                      00023 ; pick only one:
                      00024 ;DEVTYPE  equ   2420            ; 18F2420
                      00025 ;DEVTYPE  equ   2520            ; 18F2520
  00004420            00026 DEVTYPE  equ    4420            ; 18F4420
                      00027 ;DEVTYPE  equ   4520            ; 18F4520
                      00028 
                      00029 ; PIC18F2420
                      00030     if DEVTYPE == 2420
                      00031         nolist
                      00032 #include <p18f2420.inc>
                      00033         list
                      00034 ;       list    p=18f2420               ; not needed - processor is set by MPLAB
                      00035 MAXRAM  equ     0x02FF
                      00036     endif
                      00037 
                      00038 ;PIC18F2520
                      00039     if DEVTYPE == 2520
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00040         nolist
                      00041 #include <p18f2520.inc>
                      00042         list
                      00043 ;       list    p=18f2520               ; not needed - processor is set by MPLAB
                      00044 MAXRAM  equ     0x05FF
                      00045     endif
                      00046 
                      00047 ;PIC18F4420
                      00048     if DEVTYPE == 4420
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC18F4420 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2007 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      01293         LIST
                      00051         list
                      00052 ;       list    p=18f4420               ; not needed - processor is set by MPLAB
  000002FF            00053 MAXRAM  equ     0x02FF
                      00054     endif
                      00055 
                      00056 ;PIC18F4520
                      00057     if DEVTYPE == 4520
                      00058         nolist
                      00059 #include <p18f4520.inc>
                      00060         list
                      00061 ;       list    p=18f4520               ; not needed - processor is set by MPLAB
                      00062 MAXRAM  equ     0x05FF
                      00063     endif
                      00021 #include <LED_INCLUDE_FILE>             ; 3: LED subsystem include file
                      00001 ;*****************************************************************************
                      00002 ; PIC18F family - LED subsystem include file
                      00003 ;*****************************************************************************
                      00004 ;*****************************************************************************
                      00005 ;
                      00006 ;    Filename:          led.inc
                      00007 ;    Author, Company:   Alden Hart, Luke's Lights
                      00008 ;    Chip Support:      Supports PIC18F family
                      00009 ;    Revision:          091015
                      00010 ;
                      00011 ;    This file basically serves as documentation for creating cues and playback
                      00012 ;
                      00013 ;*****************************************************************************
                      00014 ; CUES AND PLAYBACK
                      00015 ; 
                      00016 ; PLAY_INIT               Init playlist/cue module and load first playlist/cue
                      00017 ; PLAY_GET_NEXT_PLAYLIST  Return ptr to next playlist in playlist master table
                      00018 ; PLAY_GET_PREV_PLAYLIST  Return ptr to previous playlist in playlist master table
                      00019 ; PLAY_START_PLAYIST      Start a playlist from playlist ptr (becomes active playlist)
                      00020 ; PLAY_RUN_NEXT_CUE       Run next cue in active playlist
                      00021 ;         
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00022 ; CUE_LOAD_CUE            Load an entire cue
                      00023 ; CUE_GET_NEXT_COMMAND    Iterator used for for loading an entire cue
                      00024 ; CUE_GET_COMMAND         Load a single command from cue (into FDR_LOADER buffer)
                      00025 ; CUE_SET_ARGUMENT        Load an argument into arg table
                      00026 ; CUE_GET_ARGUMENT        Get an argument from arg table
                      00027 ;
                      00028 ; CUES
                      00029 ;
                      00030 ; A CUE is a set of COMMANDS that run as a unit to load the state of the 
                      00031 ; lighting system. A cue takes data from program memory and loads the commands
                      00032 ; in to the FADER tables (there are some exceptions).
                      00033 ;
                      00034 ; For example, if you wanted to load 8 different hue waveforms, set 
                      00035 ; saturations to 8 different static levels, and PATCH all brightnesses to a 
                      00036 ; master channel, this could be done using a cue. 
                      00037 ;
                      00038 ; The challenge is to define (and encode) complex cues in a way that's both 
                      00039 ; simple to understand and program and is also relatively memory efficicient. 
                      00040 ; The above example would take about ~200 bytes if performed as a simple set of 
                      00041 ; commands. Using the cue tools for definition and encoding this same 
                      00042 ; operation could be encoded in as little as ~20 bytes.
                      00043 ;
                      00044 ; To do this, a series of other operations is supported for cues:
                      00045 ; 
                      00046 ;       - CUE_CMD               load a regular command from pgm memory to RAM
                      00047 ;       - CUE_ARG               load an argument structure into an arg cell
                      00048 ;       - CUE_LOOP              load the next command N times           
                      00049 ;       - CUE_LOOP_BLOCK        loop until END_ADDR, N times, starting at START_ADDR
                      00050 ;       - CUE_JUMP              jump to JUMP_ADDR
                      00051 ;       - CUE_DONE              end of cue or playback
                      00052 ;       - CUE_CODA              start queue over
                      00053 ;
                      00054 ; Details of the above operations are littered throughout the headers in this
                      00055 ; file. Summaries of the cue operations are provided below;
                      00056 ;
                      00057 ; CUE_CMD:      CUE_CMD, cmd, argmask, arg0....argN
                      00058 ;
                      00059 ; Action is to load the command into RAM - similarly to if the command was 
                      00060 ; received in a serial RX buffer. Contains a command code followed by a 
                      00061 ; bitmask specifying which args in the command are to be read lterally from 
                      00062 ; the command line and which args are to be loaded from the argument cells. 
                      00063 ; The argmask is one byte long except in the case of the FADE command where 
                      00064 ; it is 2 bytes. See CUE_LOAD_COMMAND for details.
                      00065 ; 
                      00066 ; CUE_ARG:      CUE_ARG, argnum, opcode, var1, [var2], [var3]
                      00067 ;
                      00068 ; Action is to initialize one of the argument cells with an opcode and one or
                      00069 ; more starting values (vars). Consists of a CUE_ARG byte and 3 - 5 data
                      00070 ; bytes. Arguments can increment, decrement, add, and do other things between
                      00071 ; command calls that allow common commands to be set up generically.
                      00072 ; See CUE_LOAD_ARGUMENT for details.
                      00073 ;
                      00074 ; CUE_LOOP:             CUE_LOOP, repeat_count
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00075 ;
                      00076 ; Action is to run the next command N times. The next table entry must be a 
                      00077 ; command.
                      00078 ;
                      00079 ; CUE_LOOP_BLOCK:       CUE_LOOP_BLOCK, repeat_count, start_address
                      00080 ;
                      00081 ; Action is to loop N times between the start address and CUE_DONE (the 
                      00082 ; "looping block"). CUE execution continues on the next line after the 
                      00083 ; CUE_LOOP_BLOCK command once the loop is complete.
                      00084 ;
                      00085 ; This command is useful to iterate through a series of channels with 
                      00086 ; parameters that vary based on the number of times an arg is used. Typically 
                      00087 ; a set of CUE_ARGS is setup before calling the block. This is useful to 
                      00088 ; create "subroutines" of commonly used preset operations. This command 
                      00089 ; DOES NOT nest and cannot be called recursively (sorry!).
                      00090 ;
                      00091 ; CUE_JUMP:             CUE_JUMP, jump_address
                      00092 ;
                      00093 ; Action is to transfer cue exeution to a new address, from which execution
                      00094 ; will not return. Any number of jumps may be chained. Useful for "finishing up"
                      00095 ; with common code.
                      00096 ;
                      00097 ; CUE_DONE:             CUE_DONE <no parameters>
                      00098 ;
                      00099 ; Signals the end of a cue block (see above descriptions). If found in 
                      00100 ; the main body of the called cue, it terminates the interpretation of the 
                      00101 ; cue and returns control to the caller. If found in a LOOP is terminates
                      00102 ; that iteration of the loop and returns control to the cue line that 
                      00103 ; called the loop.
                      00104 ; 
                      00105 ; 
                      00106 ; RESOURCE USAGE:
                      00107 ; - The PLAYBACK sub-system uses FSR1 as its primary pointer, FSR2 as secondary. 
                      00108 ; - Does not use FSR0 as this is reserved for interrupts.
                      00109 ; - The ARG table takes 128 bytes of RAM to store 32 arguments.
                      00110 ; - Routines follow the convnetion of returning Z bit set for OK, or to indicate
                      00111 ;   the further processing is required.
                      00112 
                      00113 ;----- Circuit and Command Processing Definitions ----
                      00114 ; See Ckt Mapping tab of spreadsheet for further documentation
                      00115 
  0000000D            00116 FDR_TABLE_LEN           equ     .13     ; bytes allocated per fader table
  00000015            00117 CHN_NUM_MAX             equ     .21     ; number of color or mono channels (zero based)
  0000001D            00118 CKT_NUM_MAX             equ     .29     ; maximum encoded circuit number (zero based)
  00000005            00119 CKT_TABLE_INCREMENT     equ     .5      ; number of ports being serviced
  00000027            00120 CKT_TABLE_LEN           equ     .39     ; circuit table is 5 ports * 8 bits (zero based)
                      00121 
  00000F80            00122 switch01p               equ     PORTA
  00000000            00123 switch01b               equ     .0
                      00124 
  00000001            00125 MONOCHROME_MODE         equ     TRUE    ; set TRUE if running monochrome, FALSE for color
                      00126 
                      00127 ; not used in monochrome mode apps
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000000            00128 RED_OFFSET              equ     0       ; table offsets
  00000001            00129 GRN_OFFSET              equ     1
  00000002            00130 BLU_OFFSET              equ     2
  00000003            00131 EXT_OFFSET              equ     3       ; offset for extra channel
  00000000            00132 HUE_OFFSET              equ     0
  00000001            00133 SAT_OFFSET              equ     1
  00000002            00134 BRT_OFFSET              equ     2
                      00135 
                      00136 ;---- COMMAND SET ----
                      00137 ; Command set - MSbyte is command code, LSbyte is argument counter
                      00138 ; Adding a command involves:
                      00139 ;  - adding it to this list and adjusting any values
                      00140 ;  - adding it to CMD_LOADER dispatch table (led_fader.asm)
                      00141 ;  - adding it to CMD_VALIDATE_CMDCODE (led_fader.asm)
                      00142 ;  - adding it to CUE_GET_COMMAND (led_cue.asm)
                      00143 
  00000011            00144 SET_BRT                 equ     0x11    ; set BRT for color or monochrome
  00000023            00145 SET_HSB                 equ     0x23    ; set HSB values (color only)
  00000033            00146 SET_RGB                 equ     0x33    ; set RGB values (color only)
  00000041            00147 PATCH                   equ     0x41    ; PATCH command
  00000056            00148 FADE                    equ     0x56    ; FADE command args up through OFF
  00000057            00149 FADE_REPEAT             equ     0x57    ; FADE command args up through REPEAT 
  00000058            00150 FADE_MIN                equ     0x58    ; FADE command args up through MIN
  00000059            00151 FADE_MAX                equ     0x59    ; FADE command args up through MAX
  0000005A            00152 FADE_X                  equ     0x5A    ; FADE command args up through XFADE
  00000060            00153 WATCH                   equ     0x60    ; WATCH command - takes one arg (0)
                      00154 
  000000FF            00155 NOW                     equ     0xFF    ; WATCH command value - load now
  000000FE            00156 NEVER                   equ     0xFE    ; WATCH command value - never load
                      00157 
                      00158 ;---- Cue command line templates (very useful) ----
                      00159 ; SET_HSB       CUE_CMD  CMD_SET_HSB  mask  chn  hue   sat   brt        
                      00160 ; PATCH         CUE_CMD  CMD_PATCH  mask   slave_ckt     master_ckt
                      00161 ; FADE_46       CUE_CMD CMD_FADE  mask  ckt_num     presc  dly   up   on  down off      
                      00162 
                      00163 ;---- CUE AND PLAYBACK EQUATES ----
                      00164 
  00000000            00165 ARG_NUM_MAX             equ     .0      ; maximum argument number (zero is a valid #)
                      00166                                         ; each arg takes 4 bytes of RAM
  00000000            00167 ARG_HI_FLAG             equ     .0      ; bit to set and test for hi args (>7)
                      00168 
  00000000            00169 CUE_DONE                equ     .00     ; should be zero
  00000001            00170 CUE_CMD                 equ     .01     ; prefix for a command
  00000002            00171 CUE_ARG                 equ     .02     ; prefix for an argument
  00000003            00172 CUE_LOOP                equ     .03
  00000004            00173 CUE_LOOP_BLOCK          equ     .04
  00000005            00174 CUE_JUMP                equ     .05
  00000005            00175 CUE_MAX                 equ     .05     ; maximum allowable cmd instruction value
                      00176 
                      00177 ; MSbyte of these PLAYLIST_xxxx values must be zero:
  00000000            00178 PLAYLIST_DONE           equ     0x0000  ; requries a 16 bit value
  00000001            00179 PLAYLIST_CODA           equ     0x0001
                      00180 
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00181 ;---- Argument OPCODE definitions ----
                      00182 ;
                      00183 ; Command arguments (args) are 4 byte structures that perform substitutions 
                      00184 ; for command variables during command loads. Args can perform literal 
                      00185 ; substitution for variables or a variety of simple math functions. Structure:
                      00186 ;
                      00187 ;       - Arg number    args number 0 - N. Implicit based on location in table
                      00188 ;       - Opcode        operation to perform during argument substitution
                      00189 ;       - Operand1      (op1) first operand interprested by opcode
                      00190 ;       - Operand2      (op2) second operand interprested by opcode
                      00191 ;       - Operand3      (op3) thirg operand interprested by opcode
                      00192 ;
                      00193 ; op2(op1) means use the value of op1 found at the argnum provided in op2
                      00194 ;   an arg error returns the value of zero.
                      00195 ;
                      00196 ; opcode            op1    op2    op3   usage
                      00197 ; OP_LIT            value  ---    ---   ; use op1 as literal value
                      00198 ; OP_INC            start  ---    ---   ; use op1, post increment & store in op1
                      00199 ; OP_INC_RANGE      start  max    min   ; inc by 1 [op2=max, op3=min], store in op1
                      00200 ; OP_INCX2_RANGE    start  max    min   ; inc by 2 [op2=max, op3=min], store in op1
                      00201 ; OP_INCX3_RANGE    start  max    min   ; inc by 3 [op2=max, op3=min], store in op1
                      00202 ; OP_INCX4_RANGE    start  max    min   ; inc by 4 [op2=max, op3=min], store in op1
                      00203 ; OP_DEC            start  ---    ---   ; use op1, post decrement & store in op1
                      00204 ; OP_DEC_RANGE      start  max    min   ; dec by 1 [op2=max, op3=min], store in op1
                      00205 ; OP_DECX2_RANGE    start  max    min   ; dec by 2 [op2=max, op3=min], store in op1
                      00206 ; OP_DECX3_RANGE    start  max    min   ; dec by 3 [op2=max, op3=min], store in op1
                      00207 ; OP_DECX4_RANGE    start  max    min   ; dec by 4 [op2=max, op3=min], store in op1
                      00208 ; OP_ADD            start  add    ---   ; (op1+op2), save result in op1
                      00209 ; OP_ADD_AND        start  add    and   ; (op1+op2), AND with op3, do not save result
                      00210 ; OP_ADD_AND_SAVE   start  add    and   ; (op1+op2), AND with op3l, save result in op1
                      00211 ; OP_ADD_IND        start  ind    ---   ; (op1+op2(op1)), do not save result
                      00212 ; OP_ADD_IND_SAVE   start  ind    ---   ; (op1+op2(op1)), save result in op1
                      00213 ; OP_ADD_IND_AND    start  ind    and   ; (op1+op2(op1)), AND with op3, do not save
                      00214 ; OP_ADD_IND_AND_SAVE srt  ind    and   ; (op1+op2(op1)), AND with op3, save in op1
                      00215 ; OP_SUB            start  sub    ---   ; (op1-op2), save result in op1
                      00216 ; OP_SUB_AND        start  sub    and   ; (op1-op2), AND with op3, do not save result
                      00217 ; OP_SUB_AND_SAVE   start  sub    and   ; (op1-op2), AND with op3, save in op1
                      00218 ; OP_SUB_IND        start  ind    ---   ; (op1-op2(op1)), do not save result
                      00219 ; OP_SUB_IND_SAVE   start  ind    ---   ; (op1-op2(op1)), save result in op1
                      00220 ; OP_SUB_IND_AND    start  ind    and   ; (op1-op2(op1)), AND with op3, do not save
                      00221 ; OP_SUB_IND_AND_SAVE srt  ind    and   ; (op1-op2(op1)), AND with op3, save in op1
                      00222 ; OP_RAND           seed   ---    ---   ; pseudo-random#, op1=seed, update seed
                      00223 ; OP_RAND_RANGE     seed   max    min   ; pseudo-random# [op2=max, op3=min], op1=seed
                      00224 
                      00225 ; actual definitions used by the code:
                      00226 
  00000000            00227 OP_LIT                  equ     .00     ; use op1 as literal value
  00000001            00228 OP_INC                  equ     .01     ; use op1, post increment & store in op1
  00000002            00229 OP_INC_RANGE            equ     .02     ; inc by 1 [op2=max, op3=min], store in op1
  00000003            00230 OP_INCX2_RANGE          equ     .03     ; inc by 2 [op2=max, op3=min], store in op1
  00000004            00231 OP_INCX3_RANGE          equ     .04     ; inc by 3 [op2=max, op3=min], store in op1
  00000005            00232 OP_INCX4_RANGE          equ     .05     ; inc by 4 [op2=max, op3=min], store in op1
  00000006            00233 OP_DEC                  equ     .06     ; use op1, post decrement & store in op1
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000007            00234 OP_DEC_RANGE            equ     .07     ; dec by 1 [op2=max, op3=min], store in op1
  00000008            00235 OP_DECX2_RANGE          equ     .08     ; dec by 2 [op2=max, op3=min], store in op1
  00000009            00236 OP_DECX3_RANGE          equ     .09     ; dec by 3 [op2=max, op3=min], store in op1
  0000000A            00237 OP_DECX4_RANGE          equ     .10     ; dec by 4 [op2=max, op3=min], store in op1
  0000000B            00238 OP_ADD                  equ     .11     ; (op1+op2), save result in op1
  0000000C            00239 OP_ADD_AND              equ     .12     ; (op1+op2), AND with op3, do not save result
  0000000D            00240 OP_ADD_AND_SAVE         equ     .13     ; (op1+op2), AND with op3l, save result in op1
  0000000E            00241 OP_ADD_IND              equ     .14     ; (op1+op2(op1)), do not save result
  0000000F            00242 OP_ADD_IND_SAVE         equ     .15     ; (op1+op2(op1)), save result in op1
  00000010            00243 OP_ADD_IND_AND          equ     .16     ; (op1+op2(op1)), AND with op3, do not save
  00000011            00244 OP_ADD_IND_AND_SAVE     equ     .17     ; (op1+op2(op1)), AND with op3, save in op1
  00000012            00245 OP_SUB                  equ     .18     ; (op1-op2), save result in op1
  00000013            00246 OP_SUB_AND              equ     .19     ; (op1-op2), AND with op3, do not save result
  00000014            00247 OP_SUB_AND_SAVE         equ     .20     ; (op1-op2), AND with op3, save in op1
  00000015            00248 OP_SUB_IND              equ     .21     ; (op1-op2(op1)), do not save result
  00000016            00249 OP_SUB_IND_SAVE         equ     .22     ; (op1-op2(op1)), save result in op1
  00000017            00250 OP_SUB_IND_AND          equ     .23     ; (op1-op2(op1)), AND with op3, do not save
  00000018            00251 OP_SUB_IND_AND_SAVE     equ     .24     ; (op1-op2(op1)), AND with op3, save in op1
  00000019            00252 OP_RAND                 equ     .25     ; pseudo-random#, op1=seed, update seed
  0000001A            00253 OP_RAND_RANGE           equ     .26     ; pseudo-random# [op2=max, op3=min], op1=seed
  0000001A            00254 OP_OPCODE_MAX           equ     .26     ; MAXIMUM LEGAL OPCODE VALUE
                      00255 
                      00256 
                      00257 ;--- SOME USEFUL SHORTHAND ----
                      00258 
  00000000            00259 HUE     equ     HUE_OFFSET
  00000001            00260 SAT     equ     SAT_OFFSET
  00000002            00261 BRT     equ     BRT_OFFSET
                      00262 
                      00263 ; Colors (applies to HUE)
                      00264 
  00000000            00265 RED     equ     0x00                    ; red
  00000015            00266 ORN     equ     0x15                    ; orange
  0000002A            00267 YEL     equ     0x2A                    ; yellow
  00000055            00268 GRN     equ     0x55                    ; green
  0000007F            00269 CYN     equ     0x7F                    ; cyan
  000000AB            00270 BLU     equ     0xAB                    ; blue
  000000D5            00271 MAG     equ     0xD5                    ; magenta
  000000D5            00272 VIO     equ     MAG                     ; violet = magenta
                      00273 
                      00274 ; Channel specifiers with the 2 left shifts:
  00000000            00275 c00     equ     .00 <<2
  00000004            00276 c01     equ     .01 <<2
  00000008            00277 c02     equ     .02 <<2
  0000000C            00278 c03     equ     .03 <<2
  00000010            00279 c04     equ     .04 <<2
  00000014            00280 c05     equ     .05 <<2
  00000018            00281 c06     equ     .06 <<2
  0000001C            00282 c07     equ     .07 <<2
  00000020            00283 c08     equ     .08 <<2
  00000024            00284 c09     equ     .09 <<2
  00000028            00285 c10     equ     .10 <<2
  0000002C            00286 c11     equ     .11 <<2
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000030            00287 c12     equ     .12 <<2
  00000034            00288 c13     equ     .13 <<2
  00000038            00289 c14     equ     .14 <<2
  0000003C            00290 c15     equ     .15 <<2
  00000040            00291 c16     equ     .16 <<2
  00000044            00292 c17     equ     .17 <<2
  00000048            00293 c18     equ     .18 <<2
  0000004C            00294 c19     equ     .19 <<2
  00000050            00295 c20     equ     .20 <<2
  00000054            00296 c21     equ     .21 <<2
  00000058            00297 c22     equ     .22 <<2
  0000005C            00298 c23     equ     .23 <<2
  00000060            00299 c24     equ     .24 <<2
  00000064            00300 c25     equ     .25 <<2
  00000068            00301 c26     equ     .26 <<2
  0000006C            00302 c27     equ     .27 <<2
  00000070            00303 c28     equ     .28 <<2
  00000074            00304 c29     equ     .29 <<2
  00000078            00305 c30     equ     .30 <<2
  0000007C            00306 c31     equ     .31 <<2
  00000080            00307 c32     equ     .32 <<2
  00000084            00308 c33     equ     .33 <<2
  00000088            00309 c34     equ     .34 <<2
  0000008C            00310 c35     equ     .35 <<2
  00000090            00311 c36     equ     .36 <<2
  00000094            00312 c37     equ     .37 <<2
  00000098            00313 c38     equ     .38 <<2
  0000009C            00314 c39     equ     .39 <<2
  000000A0            00315 c40     equ     .40 <<2
  000000A4            00316 c41     equ     .41 <<2
  000000A8            00317 c42     equ     .42 <<2
  000000AC            00318 c43     equ     .43 <<2
  000000B0            00319 c44     equ     .44 <<2
  000000B4            00320 c45     equ     .45 <<2
  000000B8            00321 c46     equ     .46 <<2
  000000BC            00322 c47     equ     .47 <<2
  000000C0            00323 c48     equ     .48 <<2
  000000C4            00324 c49     equ     .49 <<2
  000000C8            00325 c50     equ     .50 <<2
  000000CC            00326 c51     equ     .51 <<2
  000000D0            00327 c52     equ     .52 <<2
  000000D4            00328 c53     equ     .53 <<2
  000000D8            00329 c54     equ     .54 <<2
  000000DC            00330 c55     equ     .55 <<2
  000000E0            00331 c56     equ     .56 <<2
  000000E4            00332 c57     equ     .57 <<2
  000000E8            00333 c58     equ     .58 <<2
  000000EC            00334 c59     equ     .59 <<2
  000000F0            00335 c60     equ     .60 <<2
  000000F4            00336 c61     equ     .61 <<2
  000000F8            00337 c62     equ     .62 <<2
  000000FC            00338 c63     equ     .63 <<2
                      00339 
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00340         
                      00022 #include <APP_INCLUDE_FILE>             ; 4: Application include file
                      00001 ;*****************************************************************************
                      00002 ; wClock - common header file
                      00003 ;*****************************************************************************
                      00004 ;
                      00005 ;    Filename:          wClock.inc
                      00006 ;    Author, Company:   Alden Hart, Luke's Lights
                      00007 ;    Date/Time/Rev:     091015
                      00008 ;
                      00009 ;    'sproke notes: If shit breaks, look in the following places:
                      00010 ;       - test ISR dispatcher for not crossing a page boundary
                      00011 ;       - look for all occurrences of "HACK HACK"
                      00012 
                      00013 ;------ Application Switches -----      
                      00014 ; The default initialization routines are provided in the device file: d18fxxxx.asm
                      00015 ; Setting an _EXTERNAL switch TRUE will use an init located in some other file.
                      00016 ; You must also set up an extern in the d18fxxxx.asm file and a global in the 
                      00017 ; target application file to override the default init.
                      00018 
  00000001            00019 INIT_PORTS_EXTERNAL     equ     TRUE    ; set true to use an external init routine
  00000001            00020 INIT_T0_EXTERNAL        equ     TRUE    ; uses the one in wClock.asm
  00000001            00021 INIT_T1_EXTERNAL        equ     TRUE    ; uses the one in led_ckt4520.asm
  00000001            00022 INIT_WATCHDOG_TIMER     equ     TRUE    ; set if WDT enabled. See WDT_INIT
                      00023 
                      00024 ;----- Assembly-Time Switches ------
                      00025 
  00000000            00026 RX_ENABLED              equ     FALSE   ; enable RX ISR processing
  00000000            00027 ICD_ENABLED             equ     FALSE   ; enable ICD2 debugging
  00000001            00028 UNITS_ENABLED           equ     TRUE    ; enable unit tests
  00000001            00029 DIAGNOSTICS_ENABLED     equ     TRUE    ; takes up space and time
                      00030 
  00000BDC            00031 CLK_TIMER               equ     0x0BDC  ; value for prescale 128 (rev 1)
                      00032 ;CLK_TIMER              equ     0xC000  ; TEST value for prescale 128
                      00033 
                      00034 ;----- switch port assignments and equates
                      00035 
  00000008            00036 SW_DEBOUNCE_MAX         equ     .8      ; # of 6.66 ms cycles to debounce switch
  0000003C            00037 SW_HELD_COUNT           equ     .60     ; # of 6.66 ms increments before advance
  00000000            00038 SW_STATE_ON_bp          equ     .00     ; 1=switch is on  0=switch is off
  00000001            00039 SW_STATE_RISING_bp      equ     .01     ; rising edge (this state can be removed)
  00000002            00040 SW_STATE_FALLING_bp     equ     .02     ; falling edge (this state can be removed)
                      00041 
                      00042 ;----- Table program memory allocation -----
                      00043 ; The following  tables must be aligned on a 0x100 page boundary
                      00044 ; Look at the eFruit.map file for optimal placement
                      00045 
  00002000            00046 BASE_OF_TABLES          equ     0x2000
  00000600            00047 HSB_TABLES_LEN          equ     0x600
                      00048 ;HSB_TABLES_LEN         equ     0x00
                      00049 
  00002000            00050 HSB_TABLES_START        equ     BASE_OF_TABLES
  00002600            00051 CUE_TABLES_START        equ     HSB_TABLES_START + HSB_TABLES_LEN 
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00052 ; Cue tables can use the rest of program memory if they need to, and should be last
                      00053 
                      00054 ;--- Flag values for app_flags ----
                      00055 ; Notes on TIME bits:
                      00056 ; - TIME_5MS is an approximate flag set by cycle processing (for switch timing)
                      00057 ; - The other TIME flags are managed by CLK_IRQ
                      00058 
  00000000            00059 DIRTY_BIT               equ     0       ; set to signal new dimmer value
  00000001            00060 CYCLE_START_FLAG        equ     1       ; set once per cycle during BAM interval
  00000002            00061 SWITCH_READ_FLAG        equ     2       ; is set approx every 6 ms
  00000003            00062 SECOND_FLAG             equ     3       ; is set every second (exactly)
                      00063 
                      00064 ;---- Word to channel mapping ----
                      00065 
  00000000            00066 ITS             equ     .0              ; Channel 0 is "IT'S"
  00000001            00067 HALF            equ     .1
  00000002            00068 TEN_            equ     .2              ; differentiate from hour TEN
  00000003            00069 QUARTER         equ     .3
  00000004            00070 TWENTY          equ     .4
  00000005            00071 FIVE_           equ     .5              ; differentiate from hour FIVE
  00000006            00072 MINUTES         equ     .6
  00000007            00073 PAST            equ     .7
  00000008            00074 TO_             equ     .8              ; must have an underscore
  00000009            00075 ONE             equ     .9
  0000000A            00076 TWO             equ     .10
  0000000B            00077 THREE           equ     .11
  0000000C            00078 FOUR            equ     .12
  0000000D            00079 FIVE            equ     .13
  0000000E            00080 SIX             equ     .14
  0000000F            00081 SEVEN           equ     .15
  00000010            00082 EIGHT           equ     .16
  00000011            00083 NINE            equ     .17
  00000012            00084 TEN             equ     .18
  00000013            00085 ELEVEN          equ     .19
  00000014            00086 TWELVE          equ     .20
  00000015            00087 OCLOCK          equ     .21
                      00088 ;PLUS_1         equ     .22
                      00089 ;PLUS_2         equ     .23
                      00090 ;PLUS_3         equ     .24
                      00091 ;PLUS_4         equ     .25
                      00023 
                      00024 ;------ Exports (globals) -----
                      00025 
  0000                00026         global  fdr_level               ; finishing level of fade
  0000                00027         global  FDR_DISPATCH            ; dispatch a command
  0000                00028         global  FDR_TEST_FDR_DONE       ; return Z=1 if fader is done or inactive
                      00029 
  0000                00030         global  cmd_buffer              ; command input buffer
  0000                00031         global  CMD_LOADER              ; load input buffer into fader table
  0000                00032         global  CMD_VALIDATE_CMDCODE    ; validate command code
                      00033 
  0000                00034         global  UT_CMD                  ; command unit tests
                      00035 
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00036 ;----- External variables and FUNCTIONS -----
                      00037 
  0000                00038         extern  chn_num
  0000                00039         extern  ckt_num
  0000                00040         extern  app_flags
  0000                00041         extern  cycle_prescale
  0000                00042         extern  cue_watch
  0000                00043         extern  temp_tblptrh
  0000                00044         extern  temp_tblptrl
                      00045 
  0000000E            00046 CMD_BUFFER_LEN  equ     .14             ; should be 12.
                      00047 
                      00048 ;---- FADER EQUATES ----
                      00049 ; Fader table indexes (offsets into fader command structure)
                      00050 ; The use of some table entries changes based on fader state, so they overlap
                      00051 ; The code assumes that FDR_STATE, FDR_LEVEL_H and FDR_LEVEL_L are in the 
                      00052 ;    locations and order below. If you change them you must also modify the code.
                      00053 ;    ...big time. Don't do it.
                      00054 
  00000000            00055 FDR_STATE               equ     .00     ; base of table         ; MUST BE IN ORDER
  00000001            00056 FDR_LEVEL_H             equ     .01     ; level hi byte         ; MUST BE IN ORDER
  00000002            00057 FDR_LEVEL_L             equ     .02     ; level lo byte         ; MUST BE IN ORDER
                      00058 
  00000002            00059 FDR_COUNTER             equ     .02     ; counter register
  00000003            00060 FDR_PRESCALE            equ     .03     ; prescaler register    ; MUST BE IN ORDER
  00000004            00061 FDR_UP_INCR_H           equ     .04     ; UP increment hi byte
  00000005            00062 FDR_UP_INCR_L           equ     .05     ; UP increment lo byte
                      00063 
  00000004            00064 FDR_WAIT                equ     .04     ; delay to wait register
  00000005            00065 FDR_XFADE               equ     .05     ; cross fade register
                      00066 
  00000006            00067 FDR_DOWN_DECR_H         equ     .06     ; DOWN decrement hi byte
  00000007            00068 FDR_DOWN_DECR_L         equ     .07     ; DOWN decrement lo byte
                      00069 
  00000006            00070 FDR_UP                  equ     .06     ; initial UP value
  00000007            00071 FDR_DOWN                equ     .07     ; initial DOWN value
  00000008            00072 FDR_DWELL               equ     .08     ; pulse dwell time (on cycles)
  00000009            00073 FDR_OFF                 equ     .09     ; pulse OFF time (off cycles)
  0000000A            00074 FDR_MIN                 equ     .10     ; minimum pulse level
  0000000B            00075 FDR_MAX                 equ     .11     ; maximum pulse level
  0000000C            00076 FDR_REPEAT              equ     .12     ; repeat counter
                      00077 
  00000002            00078 FDR_MASTER_CKT          equ     .02     ; master circuit number
  00000003            00079 FDR_MASTER_PRESCALE     equ     .03     ; master prescaler value
  00000004            00080 FDR_MASTER_L            equ     .04     ; master address lo byte
  00000005            00081 FDR_MASTER_H            equ     .05     ; master address hi byte
                      00082 
  00000002            00083 FDR_DIRTY_FLAG_OFS      equ     .02     ; flag to set dirty bit for set_hsb and set_rgb
                      00084 
  00000001            00085 FDR_PRESCALE_1          equ     .01     ; prescale setting to fire every time
  000000FF            00086 FDR_DIRTY_FLAG          equ     0xFF    ; dirty flag value for set_hsb & set_rgb
                      00087 
                      00088 ; Fader state
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00089 
  00000000            00090 FDR_STATE_DONE          equ     .00     ; facder is done    !!! MUST BE ZERO !!!
  00000000            00091 FDR_STATE_DISABLED      equ     FDR_STATE_DONE  ; alias of DONE
                      00092 
  00000001            00093 FDR_STATE_WAIT          equ     .01     ; pre-execution delay
  00000002            00094 FDR_STATE_XFADE_UP      equ     .02     ; initial cross-fade, up
  00000003            00095 FDR_STATE_XFADE_DOWN    equ     .03     ; initial cross-fade, down
  00000004            00096 FDR_STATE_UP            equ     .04     ; stepping up
  00000005            00097 FDR_STATE_DWELL         equ     .05     ; counting on-time
  00000006            00098 FDR_STATE_DOWN          equ     .06     ; stepping down
  00000007            00099 FDR_STATE_OFF           equ     .07     ; counting off-time
                      00100 
  00000008            00101 FDR_STATE_PATCH         equ     .08     ; patch mode
  00000009            00102 FDR_STATE_SET_HSB       equ     .09     ; set_hsb
  0000000A            00103 FDR_STATE_SET_RGB       equ     .10     ; set_rgb
                      00104 
  0000000A            00105 FDR_STATE_MAX           equ     .10     ; upper range for states
                      00106                                         ; used to test for bad state variable
                      00107 
                      00108 ;------ RAM definitions -----
                      00109 
                      00110 ;##### BANK 0 #####
                      00111 UDATA_BANK_0_ACS        udata_acs       ; linker allocates space in bank 0
                      00112 
                      00113 ;----- Fader and command variables ----
000000                00114 fdr_level               res     1       ; returns LEVEL of fader channel
000001                00115 fdr_temp                res     1       ; general purpose working register
000002                00116 fdr_temp_hi             res     1       ; working storage for HI byte
000003                00117 fdr_temp_lo             res     1       ; working storage for LO byte
000004                00118 fdr_temp_min            res     1       ; working storage for MIN
000005                00119 fdr_temp_max            res     1       ; working storage for MAX
                      00120 ;fdr_save_table_hi      res     1       ; TBLPTR storage for SET_FDR_TABLE_PTR
                      00121 ;fdr_save_table_lo      res     1
                      00122 
000006                00123 cmd_command             res     1       ; fader command byte
000007                00124 cmd_argcount            res     1       ; fader command argument count
000008                00125 cmd_ut_temp             res     1       ; temp for unit tests
                      00126 
000009                00127 cmd_buffer              res     CMD_BUFFER_LEN+1 ; fader command input buffer
                      00128                                 ; can be moved to a hi bank if space is needed
                      00129 
                      00130 ;----- Fader tables -----
                      00131 
                      00132 UDATA_FADER_TABLES_100  udata   0x100
                      00133 
000100                00134 fdr_00  res     FDR_TABLE_LEN
00010D                00135 fdr_01  res     FDR_TABLE_LEN           ; 19 x 13 = 247 bytes
00011A                00136 fdr_02  res     FDR_TABLE_LEN
000127                00137 fdr_03  res     FDR_TABLE_LEN
000134                00138 fdr_04  res     FDR_TABLE_LEN
000141                00139 fdr_05  res     FDR_TABLE_LEN
00014E                00140 fdr_06  res     FDR_TABLE_LEN
00015B                00141 fdr_07  res     FDR_TABLE_LEN
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000168                00142 fdr_08  res     FDR_TABLE_LEN
000175                00143 fdr_09  res     FDR_TABLE_LEN
000182                00144 fdr_10  res     FDR_TABLE_LEN
00018F                00145 fdr_11  res     FDR_TABLE_LEN
00019C                00146 fdr_12  res     FDR_TABLE_LEN
0001A9                00147 fdr_13  res     FDR_TABLE_LEN
0001B6                00148 fdr_14  res     FDR_TABLE_LEN
0001C3                00149 fdr_15  res     FDR_TABLE_LEN
0001D0                00150 fdr_16  res     FDR_TABLE_LEN
0001DD                00151 fdr_17  res     FDR_TABLE_LEN
0001EA                00152 fdr_18  res     FDR_TABLE_LEN
                      00153 
                      00154 UDATA_FADER_TABLES_200  udata   0x200
                      00155 
000200                00156 dummy_label_200                         ; needs this to link. Don't ask me why.
                      00157 
000200                00158 fdr_19  res     FDR_TABLE_LEN           ; 7 x 13 = 91 bytes
00020D                00159 fdr_20  res     FDR_TABLE_LEN
00021A                00160 fdr_21  res     FDR_TABLE_LEN
000227                00161 fdr_22  res     FDR_TABLE_LEN
000234                00162 fdr_23  res     FDR_TABLE_LEN
000241                00163 fdr_24  res     FDR_TABLE_LEN
00024E                00164 fdr_25  res     FDR_TABLE_LEN
                      00165 
                      00166 
                      00167 ;###############################
                      00168 ;##### BEGIN CODE SECTION ######
                      00169 ;###############################
                      00170 
                      00171 CODE_LED_FADER_CODE     code
                      00172 
                      00173 ;******************************************************************************
                      00174 ;***** COMMAND SUBSYSTEM ******************************************************
                      00175 ;******************************************************************************
                      00176 
                      00177 ;******************************************************************************
                      00178 ; CMD_LOADER
                      00179 ;
                      00180 ; Loads commands from buffer pointed to by FSR1 to fader table via FSR2
                      00181 ;
                      00182 ; The command loader is responsible for moving commands from a command input
                      00183 ; buffer into the correct fader table, and for detecting and dispatching 
                      00184 ; commands that require immediate execution. The command loader is also 
                      00185 ; responsible for any translations that may be required to change the command 
                      00186 ; into an internal format.
                      00187 ;
                      00188 ; [Command readers are responsible for collecting bytes from serial IO or from
                      00189 ;  memory and constructing the command buffer that the loader uses]
                      00190 ;
                      00191 ; INPUTS: FSR1          input buffer pointer
                      00192 ; RETURN: Z=1 if OK, OK=0 signals an error occurred in processing
                      00193 ;
                      00194 ; USES: - W             used primarily for table offsets
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00195 ;       - FSR2          fader table pointer
                      00196 ;
                      00197 ; Commands:
                      00198 ;       - 0x01          SET_HSB
                      00199 ;       - 0x02          SET_RGB
                      00200 ;       - 0x03          PATCH
                      00201 ;       - 0x04          FADE
                      00202 ;       - 0x05          WATCH
                      00203 
000000                00204 CMD_LOADER
000000 50E6           00205         movf    POSTINC1,W              ; get (supposed) command byte
000002 EC?? F???      00206         call    CMD_VALIDATE_CMDCODE
000006 A4D8           00207         btfss   STATUS,Z
000008 0C01           00208         retlw   ERR_BAD_COMMAND         ; return if error (Z=0)
                      00209 
                      00210         ; isolate and store command digit and byte count digit
00000A 6E??           00211         movwf   cmd_argcount
00000C 6E??           00212         movwf   cmd_command
00000E 3A??           00213         swapf   cmd_command,F
000010 0E0F           00214         movlw   0x0F
000012 16??           00215         andwf   cmd_argcount,F
000014 16??           00216         andwf   cmd_command,F
                      00217 
                      00218         ; dispatch on command code
000016 44??           00219         rlncf   cmd_command,W
                      00220         switch
  0000                    M         local   table_base
000018 CFF7 F???          M         movff   TBLPTRH,temp_tblptrh    ; save current table pointer
00001C CFF6 F???          M         movff   TBLPTRL,temp_tblptrl
                          M 
000020 0F??               M         addlw   LOW table_base          ; add index (W) to table base
000022 6EF6               M         movwf   TBLPTRL                 ; set low pointer
000024 0E??               M         movlw   HIGH table_base
000026 6EF7               M         movwf   TBLPTRH
000028 B0D8               M         btfsc   STATUS,C                ; propagate the carry from the add
00002A 2AF7               M         incf    TBLPTRH,F
                          M 
00002C 0009               M         tblrd*+                         ; read and save vector address lo byte
00002E 50F5               M         movf    TABLAT,W
000030 0008               M         tblrd*                          ; read and save vector address hi byte
000032 CFF5 FFFA          M         movff   TABLAT,PCLATH
                          M 
000036 C??? FFF7          M         movff   temp_tblptrh,TBLPTRH    ; restore calling table pointer
00003A C??? FFF6          M         movff   temp_tblptrl,TBLPTRL
                          M 
00003E 6EF9               M         movwf   PCL                     ; jump to case routine
000040                    M table_base
000040 ????           00221         data    CL_ERROR                ; THESE MUST BE IN ORDER. See led.inc
000042 ????           00222         data    CL_LOAD_SET_BRT         ; 0x1_
000044 ????           00223         data    CL_LOAD_SET_HSB         ; 0x2_
000046 ????           00224         data    CL_LOAD_SET_RGB         ; 0x3_
000048 ????           00225         data    CL_LOAD_PATCH           ; 0x4_
00004A ????           00226         data    CL_LOAD_FADE            ; 0x5_
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00004C ????           00227         data    CL_LOAD_WATCH           ; 0x6_
                      00228 
                      00229 ;----- CL_ERROR -----
                      00230 ; Return for loader error
                      00231 
00004E                00232 CL_ERROR
00004E 94D8           00233         bcf     STATUS,Z                ; clear Z to signal ERROR
000050 0C05           00234         retlw   ERR_CMD_LOADER_FAILED
                      00235 
                      00236 ;---- CL_LOAD_SET_BRT -----
                      00237 ; Load brightness value into one fader (reduced version of SET_HSB)
                      00238 ;       - cmd   command   [M] command byte: MSD=command, LSD=arg count
                      00239 ;       - arg0  channel   [M] <b5-b0> = ch0 - ch63
                      00240 ;       - arg1  brt       [M] 0x00-0xFF
                      00241 ;
                      00242 ; Routine is entered with:
                      00243 ;       - cmd_command set
                      00244 ;       - cmd_argcount set
                      00245 ;       - FSR1 pointing to arg0
                      00246 
000052                00247 CL_LOAD_SET_BRT
                      00248     if MONOCHROME_MODE
000052 50E6           00249         movf    POSTINC1,W              ; get channel number
000054 0B1F           00250         andlw   0x1F                    ; mask the unused bits for safety
                      00251     else
                      00252         rlncf   POSTINC1,W              ; get channel number x2
                      00253         andlw   0x7E                    ; mask the unused bits for safety
                      00254         movf    POSTINC1,W              ; get channel number
                      00255         andlw   0x1F                    ; mask the unused bits for safety
                      00256         movwf   fdr_temp
                      00257         rlncf   fdr_temp,W              ; convert to circuit number in W
                      00258     endif
                      00259 
000056 EC?? F???      00260         call    FDR_SET_FDR_TABLE_PTR   ; set FRS2 to base of correct fader table
00005A 0E09           00261         movlw   FDR_STATE_SET_HSB
00005C 6EDE           00262         movwf   POSTINC2                ; write STATE and advance pointer to VALUE
00005E CFE6 FFDE      00263         movff   POSTINC1,POSTINC2       ; write BRT into table
000062 0EFF           00264         movlw   FDR_DIRTY_FLAG          ; write the dirty flag for first time through
000064 6EDE           00265         movwf   POSTINC2                
000066 0E01           00266         movlw   FDR_PRESCALE_1          ; write the prescaler value into the table
000068 6EDF           00267         movwf   INDF2
                      00268 
00006A 84D8           00269         bsf     STATUS,Z                ; set Z to signal no error
00006C 0012           00270         return  
                      00271 
                      00272 ;---- CL_LOAD_SET_HSB -----
                      00273 ; Load HSB values into the 3 circuits corresponding to the indicated channel
                      00274 ;       - cmd   command   [M] command byte: MSD=command, LSD=arg count
                      00275 ;       - arg0  channel   [M] <b5-b0> = ch0 - ch63
                      00276 ;       - arg1  hue       [M] 0x00-0xFF
                      00277 ;       - arg2  sat       [M] 0x00-0xFF
                      00278 ;       - arg3  brt       [M] 0x00-0xFF
                      00279 ;
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00280 ; Routine is entered with:
                      00281 ;       - cmd_command set
                      00282 ;       - cmd_argcount set
                      00283 ;       - FSR1 pointing to arg0
                      00284 
00006E                00285 CL_LOAD_SET_HSB
00006E 44E6           00286         rlncf   POSTINC1,W              ; get channel number x2
000070 0B7E           00287         andlw   0x7E                    ; mask the unused bits for safety
000072 6E??           00288         movwf   ckt_num                 ; ckt_num is actually a *CHANNEL NUMBER* 
                      00289                                         ;...in this case
                      00290 
000074 44??           00291         rlncf   ckt_num,W               ; convert to circuit number in W
000076 EC?? F???      00292         call    FDR_SET_FDR_TABLE_PTR   ; set FRS2 to base of correct fader table
00007A 0E09           00293         movlw   FDR_STATE_SET_HSB
00007C 6EDE           00294         movwf   POSTINC2                ; write STATE and advance pointer to VALUE
00007E CFE6 FFDE      00295         movff   POSTINC1,POSTINC2       ; write HUE into table
000082 0EFF           00296         movlw   FDR_DIRTY_FLAG          ; write the dirty flag for first time through
000084 6EDE           00297         movwf   POSTINC2                
000086 0E01           00298         movlw   FDR_PRESCALE_1          ; write the prescaler value into the table
000088 6EDF           00299         movwf   INDF2
                      00300 
00008A 44??           00301         rlncf   ckt_num,W               ; convert to circuit number in W
00008C 0901           00302         iorlw   0x01                    ; set to SAT
00008E EC?? F???      00303         call    FDR_SET_FDR_TABLE_PTR
000092 0E09           00304         movlw   FDR_STATE_SET_HSB
000094 6EDE           00305         movwf   POSTINC2                ; write STATE and advance pointer to VALUE
000096 CFE6 FFDE      00306         movff   POSTINC1,POSTINC2       ; write SAT into table
00009A 0EFF           00307         movlw   FDR_DIRTY_FLAG          ; write the dirty flag for first time through
00009C 6EDE           00308         movwf   POSTINC2                
00009E 0E01           00309         movlw   FDR_PRESCALE_1          ; write the prescaler value into the table
0000A0 6EDF           00310         movwf   INDF2
                      00311 
0000A2 44??           00312         rlncf   ckt_num,W               ; convert to circuit number in W
0000A4 0902           00313         iorlw   0x02                    ; set to BRT
0000A6 EC?? F???      00314         call    FDR_SET_FDR_TABLE_PTR
0000AA 0E09           00315         movlw   FDR_STATE_SET_HSB
0000AC 6EDE           00316         movwf   POSTINC2                ; write STATE and advance pointer to VALUE
0000AE CFE6 FFDE      00317         movff   POSTINC1,POSTINC2       ; write BRT into table
0000B2 0EFF           00318         movlw   FDR_DIRTY_FLAG          ; write the dirty flag for first time through
0000B4 6EDE           00319         movwf   POSTINC2                
0000B6 0E01           00320         movlw   FDR_PRESCALE_1          ; write the prescaler value into the table
0000B8 6EDF           00321         movwf   INDF2
                      00322 
0000BA 84D8           00323         bsf     STATUS,Z                ; set Z to signal no error
0000BC 0012           00324         return  
                      00325 
                      00326 ;---- CL_LOAD_SET_RGB -----
                      00327 
0000BE                00328 CL_LOAD_SET_RGB                         ;++++++ NOT IMPLEMENTED
0000BE 84D8           00329         bsf     STATUS,Z                ; set Z to signal no error
0000C0 0012           00330         return  
                      00331 
                      00332 
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00333 ;---- CL_LOAD_PATCH -----
                      00334 
0000C2                00335 CL_LOAD_PATCH
0000C2 50E6           00336         movf    POSTINC1,W              ; get circuit number for slave circuit
0000C4 6E??           00337         movwf   fdr_temp                ; save slave circuit number (destination)
                      00338 
0000C6 50E7           00339         movf    INDF1,W                 ; get master circuit number
0000C8 6E??           00340         movwf   fdr_temp_min            ; just borrow this register for master ckt#
0000CA EC?? F???      00341         call    FDR_SET_FDR_TABLE_PTR   ; set FSR2 to it
0000CE 50DF           00342         movf    INDF2,W                 ; get master STATE
0000D0 E0??           00343         bz      CLS_x                   ; master is OFF. Exit
0000D2 CFDA F???      00344         movff   FSR2H,fdr_temp_hi       ; save pointer to master LEVEL_H
0000D6 CFD9 F???      00345         movff   FSR2L,fdr_temp_lo
                      00346 
0000DA 50??           00347         movf    fdr_temp,W              ; get slave circuit number back
0000DC EC?? F???      00348         call    FDR_SET_FDR_TABLE_PTR   ; get slave address (I had to say that)
0000E0 0E08           00349         movlw   FDR_STATE_PATCH
0000E2 6EDE           00350         movwf   POSTINC2                ; write state
0000E4 50DE           00351         movf    POSTINC2,W              ; dummy instruction, advances past LEVEL_H
0000E6 50??           00352         movf    fdr_temp_min,W          ; get and write master circuit number
0000E8 6EDE           00353         movwf   POSTINC2
0000EA 0E01           00354         movlw   FDR_PRESCALE_1          ; write the presaler value into the table
0000EC 6EDE           00355         movwf   POSTINC2
0000EE C??? FFDE      00356         movff   fdr_temp_lo,POSTINC2    ; write master address
0000F2 C??? FFDE      00357         movff   fdr_temp_hi,POSTINC2
                      00358 
0000F6 84D8           00359 CLS_x   bsf     STATUS,Z                ; set Z to signal no error
0000F8 0012           00360         return  
                      00361 
                      00362 ;---- CL_LOAD_FADE -----
                      00363 ; Load FADE command. Specific actions are required for each argument:
                      00364 ; 
                      00365 ;       - cmd   command   [M] command byte: MSD=command, LSD=arg count
                      00366 ;       - arg0  circuit   [M] <b7-b2> = ch0 - ch63
                      00367 ;                             <b1-b0> = 0=HUE, 1=SAT, 2=BRT, 3=EXTRA
                      00368 ;       - arg1  prescale  [M] <b7-b0> = 256, 64, 32, 16, 8, 4, 2, 1
                      00369 ;       - arg2  wait      [M] 0x00-0xFF  in cycles (increment on load)
                      00370 ;       - arg3  up        [M] 0x00-0xFF  in cycles
                      00371 ;       - arg4  dwell     [M] 0x00-0xFF  in cycles
                      00372 ;       - arg5  down      [M] 0x00-0xFF  in cycles
                      00373 ;       - arg6  off       [M] 0x00-0xFF  in cycles
                      00374 ;       - arg7  repeat    [O] 0x00-0xFF  0x00 = default = repeat forever
                      00375 ;       - arg8  min       [O] 0x00-0xFF  0x00 = default
                      00376 ;       - arg9  max       [O] 0x00-0xFF  0xFF = default
                      00377 ;       - arg10 xfade     [O] 0x00-0xFF  0x00 = default = no cross fade
                      00378 ;
                      00379 ; Routine is entered with:
                      00380 ;       - cmd_command set
                      00381 ;       - cmd_argcount set
                      00382 ;       - FSR1 pointing to arg0
                      00383 ;
                      00384 ; Do not clobber LEVEL_H in the command table. All else if fair game.
                      00385 ; Don't worry about commands executing during load - these are exclusive
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00386 
0000FA                00387 CL_LOAD_FADE
0000FA 50E6           00388         movf    POSTINC1,W              ; load command circuit
0000FC EC?? F???      00389         call    FDR_SET_FDR_TABLE_PTR   ; set FSR2 to base of table
                      00390 
                      00391         ; load mandatory arguments
000100 0E03           00392         movlw   FDR_PRESCALE            ; arg1 - prescale
000102 CFE6 FFDB      00393         movff   POSTINC1,PLUSW2
                      00394 
000106 0E04           00395         movlw   FDR_WAIT                ; arg2 - delay
000108 CFE6 FFDB      00396         movff   POSTINC1,PLUSW2
00010C 2ADB           00397         incf    PLUSW2                  ; increment delay by 1
                      00398 
00010E 0E06           00399         movlw   FDR_UP                  ; arg3 - up
000110 CFE6 FFDB      00400         movff   POSTINC1,PLUSW2
                      00401 
000114 0E08           00402         movlw   FDR_DWELL                       ; arg4 - on
000116 CFE6 FFDB      00403         movff   POSTINC1,PLUSW2
                      00404 
00011A 0E07           00405         movlw   FDR_DOWN                ; arg5 - down
00011C CFE6 FFDB      00406         movff   POSTINC1,PLUSW2
                      00407 
000120 0E09           00408         movlw   FDR_OFF                 ; arg6 - off
000122 CFE6 FFDB      00409         movff   POSTINC1,PLUSW2
                      00410 
                      00411         ; end of mandatory args - rest are optional
000126 0E07           00412         movlw   0x07                    ; arg7 - repeat
000128 5C??           00413         subwf   cmd_argcount,W
00012A E3??           00414         bnc     CLP_RPT
00012C 0E0C           00415         movlw   FDR_REPEAT
00012E CFE6 FFDB      00416         movff   POSTINC1,PLUSW2
                      00417 
000132 0E08           00418         movlw   0x08                    ; arg8 - min
000134 5C??           00419         subwf   cmd_argcount,W
000136 E3??           00420         bnc     CLP_MIN
000138 0E0A           00421         movlw   FDR_MIN
00013A CFE6 FFDB      00422         movff   POSTINC1,PLUSW2
                      00423 
00013E 0E09           00424         movlw   0x09                    ; arg9 - max
000140 5C??           00425         subwf   cmd_argcount,W
000142 E3??           00426         bnc     CLP_MAX
000144 0E0B           00427         movlw   FDR_MAX
000146 CFE6 FFDB      00428         movff   POSTINC1,PLUSW2
                      00429 
00014A 0E0A           00430         movlw   0x0A                    ; arg10 - xfade
00014C 5C??           00431         subwf   cmd_argcount,W
00014E E3??           00432         bnc     CLP_XFD
000150 0E05           00433         movlw   FDR_XFADE
000152 CFE6 FFDB      00434         movff   POSTINC1,PLUSW2
                      00435 
000156 D???           00436         bra     CLP_FIN
                      00437 
                      00438         ; code sequence to load defaults. Multiple entry points
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000158 0E0C           00439 CLP_RPT movlw   FDR_REPEAT
00015A 6ADB           00440         clrf    PLUSW2                  ; REPEAT = 0
                      00441 
00015C 0E0A           00442 CLP_MIN movlw   FDR_MIN
00015E 6ADB           00443         clrf    PLUSW2                  ; MIN = 0
                      00444 
000160 0E0B           00445 CLP_MAX movlw   FDR_MAX
000162 6ADB           00446         clrf    PLUSW2                  ; MAX = 0
000164 06DB           00447         decf    PLUSW2,F                ; MAX = 0xFF
                      00448 
000166 0E05           00449 CLP_XFD movlw   FDR_XFADE
000168 6ADB           00450         clrf    PLUSW2                  ; MAX = 0
                      00451 
00016A 0E01           00452 CLP_FIN movlw   FDR_STATE_WAIT          ; set initial state
00016C 6EDF           00453         movwf   INDF2
00016E 84D8           00454         bsf     STATUS,Z                ; return signalling no error
000170 0012           00455         return  
                      00456 
                      00457 ;---- CL_LOAD_WATCH -----
                      00458 ; Load WATCH register. Legal values are:
                      00459 ;       0x00 to CKT_NUM_MAX             ; first fader channel to max encoded ckt
                      00460 ;       NOW (0xFE)                      ; load cue now
                      00461 ;       NEVER (0xFF)                    ; never load cue (disable watch)
                      00462 ;
                      00463 ; Routine is entered with:
                      00464 ;       - cmd_command set
                      00465 ;       - cmd_argcount set
                      00466 ;       - FSR1 pointing to arg0 - which is the WATCH value
                      00467 
000172                00468 CL_LOAD_WATCH
000172 50E6           00469         movf    POSTINC1,W              ; get watch value
000174 6E??           00470         movwf   cue_watch
000176 84D8           00471         bsf     STATUS,Z                ; set Z to signal no error
000178 0012           00472         return  
                      00473 
                      00474 ;----- CMD_VALIDATE_CMDCODE -----
                      00475 ; validate raw command byte (cmd+argcount) in W
                      00476 ; returns with Z=1 if command is OK, Z=0 if command error
                      00477 ; See led_fader.asm 091125 or earlier if you want a table lookup version
                      00478 
                      00479 cvc_tst macro   test_against            ; macro to perform code test
                      00480         movf    cmd_command,W           ; restore command to W
                      00481         xorlw   test_against            ; sets Z bit if match
                      00482         bz      CVC_OK
                      00483         endm
                      00484 
00017A                00485 CMD_VALIDATE_CMDCODE
00017A 6E??           00486         movwf   cmd_command             ; save command byte
                      00487                                         
                      00488         ; comment out the ones you don't need or want
                      00489         cvc_tst SET_BRT
00017C 50??               M         movf    cmd_command,W           ; restore command to W
00017E 0A11               M         xorlw   SET_BRT                 ; sets Z bit if match
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000180 E0??               M         bz      CVC_OK
                      00490 ;       cvc_tst SET_HSB                 ; color only
                      00491 ;       cvc_tst SET_RGB                 ; color only
                      00492         cvc_tst PATCH
000182 50??               M         movf    cmd_command,W           ; restore command to W
000184 0A41               M         xorlw   PATCH                   ; sets Z bit if match
000186 E0??               M         bz      CVC_OK
                      00493         cvc_tst FADE
000188 50??               M         movf    cmd_command,W           ; restore command to W
00018A 0A56               M         xorlw   FADE                    ; sets Z bit if match
00018C E0??               M         bz      CVC_OK
                      00494         cvc_tst FADE_REPEAT
00018E 50??               M         movf    cmd_command,W           ; restore command to W
000190 0A57               M         xorlw   FADE_REPEAT             ; sets Z bit if match
000192 E0??               M         bz      CVC_OK
                      00495         cvc_tst FADE_MIN
000194 50??               M         movf    cmd_command,W           ; restore command to W
000196 0A58               M         xorlw   FADE_MIN                ; sets Z bit if match
000198 E0??               M         bz      CVC_OK
                      00496         cvc_tst FADE_MAX
00019A 50??               M         movf    cmd_command,W           ; restore command to W
00019C 0A59               M         xorlw   FADE_MAX                ; sets Z bit if match
00019E E0??               M         bz      CVC_OK
                      00497         cvc_tst FADE_X
0001A0 50??               M         movf    cmd_command,W           ; restore command to W
0001A2 0A5A               M         xorlw   FADE_X                  ; sets Z bit if match
0001A4 E0??               M         bz      CVC_OK
                      00498         cvc_tst WATCH
0001A6 50??               M         movf    cmd_command,W           ; restore command to W
0001A8 0A60               M         xorlw   WATCH                   ; sets Z bit if match
0001AA E0??               M         bz      CVC_OK
                      00499         ; falls through to error condition
                      00500 
0001AC 94D8           00501 CVC_ERR bcf     STATUS,Z                ; clear Z to signal ERROR
0001AE 0C01           00502         retlw   ERR_BAD_COMMAND         ; z is already set to zero
                      00503 
0001B0 50??           00504 CVC_OK  movf    cmd_command,W           ; restore command
0001B2 84D8           00505         bsf     STATUS,Z                ; set Z to signal OK
0001B4 0012           00506         return
                      00507 
                      00508 ;******************************************************************************
                      00509 ;***** FADER SUBSYSTEM ********************************************************
                      00510 ;******************************************************************************
                      00511 
                      00512 ;******************************************************************************
                      00513 ; FDR_DISPATCH
                      00514 ;
                      00515 ; Fader command processor - common dispatcher for all commands
                      00516 ;
                      00517 ; INPUTS:
                      00518 ;       - ckt_num       Circuit number to dispatch and execute 
                      00519 ;
                      00520 ; RETURNS:
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00521 ;       - fdr_level     Final level of computed command. This value is read
                      00522 ;                       from the table (LEVEL_H) at the start of the routine
                      00523 ;                       and must remain unmolested throughout all processing.
                      00524 ;                       It is set to the new value of LEVEL_H on exit; and is
                      00525 ;                       used to determine if the DIRTY_BIT needs to be set.
                      00526 ;
                      00527 ;       - app_flags     DIRTY_BIT is set if the output LEVEL_H changes, but 
                      00528 ;                       is not cleared if it does not. This allows the DIRTY_BIT
                      00529 ;                       to accumulate a state change over an entire HSB triplet.
                      00530 ;
                      00531 ;       - Z bit         Set to reflect dirty bit
                      00532 ;
                      00533 ; Notes: 
                      00534 ;       PRESCALER:      <b7-b0> prescaler bit flags: 256, 128, 64, 32, 16, 4, 2, 1
                      00535 ;
                      00536 ; The following convention is used for the state machine entry points. 
                      00537 ; (Not all states have all these entry points)
                      00538 ;
                      00539 ;       _FIRST          executed only the first time this state is entered
                      00540 ;       _CYCLE          executed once per cycle
                      00541 ;       _STATE          executed every time the state is called
                      00542 ;
                      00543 ; Profiles measured via unit tests:
                      00544 ;        9      RETURN FROM DISABLED STATE
                      00545 ;       13      RETURN FROM NO PRESCALER HIT
                      00546 ;       27      WAIT
                      00547 ;       91      XFADE_FIRST
                      00548 ;       53      XFADE_UP_STATE
                      00549 ;      119      XFADE_FIN (includes ON_CYCLE)
                      00550 ;       65      DWELL_CYCLE
                      00551 ;       34      DWELL_STATE
                      00552 ;       60      DOWN_CYCLE
                      00553 ;       55      DOWN_STATE
                      00554 ;       69      OFF_CYCLE
                      00555 ;       34      OFF_STATE
                      00556 ;       62      UP_CYCLE (+REPEAT)
                      00557 ;       53      UP_STATE
                      00558 ;
                      00559 ; Roughly 50 cycles per active pass estimates on the high side. Some percentage
                      00560 ; of channels will be off - i.e. DONE, or not all of H,S & B are running, and 
                      00561 ; some channels may be running slower than 1x prescaler.
                      00562 ;
0001B6                00563 FDR_DISPATCH
                      00564         ; set FSR2 to location in table
0001B6 50??           00565         movf    chn_num,W
0001B8 EC?? F???      00566         call    FDR_SET_FDR_TABLE_PTR   
                      00567 
                      00568         ; always returns the the level value
0001BC 0E01           00569         movlw   FDR_LEVEL_H
0001BE CFDB F???      00570         movff   PLUSW2,fdr_level        ; get fader LEVEL from fader table
                      00571 
                      00572         ; quick cutout for disabled channel
0001C2 0E00           00573         movlw   FDR_STATE_DISABLED
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0001C4 64DF           00574         cpfsgt  INDF2
0001C6 0012           00575         return
                      00576 
                      00577         ; check the prescaler bits to see if the command should be executed
0001C8 0E03           00578         movlw   FDR_PRESCALE            ; set PRESCALE offset
0001CA 50DB           00579         movf    PLUSW2,W                ; get PRESCALE byte
0001CC 14??           00580         andwf   cycle_prescale,W
0001CE E1??           00581         bnz     FDR_D1                  ; branch to execute command
0001D0 0012           00582         return                          ; exit if not a cycle on which to dispatch
                      00583 
                      00584         ; dispatch to exec routine on command state
0001D2 44DF           00585 FDR_D1  rlncf   INDF2,W                 ; get state x2 into W...
                      00586         switch
  0000                    M         local   table_base
0001D4 CFF7 F???          M         movff   TBLPTRH,temp_tblptrh    ; save current table pointer
0001D8 CFF6 F???          M         movff   TBLPTRL,temp_tblptrl
                          M 
0001DC 0F??               M         addlw   LOW table_base          ; add index (W) to table base
0001DE 6EF6               M         movwf   TBLPTRL                 ; set low pointer
0001E0 0E??               M         movlw   HIGH table_base
0001E2 6EF7               M         movwf   TBLPTRH
0001E4 B0D8               M         btfsc   STATUS,C                ; propagate the carry from the add
0001E6 2AF7               M         incf    TBLPTRH,F
                          M 
0001E8 0009               M         tblrd*+                         ; read and save vector address lo byte
0001EA 50F5               M         movf    TABLAT,W
0001EC 0008               M         tblrd*                          ; read and save vector address hi byte
0001EE CFF5 FFFA          M         movff   TABLAT,PCLATH
                          M 
0001F2 C??? FFF7          M         movff   temp_tblptrh,TBLPTRH    ; restore calling table pointer
0001F6 C??? FFF6          M         movff   temp_tblptrl,TBLPTRL
                          M 
0001FA 6EF9               M         movwf   PCL                     ; jump to case routine
0001FC                    M table_base
0001FC ????           00587         data    FDR_EXEC_EXIT           ; 00 = disabled circuit. Just exit.
0001FE ????           00588         data    FDR_EXEC_WAIT_STATE     ; initial entry point for PULSE cmd
000200 ????           00589         data    FDR_EXEC_XFADE_UP_STATE
000202 ????           00590         data    FDR_EXEC_XFADE_DOWN_STATE
000204 ????           00591         data    FDR_EXEC_UP_STATE
000206 ????           00592         data    FDR_EXEC_DWELL_STATE
000208 ????           00593         data    FDR_EXEC_DOWN_STATE
00020A ????           00594         data    FDR_EXEC_OFF_STATE
00020C ????           00595         data    FDR_EXEC_PATCH
00020E ????           00596         data    FDR_EXEC_SET_HSB        ; also serves SET_BRT
000210 ????           00597         data    FDR_EXEC_SET_RGB
                      00598 
                      00599 ;---- FDR_EXEC_EXIT - Common exit -----
                      00600 ; Tests for LEVEL_H changes and sets dirty bit if so
                      00601 
000212                00602 FDR_EXEC_EXIT
000212 0E01           00603         movlw   FDR_LEVEL_H
000214 50DB           00604         movf    PLUSW2,W                ; get LEVEL_H from table
000216 6200           00605         cpfseq  fdr_level,W
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000218 80??           00606         bsf     app_flags,DIRTY_BIT     ; set DIRTY_BIT if not equal
00021A 6E??           00607         movwf   fdr_level               ; return the new level
00021C 0012           00608         return
                      00609 
                      00610 ;---- FDR_EXEC_DELAY routines -----
                      00611 
                      00612 ;FDR_EXEC_WAIT_FIRST    ; first time entry point (NULL)
                      00613 ;FDR_EXEC_WAIT_CYCLE    ; cycle re-entry point (NULL)
00021E                00614 FDR_EXEC_WAIT_STATE     ; state re-entry point 
                      00615         ; count down pre-exec delay
00021E 0E04           00616         movlw   FDR_WAIT                ; get delay value
000220 2EDB           00617         decfsz  PLUSW2,F                ; decrement delay and skip if zero
000222 0012           00618         return
                      00619 
                      00620         ; test and branch three XFADE initial conditions
000224 0E05           00621         movlw   FDR_XFADE
000226 50DB           00622         movf    PLUSW2,W                ; get XFADE value
000228 E0??           00623         bz      FDR_EXEC_UP_FIRST       ; branch if zero to UP fade first time setup
00022A 0E0B           00624         movlw   FDR_MAX
00022C 50DB           00625         movf    PLUSW2,W                ; get MAX value
00022E 6E??           00626         movwf   fdr_temp_max            ; save MAX in working register
000230 60??           00627         cpfslt  fdr_level               ; skip if fdr_level < MAX
000232 D???           00628         bra     FDR_EXEC_XFADE_DOWN_FIRST; XFADE_DOWN also handles the = condition 
                      00629 ;       bra     FDR_EXEC_XFADE_UP_FIRST ; fall through
                      00630 
                      00631 ;---- FDR_EXEC_XFADE UP and DOWN routines -----
                      00632 
000234                00633 FDR_EXEC_XFADE_UP_FIRST ; first time entry point
                      00634         ; compute XFADE increment = (1/XFADE)*(MAX-LEVEL)
000234 0E05           00635         movlw   FDR_XFADE
000236 CFDB F???      00636         movff   PLUSW2,fdr_temp ; load XFADE step time into fdr_temp
00023A C??? F???      00637         movff   fdr_temp_max,fdr_temp_hi; load MAX into hi
00023E 50??           00638         movf    fdr_level,W             ; load LEVEL into W
000240 EC?? F???      00639         call    FDR_COMPUTE_STEP_UP
                      00640 ;       bra     FDR_EXEC_XFADE_UP_CYCLE ; fall through
                      00641 
000244                00642 FDR_EXEC_XFADE_UP_CYCLE ; cycle re-entry point (NULL)
                      00643         ; set state
000244 0E02           00644         movlw   FDR_STATE_XFADE_UP
000246 6EDF           00645         movwf   INDF2
                      00646 ;       bra     FDR_EXEC_XFADE_UP_STATE ; fall through
                      00647 
000248                00648 FDR_EXEC_XFADE_UP_STATE ; state re-entry point
                      00649         ; get fresh working values to temp registers
000248 0E05           00650         movlw   FDR_UP_INCR_L
00024A CFDB F???      00651         movff   PLUSW2,fdr_temp_lo
00024E 0E04           00652         movlw   FDR_UP_INCR_H
000250 CFDB F???      00653         movff   PLUSW2,fdr_temp_hi
000254 0E0B           00654         movlw   FDR_MAX
000256 CFDB F???      00655         movff   PLUSW2,fdr_temp_max
                      00656 
                      00657         ; add INCR to LEVEL
00025A 0E02           00658         movlw   FDR_LEVEL_L             ; adjust table pointer to LEVEL_L
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00025C 26D9           00659         addwf   FSR2L,F
00025E 50??           00660         movf    fdr_temp_lo,W           ; 16 bit add with writeback to table
000260 26DD           00661         addwf   POSTDEC2,F
000262 50??           00662         movf    fdr_temp_hi,W
000264 22DD           00663         addwfc  POSTDEC2,F              ; restores pointer to base of table
                      00664 
                      00665         ; test for the three final conditions
000266 E2??           00666         bc      FDR_EXEC_XFADE_FIN      ; test and branch absolute overflow 
000268 0E01           00667         movlw   FDR_LEVEL_H
00026A 50DB           00668         movf    PLUSW2,W                ; get new LEVEL_H to W
00026C 5C??           00669         subwf   fdr_temp_max,W
00026E E0??           00670         bz      FDR_EXEC_XFADE_FIN      ; test and branch if equals
000270 E3??           00671         bnc     FDR_EXEC_XFADE_FIN      ; test and branch if overflow over MAX
000272 D???           00672         bra     FDR_EXEC_EXIT           ; otherwise normal exit
                      00673 
000274                00674 FDR_EXEC_XFADE_DOWN_FIRST ; first time entry point
                      00675         ; compute XFADE increment = (1/XFADE)*(LEVEL-MAX)
000274 0E05           00676         movlw   FDR_XFADE
000276 CFDB F???      00677         movff   PLUSW2,fdr_temp ; load XFADE step time into fdr_temp
00027A C??? F???      00678         movff   fdr_level,fdr_temp_hi   ; loaf LEVEL into hi
00027E 50??           00679         movf    fdr_temp_max,W          ; load MAX into W
000280 EC?? F???      00680         call    FDR_COMPUTE_STEP_UP
                      00681 ;       bra     FDR_EXEC_XFADE_DOWN_CYCLE ; fall through
                      00682 
000284                00683 FDR_EXEC_XFADE_DOWN_CYCLE  ; cycle re-entry point
                      00684         ; set state
000284 0E03           00685         movlw   FDR_STATE_XFADE_DOWN
000286 6EDF           00686         movwf   INDF2
                      00687 ;       bra     FDR_EXEC_XFADE_DOWN_STATE ; fall through
                      00688 
000288                00689 FDR_EXEC_XFADE_DOWN_STATE  ; re-entry for each state dispatch
                      00690         ; get fresh working values to temp registers
000288 0E05           00691         movlw   FDR_UP_INCR_L
00028A CFDB F???      00692         movff   PLUSW2,fdr_temp_lo
00028E 0E04           00693         movlw   FDR_UP_INCR_H
000290 CFDB F???      00694         movff   PLUSW2,fdr_temp_hi
000294 0E0B           00695         movlw   FDR_MAX
000296 CFDB F???      00696         movff   PLUSW2,fdr_temp_max
                      00697 
                      00698         ; subtract "INCR" from LEVEL
00029A 0E02           00699         movlw   FDR_LEVEL_L             ; adjust table pointer to LEVEL_L
00029C 26D9           00700         addwf   FSR2L,F
00029E 50??           00701         movf    fdr_temp_lo,W           ; 16 bit add with writeback to table
0002A0 5EDD           00702         subwf   POSTDEC2,F
0002A2 50??           00703         movf    fdr_temp_hi,W
0002A4 5ADD           00704         subwfb  POSTDEC2,F              ; restores pointer to base of table
                      00705 
                      00706         ; test for overflow and final conditions
0002A6 E3??           00707         bnc     FDR_EXEC_XFADE_FIN      ; test and branch absolute underflow
0002A8 0E01           00708         movlw   FDR_LEVEL_H
0002AA 50DB           00709         movf    PLUSW2,W                ; get new LEVEL_H to W
0002AC 5C??           00710         subwf   fdr_temp_max,W
0002AE E0??           00711         bz      FDR_EXEC_XFADE_FIN      ; test and branch if equals
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0002B0 E2??           00712         bc      FDR_EXEC_XFADE_FIN      ; test and branch if less than than MAX
0002B2 D???           00713         bra     FDR_EXEC_EXIT           ; otherwise normal exit
                      00714 
0002B4                00715 FDR_EXEC_XFADE_FIN  ; shared finalization for XFADE_UP and XFADE_DOWN
                      00716                     ; Initializes UP variables, but skips ahead to ON interval
                      00717 
                      00718         ; set LEVEL_H to MAX
0002B4 C??? FFDC      00719         movff   fdr_temp_max,PREINC2    ; set LEVEL_H to MAX
0002B8 50DD           00720         movf    POSTDEC2,W              ; load LEVEL_H in W and reset FSR to base
                      00721 
                      00722         ; compute UP increment = (1/UP)*(MAX-MIN)
0002BA 0E06           00723         movlw   FDR_UP
0002BC CFDB F???      00724         movff   PLUSW2,fdr_temp ; load UP step time into fdr_temp
0002C0 C??? F???      00725         movff   fdr_temp_max,fdr_temp_hi; load MAX into hi
0002C4 0E0A           00726         movlw   FDR_MIN
0002C6 50DB           00727         movf    PLUSW2,W                ; load MIN into W
0002C8 EC?? F???      00728         call    FDR_COMPUTE_STEP_UP
                      00729 
                      00730         ; compute DOWN increment = (1/DOWN)*(MAX-MIN)
0002CC 0E07           00731         movlw   FDR_DOWN
0002CE CFDB F???      00732         movff   PLUSW2,fdr_temp ; load UP step time into fdr_temp
0002D2 C??? F???      00733         movff   fdr_temp_max,fdr_temp_hi; load MAX into hi
0002D6 0E0A           00734         movlw   FDR_MIN
0002D8 50DB           00735         movf    PLUSW2,W                ; load MIN into W
0002DA EC?? F???      00736         call    FDR_COMPUTE_STEP_DOWN
                      00737 
                      00738         ; got to ON state processing (not UP or DOWN)
0002DE D???           00739         bra     FDR_EXEC_DWELL_FIRST
                      00740 
                      00741 ;---- FDR_EXEC_UP routines -----
                      00742 
0002E0                00743 FDR_EXEC_UP_FIRST ; first time entry point
                      00744         ; get and save MAX value from table
0002E0 0E0B           00745         movlw   FDR_MAX
0002E2 50DB           00746         movf    PLUSW2,W                ; get MAX value
0002E4 6E??           00747         movwf   fdr_temp_max            ; save MAX in working register
                      00748 
                      00749         ; compute UP increment = (1/UP)*(MAX-MIN) and save to table
0002E6 0E06           00750         movlw   FDR_UP
0002E8 CFDB F???      00751         movff   PLUSW2,fdr_temp         ; load UP step time into fdr_temp
0002EC C??? F???      00752         movff   fdr_temp_max,fdr_temp_hi; load MAX into hi
0002F0 0E0A           00753         movlw   FDR_MIN
0002F2 50DB           00754         movf    PLUSW2,W                ; load MIN into W
0002F4 EC?? F???      00755         call    FDR_COMPUTE_STEP_UP
                      00756 
                      00757         ; compute DOWN increment = (1/DOWN)*(MAX-MIN) and save to table
0002F8 0E07           00758         movlw   FDR_DOWN
0002FA CFDB F???      00759         movff   PLUSW2,fdr_temp         ; load UP step time into fdr_temp
0002FE C??? F???      00760         movff   fdr_temp_max,fdr_temp_hi; load MAX into hi
000302 0E0A           00761         movlw   FDR_MIN
000304 50DB           00762         movf    PLUSW2,W                ; load MIN into W
000306 EC?? F???      00763         call    FDR_COMPUTE_STEP_DOWN
                      00764 
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00765 ;       bra     FDR_EXEC_UP_CYCLE       ; fall through
                      00766 
00030A                00767 FDR_EXEC_UP_CYCLE ; re-entry point for each new cycle
                      00768         ; set state
00030A 0E04           00769         movlw   FDR_STATE_UP
00030C 6EDF           00770         movwf   INDF2
                      00771 ;       bra     FDR_EXEC_UP_STATE       ; fall through
                      00772 
00030E                00773 FDR_EXEC_UP_STATE ; re-entry point for each state dispatch
                      00774         ; get fresh working values to temp registers
00030E 0E05           00775         movlw   FDR_UP_INCR_L
000310 CFDB F???      00776         movff   PLUSW2,fdr_temp_lo
000314 0E04           00777         movlw   FDR_UP_INCR_H
000316 CFDB F???      00778         movff   PLUSW2,fdr_temp_hi
00031A 0E0B           00779         movlw   FDR_MAX
00031C CFDB F???      00780         movff   PLUSW2,fdr_temp_max
                      00781 
                      00782         ; add INCR to LEVEL
000320 0E02           00783         movlw   FDR_LEVEL_L             ; adjust table pointer to LEVEL_L
000322 26D9           00784         addwf   FSR2L,F
000324 50??           00785         movf    fdr_temp_lo,W           ; 16 bit add with writeback to table
000326 26DD           00786         addwf   POSTDEC2,F
000328 50??           00787         movf    fdr_temp_hi,W
00032A 22DD           00788         addwfc  POSTDEC2,F              ; restores pointer to base of table
                      00789 
                      00790         ; test for overflow and final conditions
00032C E2??           00791         bc      CEU_FIN                 ; test and branch overflow condition
00032E 0E01           00792         movlw   FDR_LEVEL_H
000330 50DB           00793         movf    PLUSW2,W                ; get new LEVEL_H to W
000332 5C??           00794         subwf   fdr_temp_max,W
000334 E0??           00795         bz      CEU_FIN                 ; test and branch equals condition
000336 E3??           00796         bnc     CEU_FIN                 ; test and branch greater than condition
000338 D???           00797         bra     FDR_EXEC_EXIT           ; exit
                      00798 
00033A                00799 CEU_FIN ; set LEVEL_H to MAX
00033A C??? FFDC      00800         movff   fdr_temp_max,PREINC2    ; set LEVEL_H to MAX
00033E 50DD           00801         movf    POSTDEC2,W              ; reset FSR to base (load W)
                      00802 ;       bra     FDR_EXEC_ON_CYCLE       ; fall through
                      00803 
                      00804 ;---- FDR_EXEC_ON routines -----
                      00805 
000340                00806 FDR_EXEC_DWELL_FIRST    ; first time entry point
000340                00807 FDR_EXEC_DWELL_CYCLE    ; cycle re-entry point
                      00808         ; move ON value to counter
000340 0E08           00809         movlw   FDR_DWELL
000342 CFDB F???      00810         movff   PLUSW2,fdr_temp
000346 0E02           00811         movlw   FDR_COUNTER
000348 C??? FFDB      00812         movff   fdr_temp,PLUSW2 
00034C 2ADB           00813         incf    PLUSW2,F                ; add 1 to simplify counting
                      00814 
                      00815         ; set state
00034E 0E05           00816         movlw   FDR_STATE_DWELL
000350 6EDF           00817         movwf   INDF2
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000352 D???           00818         bra     FDR_EXEC_EXIT           ; return thru common exit. 
                      00819                                         ; Forces any prior level change to take,
                      00820                                         ; and stops the "shit thru a goose" effect
                      00821 
000354                00822 FDR_EXEC_DWELL_STATE    ; state re-entry point
000354 0E02           00823         movlw   FDR_COUNTER
000356 2EDB           00824         decfsz  PLUSW2,F
000358 D???           00825         bra     FDR_EXEC_EXIT
                      00826 ;       bra     FDR_EXEC_DOWN_CYCLE     ; fall through  
                      00827 
                      00828 ;---- FDR_EXEC_DOWN routines -----
                      00829 
00035A                00830 FDR_EXEC_DOWN_FIRST     ; first time entry point
                      00831         ; DOWN_FIRST functions are actually performed during UP_FIRST & XFADE_FIN
                      00832 
00035A                00833 FDR_EXEC_DOWN_CYCLE     ; cycle re-entry point
                      00834         ; set state
00035A 0E06           00835         movlw   FDR_STATE_DOWN
00035C 6EDF           00836         movwf   INDF2
                      00837 ;       bra     FDR_EXEC_DOWN_STATE     ; fall through
                      00838 
00035E                00839 FDR_EXEC_DOWN_STATE     ; state re-entry point
                      00840         ; get fresh working values to temp registers
00035E 0E05           00841         movlw   FDR_UP_INCR_L
000360 CFDB F???      00842         movff   PLUSW2,fdr_temp_lo
000364 0E04           00843         movlw   FDR_UP_INCR_H
000366 CFDB F???      00844         movff   PLUSW2,fdr_temp_hi
00036A 0E0A           00845         movlw   FDR_MIN
00036C CFDB F???      00846         movff   PLUSW2,fdr_temp_min
                      00847 
                      00848         ; subtract DECR from LEVEL
000370 0E02           00849         movlw   FDR_LEVEL_L             ; adjust table pointer to LEVEL_L
000372 26D9           00850         addwf   FSR2L,F
000374 50??           00851         movf    fdr_temp_lo,W           ; 16 bit add with writeback to table
000376 5EDD           00852         subwf   POSTDEC2,F
000378 50??           00853         movf    fdr_temp_hi,W
00037A 5ADD           00854         subwfb  POSTDEC2,F              ; restores pointer to base of table
                      00855 
                      00856         ; test for overflow and final conditions
00037C E3??           00857         bnc     CED_FIN                 ; test and branch underflow condition
00037E 0E01           00858         movlw   FDR_LEVEL_H
000380 CFDB F???      00859         movff   PLUSW2,fdr_temp_hi      ; get new LEVEL_H to temp
000384 50??           00860         movf    fdr_temp_min,W
000386 5C??           00861         subwf   fdr_temp_hi,W           ; subtract min from LEVEL
000388 E0??           00862         bz      CED_FIN                 ; test and branch equals condition
00038A E3??           00863         bnc     CED_FIN                 ; test and branch on negative
00038C D???           00864         bra     FDR_EXEC_EXIT           ; exit with FSR pointed to LEVEL
                      00865 
00038E                00866 CED_FIN ; set LEVEL_H to MAX
00038E C??? FFDC      00867         movff   fdr_temp_min,PREINC2    ; set LEVEL_H to MIN
000392 50DD           00868         movf    POSTDEC2,W              ; reset FSR to base (load W)
                      00869 ;       bra     FDR_EXEC_OFF_CYCLE      ; fall through
                      00870 
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00871 ;---- FDR_EXEC_OFF routines -----
                      00872 
                      00873 ;FDR_EXEC_OFF_FIRST     ; first time entry point
000394                00874 FDR_EXEC_OFF_CYCLE      ; cycle re-entry point  
                      00875         ; move OFF value to counter
000394 0E09           00876         movlw   FDR_OFF
000396 CFDB F???      00877         movff   PLUSW2,fdr_temp
00039A 0E02           00878         movlw   FDR_COUNTER
00039C C??? FFDB      00879         movff   fdr_temp,PLUSW2 
0003A0 2ADB           00880         incf    PLUSW2,F                ; add 1 to simplify counting
                      00881 
                      00882         ; set state
0003A2 0E07           00883         movlw   FDR_STATE_OFF
0003A4 6EDF           00884         movwf   INDF2
                      00885 ;       bra     FDR_EXEC_OFF_STATE      ; fall through
                      00886 
0003A6                00887 FDR_EXEC_OFF_STATE      ; state re-entry point
0003A6 0E02           00888         movlw   FDR_COUNTER
0003A8 2EDB           00889         decfsz  PLUSW2,F
0003AA D???           00890         bra     FDR_EXEC_EXIT
                      00891 ;       bra     FDR_EXEC_REPEAT         ; fall through  
                      00892 
                      00893 ;---- FDR_EXEC_REPEAT routine -----
                      00894 
0003AC                00895 FDR_EXEC_REPEAT
                      00896         ; test for REPEAT=0 --> repeat forever
0003AC 0E0C           00897         movlw   FDR_REPEAT
0003AE 52DB           00898         movf    PLUSW2,F                ; get repeat value (preserve W)
0003B0 E0??           00899         bz      FDR_EXEC_UP_CYCLE       ; always start a new cycle
                      00900 
                      00901         ; decrement and test
0003B2 2EDB           00902         decfsz  PLUSW2,F
0003B4 D???           00903         bra     FDR_EXEC_UP_CYCLE       ; decrement once and start again
                      00904 
                      00905         ; end cycle - fader is DONE
0003B6 0E00           00906         movlw   FDR_STATE_DONE
0003B8 6EDF           00907         movwf   INDF2
0003BA D???           00908         bra     FDR_EXEC_EXIT
                      00909 
                      00910 ;---- FDR_COMPUTE_STEP_[UP, DOWN] - function to compute a step incr or decr
                      00911 ;
                      00912 ; INPUTS:
                      00913 ;       - W = lower range (MIN)
                      00914 ;       - fdr_temp_hi = upper range (typ MAX) (gets clobbered)
                      00915 ;       - fdr_temp = step time
                      00916 ;
                      00917 ; RETURNS:
                      00918 ;       _UP loads increment / decr into UP_INCR_H/L
                      00919 ;       _DOWN loads increment / decr into DOWN_DECR_H/L
                      00920 
0003BC                00921 FDR_COMPUTE_STEP_UP
0003BC 5E??           00922         subwf   fdr_temp_hi,F           ; HI-LO (clobbers fdr_temp_hi)
0003BE 50??           00923         movf    fdr_temp,W              ; STEP
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0003C0 EC?? F???      00924         call    FDR_COMPUTE_RECIPROCAL  ; 1/STEP
0003C4 02??           00925         mulwf   fdr_temp_hi             ; (1/STEP)*(HI-LO)
0003C6 0E04           00926         movlw   FDR_UP_INCR_H           ; load results into UP_INCR
0003C8 CFF4 FFDB      00927         movff   PRODH,PLUSW2
0003CC 0E05           00928         movlw   FDR_UP_INCR_L
0003CE CFF3 FFDB      00929         movff   PRODL,PLUSW2
0003D2 0012           00930         return
                      00931 
0003D4                00932 FDR_COMPUTE_STEP_DOWN
0003D4 5E??           00933         subwf   fdr_temp_hi,F           ; HI-LO (clobbers HI working reg)
0003D6 50??           00934         movf    fdr_temp,W              ; STEP
0003D8 EC?? F???      00935         call    FDR_COMPUTE_RECIPROCAL  ; 1/STEP
0003DC 02??           00936         mulwf   fdr_temp_hi             ; compute (1/STEP)*(HI-LO)
0003DE 0E06           00937         movlw   FDR_DOWN_DECR_H         ; load results into DOWN_DECR
0003E0 CFF4 FFDB      00938         movff   PRODH,PLUSW2
0003E4 0E07           00939         movlw   FDR_DOWN_DECR_L
0003E6 CFF3 FFDB      00940         movff   PRODL,PLUSW2
0003EA 0012           00941         return
                      00942 
                      00943 ;---- FDR_EXEC_PATCH routine -----
                      00944 ; Read the STATE and LEVEL_H from the master circuit. Test the level against the 
                      00945 ; current slave level level {fdr_level) and set fdr_level and dirty bit if changed.
                      00946 ; If the master is DONE, then set local state to DONE as well. Exit.
                      00947  
0003EC                00948 FDR_EXEC_PATCH
0003EC 0E04           00949         movlw   FDR_MASTER_L            ; retrieve master pointer
0003EE CFDB FFE1      00950         movff   PLUSW2,FSR1L
0003F2 0E05           00951         movlw   FDR_MASTER_H
0003F4 CFDB FFE2      00952         movff   PLUSW2,FSR1H
0003F8 CFE6 F???      00953         movff   POSTINC1,fdr_temp       ; get master STATE to local temp
0003FC CFE7 F???      00954         movff   INDF1,fdr_temp_hi       ; get master LEVEL to local temp
                      00955 
000400 0E01           00956         movlw   FDR_LEVEL_H             ; write new level to slave LEVEL
000402 C??? FFDB      00957         movff   fdr_temp_hi,PLUSW2
                      00958         
000406 50??           00959         movf    fdr_temp_hi,W
000408 6200           00960         cpfseq  fdr_level,W             ; test master level against slave level
00040A 80??           00961         bsf     app_flags,DIRTY_BIT     ; set DIRTY_BIT if not equal
00040C 6E??           00962         movwf   fdr_level               ; this will return the new level
                      00963 
00040E 52??           00964         movf    fdr_temp                ; get the master STATE back
000410 E1??           00965         bnz     CE_SLV1                 ; relies on STATE_DONE = 0
000412 6ADF           00966         clrf    INDF2                   ; set local state to DONE
000414 0012           00967 CE_SLV1 return
                      00968 
                      00969 
                      00970 ;---- FDR_EXEC_SET_HSB routine -----
                      00971 ; Preconditions are that the loader has loaded LEVEL_H values into an HSB 
                      00972 ; triplet and set the state to FDR_STATE_SET_HSB. This routine will be called
                      00973 ; three times (one for each circuit in the triplet) to return the fdr_level 
                      00974 ; that was set. The DIRTY_BIT is set each time. The caller is then responsible
                      00975 ; for calling the HSB_TO_RGB conversion and the CKT table load routines 
                      00976 ; - as per usual on return from commands.
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00977 
000416                00978 FDR_EXEC_SET_HSB
000416 50DC           00979         movf    PREINC2,W               ; get level (LEVEL_H)
000418 6E??           00980         movwf   fdr_level
00041A A0DC           00981         btfss   PREINC2,0               ; test the dirty flag...
00041C 0012           00982         return                          ;...if Nth time through, just return
00041E 6ADF           00983         clrf    INDF2                   ; else clear the dirty flag...
000420 80??           00984         bsf     app_flags,DIRTY_BIT     ;...set DIRTY_BIT...
000422 0012           00985         return                          ;...and return
                      00986 
                      00987 ;---- FDR_EXEC_SET_RGB routines -----
                      00988 
000424                00989 FDR_EXEC_SET_RGB
000424 D???           00990         bra     FDR_EXEC_EXIT           ; exit with FSR pointed to LEVEL
                      00991 
                      00992 
                      00993 ;---- FDR_TEST_FDR_DONE -----
                      00994 ; Return Z=1 if fader circuit in W is DONE.
                      00995 ;
                      00996 ; INPUTS: W     circuit number: according to the following encoding:
                      00997 ;               <b7-b2> channel 0 - channel N
                      00998 ;               <b1-b0> 00 = HUE
                      00999 ;                       01 = SAT
                      01000 ;                       01 = BRT
                      01001 ;                       11 = EXTRA - extra command channels: 0-15 are valid
                      01002 ;
                      01003 ; RETURN:       Z=1 if DONE or DISABLED
                      01004 ;               Z=0 if fader is active
                      01005 ;
                      01006 ; USES:   TBLPTR - but preserves it
                      01007 
000426                01008 FDR_TEST_FDR_DONE
000426 EC?? F???      01009         call    FDR_SET_FDR_TABLE_PTR
00042A A4D8           01010         btfss   STATUS,Z
00042C 0012           01011         return                          ; return with Z=0 & error code from FDR_SET... 
                      01012 
00042E 50DF           01013         movf    INDF2,W                 ; get the fader channel status byte
000430 0A00           01014         xorlw   FDR_STATE_DONE
000432 E0??           01015         bz      FTD_DONE
                      01016 
000434                01017 FTD_NOT_DONE
000434 94D8           01018         bcf     STATUS,Z
000436 0C00           01019         retlw   ERR_NO_ERROR
                      01020 
000438                01021 FTD_DONE
000438 84D8           01022         bsf     STATUS,Z
00043A 0C00           01023         retlw   ERR_NO_ERROR
                      01024 
                      01025 
                      01026 ;---- FDR_SET_FDR_TABLE_PTR -----
                      01027 ; Sets FSR2 to base of fader channel in fader table.
                      01028 ; TABLES ARE SETUP FOR MONOCHROME VERSION (code is the same ragardless)
                      01029 ;
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01030 ; INPUTS: W     fader channel number 
                      01031 ;               - if monochrome it's just the channel # - 0 through N
                      01032 ;               - if color uses the following encoding:
                      01033 ;                 <b7-b2> channel 0 - channel N
                      01034 ;                 <b1-b0> 00 = HUE
                      01035 ;                         01 = SAT
                      01036 ;                         01 = BRT
                      01037 ;                         11 = EXTRA - extra command channels: 0-15 are valid
                      01038 ;
                      01039 ; RETURN: FSR2  set to correct table base
                      01040 ;         Z=1 if OK, Z=0 if a pointer error occurred, W = ERR_BAD_CHANNEL
                      01041 ;
                      01042 ; NOTE: fader tables cannot be located in RAM bank 0 or error trapping will
                      01043 ; fail (you wouldn't want the fader tables in bank 0 anyway).
                      01044 ;
                      01045 ; USES:   TBLPTR - but preserves it
                      01046 ; Profile: 32 instruction cycles
                      01047 
  00000000            01048 PTR_ERR equ     0x0000
                      01049 
00043C                01050 FDR_SET_FDR_TABLE_PTR
                      01051         ; save table pointer
00043C CFF7 F???      01052         movff   TBLPTRH,temp_tblptrh
000440 CFF6 F???      01053         movff   TBLPTRL,temp_tblptrl
                      01054 
                      01055         ; compute lookup table offset from W (circuit number)
                      01056         ; = table base + (circuit number *2)
                      01057 
000444 6E??           01058         movwf   fdr_temp                ; save channel number
000446 0819           01059         sublw   FDR_POINTER_MAX
000448 E3??           01060         bnc     FSF_err
                      01061 
00044A 0E??           01062         movlw   LOW FDR_POINTERS        
00044C 6EF6           01063         movwf   TBLPTRL
00044E 90D8           01064         bcf     STATUS,C                ; clear carry
000450 34??           01065         rlcf    fdr_temp,W              ; multiply channel number by 2, into C
000452 26F6           01066         addwf   TBLPTRL,F               ; add to table pointer base
                      01067 
000454 0E??           01068         movlw   HIGH FDR_POINTERS
000456 6EF7           01069         movwf   TBLPTRH
000458 B0D8           01070         btfsc   STATUS,C                ; C is preserved from addwf instruction
00045A 2AF7           01071         incf    TBLPTRH,F
                      01072 
                      01073         ; read RAM address from table
00045C 0009           01074         tblrd*+                         ; read the low byte
00045E CFF5 FFD9      01075         movff   TABLAT,FSR2L
000462 0008           01076         tblrd*                          ; read the high byte
000464 50F5           01077         movf    TABLAT,W
000466 E0??           01078         bz      FSF_err                 ; need to break this out to detect err
000468 6EDA           01079         movwf   FSR2H
                      01080 
                      01081         ; restore table pointer and exit
00046A C??? FFF7      01082         movff   temp_tblptrh,TBLPTRH
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00046E C??? FFF6      01083         movff   temp_tblptrl,TBLPTRL
000472 84D8           01084         bsf     STATUS,Z                ; return OK
000474 0012           01085         return
                      01086 
000476 0E02           01087 FSF_err movlw   ERR_BAD_CHANNEL         ; return a reason code
000478 94D8           01088         bcf     STATUS,Z                ; signal error
00047A 0012           01089         return
                      01090 
                      01091 ; code_pack section requires a label for some reason. here goes:
                      01092 DATA_FADER_POINTER_TABLE   code_pack
                      01093 
000000                01094 FDR_POINTERS ; table of fader table pointers
000000 ?? ?? ?? ?? ?? 01095         data    fdr_00, fdr_01, fdr_02, fdr_03
       ?? ?? ?? 
000008 ?? ?? ?? ?? ?? 01096         data    fdr_04, fdr_05, fdr_06, fdr_07
       ?? ?? ?? 
000010 ?? ?? ?? ?? ?? 01097         data    fdr_08, fdr_09, fdr_10, fdr_11
       ?? ?? ?? 
000018 ?? ?? ?? ?? ?? 01098         data    fdr_12, fdr_13, fdr_14, fdr_15
       ?? ?? ?? 
000020 ?? ?? ?? ?? ?? 01099         data    fdr_16, fdr_17, fdr_18, fdr_19
       ?? ?? ?? 
000028 ?? ?? ?? ?? ?? 01100         data    fdr_20, fdr_21, fdr_22, fdr_23
       ?? ?? ?? 
000030 ?? ?? ?? ?? 00 01101         data    fdr_24, fdr_25, PTR_ERR, PTR_ERR
       00 00 00 
  00000019            01102 FDR_POINTER_MAX equ     .25
                      01103 
                      01104 DATA_FADER_POINTER_TABLE_END    code    ; also requries a label (go figure)
                      01105 
                      01106 
                      01107 ;---- FDR_COMPUTE_RECIPROCAL -----
                      01108 ; Returns the reciprocal of the number in W
                      01109 ;
                      01110 ; INPUTS: W     number
                      01111 ; RETURN: W     reciprocal
                      01112 ;
                      01113 ; USES:   TBLPTR - destroys it
                      01114 
000000                01115 FDR_COMPUTE_RECIPROCAL
000000 0F??           01116         addlw   LOW RECIPROCAL_TABLE
000002 6EF6           01117         movwf   TBLPTRL
000004 0E??           01118         movlw   HIGH RECIPROCAL_TABLE
000006 6EF7           01119         movwf   TBLPTRH
000008 B0D8           01120         btfsc   STATUS,C                ; account for the carry bit from low add
00000A 2AF7           01121         incf    TBLPTRH,F
00000C 0008           01122         tblrd   *
00000E 50F5           01123         movf    TABLAT,W
000010 0012           01124         return
                      01125 
                      01126 DATA_RECIPROCAL_TABLE   code_pack       ; code_pack section requires a label for some reason
                      01127 
000000                01128 RECIPROCAL_TABLE        ; table of 8 bit reciprocals
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000000 FF 80 55 40 33 01129         db      0xFF, 0x80, 0x55, 0x40, 0x33, 0x2A, 0x24, 0x20, 0x1C, 0x19, 0x17, 0x15, 0x13, 0x12, 0x11
                            , 0x10
       2A 24 20 1C 19 
       17 15 13 12 11 
       10 
000010 0F 0E 0D 0C 0C 01130         db      0x0F, 0x0E, 0x0D, 0x0C, 0x0C, 0x0B, 0x0B, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08
                            , 0x08
       0B 0B 0A 0A 09 
       09 09 08 08 08 
       08 
000020 07 07 07 07 06 01131         db      0x07, 0x07, 0x07, 0x07, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x05, 0x05, 0x05, 0x05, 0x05
                            , 0x05
       06 06 06 06 06 
       05 05 05 05 05 
       05 
000030 05 05 05 04 04 01132         db      0x05, 0x05, 0x05, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04
                            , 0x04
       04 04 04 04 04 
       04 04 04 04 04 
       04 
000040 04 03 03 03 03 01133         db      0x04, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03
                            , 0x03
       03 03 03 03 03 
       03 03 03 03 03 
       03 
000050 03 03 03 03 03 01134         db      0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02
                            , 0x02
       03 02 02 02 02 
       02 02 02 02 02 
       02 
000060 02 02 02 02 02 01135         db      0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02
                            , 0x02
       02 02 02 02 02 
       02 02 02 02 02 
       02 
000070 02 02 02 02 02 01136         db      0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02
                            , 0x02
       02 02 02 02 02 
       02 02 02 02 02 
       02 
000080 02 01 01 01 01 01137         db      0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
                            , 0x01
       01 01 01 01 01 
       01 01 01 01 01 
       01 
000090 01 01 01 01 01 01138         db      0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
                            , 0x01
       01 01 01 01 01 
       01 01 01 01 01 
       01 
0000A0 01 01 01 01 01 01139         db      0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
                            , 0x01
       01 01 01 01 01 
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       01 01 01 01 01 
       01 
0000B0 01 01 01 01 01 01140         db      0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
                            , 0x01
       01 01 01 01 01 
       01 01 01 01 01 
       01 
0000C0 01 01 01 01 01 01141         db      0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
                            , 0x01
       01 01 01 01 01 
       01 01 01 01 01 
       01 
0000D0 01 01 01 01 01 01142         db      0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
                            , 0x01
       01 01 01 01 01 
       01 01 01 01 01 
       01 
0000E0 01 01 01 01 01 01143         db      0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
                            , 0x01
       01 01 01 01 01 
       01 01 01 01 01 
       01 
0000F0 01 01 01 01 01 01144         db      0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
                            , 0x01
       01 01 01 01 01 
       01 01 01 01 01 
       01 
                      01145 
                      01146 DATA_RECIPROCAL_TABLE_END  code         ; code section requires a label for some reason
                      01147 
                      01148 
                      01149 ;*****************************************************************************
                      01150 ;***** UNIT TESTS ************************************************************
                      01151 ;*****************************************************************************
                      01152 
000000                01153 UT_CMD
                      01154     if UNITS_ENABLED
                      01155 ;       call    UT_CMD_LOADER           ; load one channel with pulse
                      01156 ;       call    UT_CMD_LOADER_ALL       ; load all channels
                      01157 ;       call    UT_CMD_LOADER_HSB       ; test HSB loader
                      01158 
000000 EC?? F???      01159         call    UT_FDR_SET_FDR_TABLE_PTR ; test the pointer lookup
                      01160 ;       call    UT_FDR_COMPUTE_RECIPROCAL ; test reciprocal function
                      01161 ;       call    UT_FDR_DISPATCH         ; call the dispatcher - infinite loop
                      01162     endif
000004 0012           01163         return
                      01164 
                      01165 
                      01166     if UNITS_ENABLED
                      01167 
  00000005            01168 TEST_CHANNEL    equ     .5
  00000015            01169 TEST_CIRCUIT    equ     (TEST_CHANNEL << 2) | SAT_OFFSET
                      01170 
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000006                01171 UT_FDR_COMPUTE_RECIPROCAL
000006 0E00           01172         movlw   0x00
000008 EC?? F???      01173         call    FDR_COMPUTE_RECIPROCAL
00000C 0E01           01174         movlw   0x01
00000E EC?? F???      01175         call    FDR_COMPUTE_RECIPROCAL
000012 0E02           01176         movlw   0x02
000014 EC?? F???      01177         call    FDR_COMPUTE_RECIPROCAL
000018 0E03           01178         movlw   0x03
00001A EC?? F???      01179         call    FDR_COMPUTE_RECIPROCAL
00001E 0E40           01180         movlw   0x40
000020 EC?? F???      01181         call    FDR_COMPUTE_RECIPROCAL
000024 0E80           01182         movlw   0x80
000026 EC?? F???      01183         call    FDR_COMPUTE_RECIPROCAL
00002A 0EE0           01184         movlw   0xE0
00002C EC?? F???      01185         call    FDR_COMPUTE_RECIPROCAL
000030 0EFE           01186         movlw   0xFE
000032 EC?? F???      01187         call    FDR_COMPUTE_RECIPROCAL
000036 0EFF           01188         movlw   0xFF
000038 EC?? F???      01189         call    FDR_COMPUTE_RECIPROCAL
                      01190 
00003C                01191 UT_FDR_SET_FDR_TABLE_PTR                ; test for set table pointer
                      01192 
                      01193 ; setup to test 8 channels. Modify for 64 or some other number
                      01194 
00003C 0E00           01195         movlw   (.0<<2)                 
00003E EC?? F???      01196         call    FDR_SET_FDR_TABLE_PTR   ; should set 0x400
000042 0E01           01197         movlw   (.0<<2)+1                       
000044 EC?? F???      01198         call    FDR_SET_FDR_TABLE_PTR   ; 0x40D
000048 0E02           01199         movlw   (.0<<2)+2                       
00004A EC?? F???      01200         call    FDR_SET_FDR_TABLE_PTR   ; 0x41A
                      01201 
00004E 0E04           01202         movlw   (.1<<2)
000050 EC?? F???      01203         call    FDR_SET_FDR_TABLE_PTR   ; 0x427
000054 0E08           01204         movlw   (.2<<2)
000056 EC?? F???      01205         call    FDR_SET_FDR_TABLE_PTR   ; 0x44E
00005A 0E0C           01206         movlw   (.3<<2)
00005C EC?? F???      01207         call    FDR_SET_FDR_TABLE_PTR   ; 0x475
000060 0E10           01208         movlw   (.4<<2)
000062 EC?? F???      01209         call    FDR_SET_FDR_TABLE_PTR   ; 0x49C
000066 0E14           01210         movlw   (.5<<2)
000068 EC?? F???      01211         call    FDR_SET_FDR_TABLE_PTR   ; 0x4C3
00006C 0E18           01212         movlw   (.6<<2)
00006E EC?? F???      01213         call    FDR_SET_FDR_TABLE_PTR   ; 0x4EA
000072 0E1C           01214         movlw   (.7<<2)
000074 EC?? F???      01215         call    FDR_SET_FDR_TABLE_PTR   ; 0x51A
                      01216 
                      01217         ; fail cases
000078 0E03           01218         movlw   (.0<<2)+3               ; error in HSB offset                   
00007A EC?? F???      01219         call    FDR_SET_FDR_TABLE_PTR
00007E 0E20           01220         movlw   (.8<<2)                 ; one over max
000080 EC?? F???      01221         call    FDR_SET_FDR_TABLE_PTR
000084 0EFC           01222         movlw   (.63<<2)                ; maximum legal (but invalid) value     
000086 EC?? F???      01223         call    FDR_SET_FDR_TABLE_PTR
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00008A 0012           01224         return
                      01225 
                      01226 
00008C                01227 UT_CMD_LOADER_HSB
00008C 0E??           01228         movlw   HIGH cmd_buffer
00008E 6EE0           01229         movwf   BSR                     ; work directly with page 3
000090 0E13           01230         movlw   0x13                    ; command 0x43
000092 6F00           01231         movwf   cmd_buffer,B
000094 0E05           01232         movlw   TEST_CHANNEL            ; channel
000096 6F00           01233         movwf   cmd_buffer+.1,B
000098 0E80           01234         movlw   0x80                    ; HUE
00009A 6F00           01235         movwf   cmd_buffer+.2,B
00009C 0EF0           01236         movlw   0xF0                    ; SAT
00009E 6F00           01237         movwf   cmd_buffer+.3,B
0000A0 0EDE           01238         movlw   0xDE                    ; BRT
0000A2 6F00           01239         movwf   cmd_buffer+.4,B
0000A4 6AE0           01240         clrf    BSR                     ; set to BANK 0
0000A6 EE?? F0??      01241         lfsr    1,cmd_buffer            ; set FSR1 to base of cmd input buffer
0000AA EC?? F???      01242         call    CMD_LOADER
0000AE 0012           01243         return
                      01244 
                      01245 
                      01246 
0000B0                01247 UT_CMD_LOADER_ALL
0000B0 0EFF           01248         movlw   0xFF
0000B2 6E??           01249         movwf   cmd_ut_temp             ; brt
                      01250 
0000B4 06??           01251 UT_CLA1 decf    cmd_ut_temp,F
0000B6 EC?? F???      01252         call    UT_CMD_LOADER
0000BA 06??           01253         decf    cmd_ut_temp,F           ; sat
0000BC EC?? F???      01254         call    UT_CMD_LOADER
0000C0 06??           01255         decf    cmd_ut_temp,F           ; hue
0000C2 E0??           01256         bz      UT_CLA2
0000C4 EC?? F???      01257         call    UT_CMD_LOADER
0000C8 06??           01258         decf    cmd_ut_temp,F           ; extra, or underflow
0000CA D???           01259         bra     UT_CLA1
0000CC EC?? F???      01260 UT_CLA2 call    UT_CMD_LOADER
0000D0 0012           01261         return
                      01262 
0000D2                01263 UT_CMD_LOADER   ; load some arbitrary garbage into the command buffer
0000D2 0E??           01264         movlw   HIGH cmd_buffer
0000D4 6EE0           01265         movwf   BSR                     ; work directly with page 3
                      01266 
0000D6 0E46           01267         movlw   0x46                    ; command 0x46 - thru DOWN
0000D8 0E47           01268         movlw   0x47                    ; command 0x47 - include REPEAT
0000DA 0E48           01269         movlw   0x48                    ; command 0x48 - include MIN
0000DC 0E49           01270         movlw   0x49                    ; command 0x49 - include MAX
0000DE 0E4A           01271         movlw   0x4A                    ; command 0x4A - include XFADE
0000E0 6F00           01272         movwf   cmd_buffer,B
                      01273 
                      01274 ;       movlw   TEST_CIRCUIT            ; circuit
0000E2 50??           01275         movf    cmd_ut_temp,W           ; circuit
0000E4 6F00           01276         movwf   cmd_buffer+.1,B
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01277 
0000E6 0E01           01278         movlw   0x01                    ; prescale
0000E8 6F00           01279         movwf   cmd_buffer+.2,B
                      01280 
0000EA 0E02           01281         movlw   0x02                    ; delay
0000EC 6F00           01282         movwf   cmd_buffer+.3,B
                      01283 
0000EE 0E03           01284         movlw   0x03                    ; up
0000F0 6F00           01285         movwf   cmd_buffer+.4,B
                      01286 
0000F2 0E04           01287         movlw   0x04                    ; on
0000F4 6F00           01288         movwf   cmd_buffer+.5,B
                      01289 
0000F6 0E02           01290         movlw   0x02                    ; down
0000F8 6F00           01291         movwf   cmd_buffer+.6,B
                      01292 
0000FA 0E06           01293         movlw   0x06                    ; off
0000FC 6F00           01294         movwf   cmd_buffer+.7,B
                      01295 
0000FE 0E00           01296         movlw   0x00                    ; repeat
000100 6F00           01297         movwf   cmd_buffer+.8,B
                      01298 
000102 0E02           01299         movlw   0x02                    ; min
000104 6F00           01300         movwf   cmd_buffer+.9,B
                      01301 
000106 0EF0           01302         movlw   0xF0                    ; max
000108 6F00           01303         movwf   cmd_buffer+.10,B
                      01304 
00010A 0E07           01305         movlw   0x07                    ; xfade
00010C 6F00           01306         movwf   cmd_buffer+.11,B
                      01307 
00010E 6AE0           01308         clrf    BSR                     ; set to BANK 0
                      01309 
000110 EE?? F0??      01310         lfsr    1,cmd_buffer            ; set FSR1 to base of cmd input buffer
000114 EC?? F???      01311         call    CMD_LOADER
000118 0012           01312         return
                      01313 
00011A                01314 UT_FDR_DISPATCH
                      01315 
                      01316     if FALSE
                      01317         ; pseudo-loader
                      01318         movlw   HIGH TEST_CIRCUIT
                      01319         movwf   BSR                     ; work directly with page 4
                      01320 
                      01321 ;       movlw   FDR_STATE_DISABLED
                      01322         movlw   FDR_STATE_DELAY         ; set initial state to DELAY
                      01323         movwf   FDR_STATE,B
                      01324 
                      01325 ;       movlw   0x00                    ; initial level
                      01326         movlw   0x80                    ; initial level
                      01327 ;       movlw   0xFF                    ; initial level
                      01328         movwf   FDR_LEVEL_H,B
                      01329 
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01330         movlw   0x01                    ; fire on every cycle
                      01331         movwf   FDR_PRESCALE,B
                      01332 
                      01333         movlw   0x02                    ; DELAY value (pre-incremented)
                      01334         movwf   FDR_WAIT,B
                      01335 
                      01336         movlw   0x05                    ; XFADE value
                      01337         movwf   FDR_XFADE,B
                      01338 
                      01339         movlw   0x04                    ; UP value
                      01340         movwf   FDR_UP,B
                      01341         
                      01342         movlw   0x03                    ; DOWN value
                      01343         movwf   FDR_DOWN,B
                      01344 
                      01345         movlw   0x02                    ; ON value
                      01346         movwf   FDR_DWELL,B
                      01347 
                      01348         movlw   0x06                    ; OFF value
                      01349         movwf   FDR_OFF,B
                      01350 
                      01351         movlw   0x02                    ; MIN value
                      01352         movwf   FDR_MIN,B
                      01353 
                      01354         movlw   0xF0                    ; MAX value
                      01355         movwf   FDR_MAX,B
                      01356 
                      01357         movlw   0x02                    ; REPEAT value
                      01358         movwf   FDR_REPEAT,B
                      01359 
                      01360         clrf    BSR                     ; set to BANK 0
                      01361     endif
                      01362 
                      01363         ; set prescale to simulate every cycle
00011A 0E01           01364         movlw   0x01
00011C 6E??           01365         movwf   cycle_prescale  
                      01366 
                      01367         ; setup and run triplet
00011E 6A??           01368         clrf    app_flags               ; clear all app flags
000120 0E05           01369         movlw   TEST_CHANNEL            ; set channel number
000122 6E??           01370         movwf   chn_num
000124 0E15           01371         movlw   TEST_CIRCUIT
000126 EC?? F???      01372         call    FDR_SET_FDR_TABLE_PTR   ; set FSR2 to cmd table base
00012A EC?? F???      01373 UT_C1   call    FDR_DISPATCH            ; dispatch for HUE
                      01374 ;       goto    UT_C1                   ; keep repeating
                      01375 
00012E 0012           01376         return
                      01377     endif
                      01378 
                      01379         END                             ; directive 'end of program'
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 42


SYMBOL TABLE
  LABEL                             VALUE 

A                                 00000000
ABDEN                             00000000
ABDOVF                            00000007
ACCESS                            00000000
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACQT0                             00000003
ACQT1                             00000004
ACQT2                             00000005
ADCON0                            00000FC2
ADCON1                            00000FC1
ADCON2                            00000FC0
ADCS0                             00000000
ADCS1                             00000001
ADCS2                             00000002
ADDEN                             00000003
ADEN                              00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADIP                              00000006
ADON                              00000000
ADRES                             00000FC3
ADRESH                            00000FC4
ADRESL                            00000FC3
AN10                              00000001
AN11                              00000004
AN12                              00000000
AN4                               00000005
AN8                               00000002
AN9                               00000003
APP_INCLUDE_FILE                  wClock.inc
ARG_HI_FLAG                       00000000
ARG_NUM_MAX                       00000000
B                                 00000001
BANKED                            00000001
BASE_OF_TABLES                    00002000
BAUDCON                           00000FB8
BAUDCTL                           00000FB8
BCLIE                             00000003
BCLIF                             00000003
BCLIP                             00000003
BF                                00000000
BGST                              00000005
BLU                               000000AB
BLU_OFFSET                        00000002
BOR                               00000000
BRG16                             00000003
BRGH                              00000002
BRT                               00000002
BRT_OFFSET                        00000002
BSR                               00000FE0
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 43


SYMBOL TABLE
  LABEL                             VALUE 

C                                 00000000
C1INV                             00000004
C1OUT                             00000006
C2INV                             00000005
C2OUT                             00000007
CCP1                              00000002
CCP1CON                           00000FBD
CCP1IE                            00000002
CCP1IF                            00000002
CCP1IP                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           00000FBA
CCP2IE                            00000000
CCP2IF                            00000000
CCP2IP                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCP2_PORTB                        00000003
CCP2_PORTC                        00000001
CCPR1                             00000FBE
CCPR1H                            00000FBF
CCPR1L                            00000FBE
CCPR2                             00000FBB
CCPR2H                            00000FBC
CCPR2L                            00000FBB
CED_FIN                           0000038E
CEU_FIN                           0000033A
CE_SLV1                           00000414
CFGS                              00000006
CHN_NUM_MAX                       00000015
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CIS                               00000003
CK                                00000006
CKE                               00000006
CKP                               00000004
CKT_NUM_MAX                       0000001D
CKT_TABLE_INCREMENT               00000005
CKT_TABLE_LEN                     00000027
CLK_TIMER                         00000BDC
CLP_FIN                           0000016A
CLP_MAX                           00000160
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 44


SYMBOL TABLE
  LABEL                             VALUE 

CLP_MIN                           0000015C
CLP_RPT                           00000158
CLP_XFD                           00000166
CLS_x                             000000F6
CL_ERROR                          0000004E
CL_LOAD_FADE                      000000FA
CL_LOAD_PATCH                     000000C2
CL_LOAD_SET_BRT                   00000052
CL_LOAD_SET_HSB                   0000006E
CL_LOAD_SET_RGB                   000000BE
CL_LOAD_WATCH                     00000172
CM0                               00000000
CM1                               00000001
CM2                               00000002
CMCON                             00000FB4
CMD_BUFFER_LEN                    0000000E
CMD_LOADER                        00000000
CMD_VALIDATE_CMDCODE              0000017A
CMIE                              00000006
CMIF                              00000006
CMIP                              00000006
CREN                              00000004
CS                                00000002
CSRC                              00000007
CUE_ARG                           00000002
CUE_CMD                           00000001
CUE_DONE                          00000000
CUE_JUMP                          00000005
CUE_LOOP                          00000003
CUE_LOOP_BLOCK                    00000004
CUE_MAX                           00000005
CUE_TABLES_START                  00002600
CVC_ERR                           000001AC
CVC_OK                            000001B0
CVR0                              00000000
CVR1                              00000001
CVR2                              00000002
CVR3                              00000003
CVRCON                            00000FB5
CVREN                             00000007
CVROE                             00000006
CVRR                              00000005
CVRSS                             00000004
CYCLE_START_FLAG                  00000001
CYN                               0000007F
D                                 00000005
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DC2B0                             00000004
DC2B1                             00000005
DDRA                              TRISA
DDRB                              TRISB
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 45


SYMBOL TABLE
  LABEL                             VALUE 

DDRC                              TRISC
DDRD                              TRISD
DDRE                              TRISE
DEVTYPE                           00004420
DEV_FAMILY                        00000018
DEV_INCLUDE_FILE                  d18f4520.inc
DIAGNOSTICS_ENABLED               00000001
DIRTY_BIT                         00000000
DONE                              00000001
D_A                               00000005
ECCP1AS                           00000FB6
ECCPAS                            00000FB6
ECCPAS0                           00000004
ECCPAS1                           00000005
ECCPAS2                           00000006
ECCPASE                           00000007
EEADR                             00000FA9
EECON1                            00000FA6
EECON2                            00000FA7
EEDATA                            00000FA8
EEIE                              00000004
EEIF                              00000004
EEIP                              00000004
EEPGD                             00000007
EIGHT                             00000010
ELEVEN                            00000013
ERR_BAD_ARGNUM                    00000003
ERR_BAD_CHANNEL                   00000002
ERR_BAD_COMMAND                   00000001
ERR_BAD_OPCODE                    00000004
ERR_CMD_LOADER_FAILED             00000005
ERR_GET_COMMAND_FAILED            00000006
ERR_GET_NEXT_CMD_FAILED           00000007
ERR_NO_ERROR                      00000000
EXT_OFFSET                        00000003
FADE                              00000056
FADE_MAX                          00000059
FADE_MIN                          00000058
FADE_REPEAT                       00000057
FADE_X                            0000005A
FALSE                             00000000
FAST                              00000001
FDR_COMPUTE_RECIPROCAL            00000000
FDR_COMPUTE_STEP_DOWN             000003D4
FDR_COMPUTE_STEP_UP               000003BC
FDR_COUNTER                       00000002
FDR_D1                            000001D2
FDR_DIRTY_FLAG                    000000FF
FDR_DIRTY_FLAG_OFS                00000002
FDR_DISPATCH                      000001B6
FDR_DOWN                          00000007
FDR_DOWN_DECR_H                   00000006
FDR_DOWN_DECR_L                   00000007
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 46


SYMBOL TABLE
  LABEL                             VALUE 

FDR_DWELL                         00000008
FDR_EXEC_DOWN_CYCLE               0000035A
FDR_EXEC_DOWN_FIRST               0000035A
FDR_EXEC_DOWN_STATE               0000035E
FDR_EXEC_DWELL_CYCLE              00000340
FDR_EXEC_DWELL_FIRST              00000340
FDR_EXEC_DWELL_STATE              00000354
FDR_EXEC_EXIT                     00000212
FDR_EXEC_OFF_CYCLE                00000394
FDR_EXEC_OFF_STATE                000003A6
FDR_EXEC_PATCH                    000003EC
FDR_EXEC_REPEAT                   000003AC
FDR_EXEC_SET_HSB                  00000416
FDR_EXEC_SET_RGB                  00000424
FDR_EXEC_UP_CYCLE                 0000030A
FDR_EXEC_UP_FIRST                 000002E0
FDR_EXEC_UP_STATE                 0000030E
FDR_EXEC_WAIT_STATE               0000021E
FDR_EXEC_XFADE_DOWN_CYCLE         00000284
FDR_EXEC_XFADE_DOWN_FIRST         00000274
FDR_EXEC_XFADE_DOWN_STATE         00000288
FDR_EXEC_XFADE_FIN                000002B4
FDR_EXEC_XFADE_UP_CYCLE           00000244
FDR_EXEC_XFADE_UP_FIRST           00000234
FDR_EXEC_XFADE_UP_STATE           00000248
FDR_LEVEL_H                       00000001
FDR_LEVEL_L                       00000002
FDR_MASTER_CKT                    00000002
FDR_MASTER_H                      00000005
FDR_MASTER_L                      00000004
FDR_MASTER_PRESCALE               00000003
FDR_MAX                           0000000B
FDR_MIN                           0000000A
FDR_OFF                           00000009
FDR_POINTERS                      00000000
FDR_POINTER_MAX                   00000019
FDR_PRESCALE                      00000003
FDR_PRESCALE_1                    00000001
FDR_REPEAT                        0000000C
FDR_SET_FDR_TABLE_PTR             0000043C
FDR_STATE                         00000000
FDR_STATE_DISABLED                00000000
FDR_STATE_DONE                    00000000
FDR_STATE_DOWN                    00000006
FDR_STATE_DWELL                   00000005
FDR_STATE_MAX                     0000000A
FDR_STATE_OFF                     00000007
FDR_STATE_PATCH                   00000008
FDR_STATE_SET_HSB                 00000009
FDR_STATE_SET_RGB                 0000000A
FDR_STATE_UP                      00000004
FDR_STATE_WAIT                    00000001
FDR_STATE_XFADE_DOWN              00000003
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 47


SYMBOL TABLE
  LABEL                             VALUE 

FDR_STATE_XFADE_UP                00000002
FDR_TABLE_LEN                     0000000D
FDR_TEST_FDR_DONE                 00000426
FDR_UP                            00000006
FDR_UP_INCR_H                     00000004
FDR_UP_INCR_L                     00000005
FDR_WAIT                          00000004
FDR_XFADE                         00000005
FERR                              00000002
FIVE                              0000000D
FIVE_                             00000005
FLTS                              00000002
FOSC                              00000024
FOUR                              0000000C
FREE                              00000004
FSF_err                           00000476
FSR0                              00000000
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1                              00000001
FSR1H                             00000FE2
FSR1L                             00000FE1
FSR2                              00000002
FSR2H                             00000FDA
FSR2L                             00000FD9
FTD_DONE                          00000438
FTD_NOT_DONE                      00000434
GCEN                              00000007
GIE                               00000007
GIEH                              00000007
GIEL                              00000006
GO                                00000001
GO_DONE                           00000001
GRN                               00000055
GRN_OFFSET                        00000001
HALF                              00000001
HLVDCON                           00000FD2
HLVDEN                            00000004
HLVDIE                            00000002
HLVDIF                            00000002
HLVDIP                            00000002
HLVDL0                            00000000
HLVDL1                            00000001
HLVDL2                            00000002
HLVDL3                            00000003
HSB_TABLES_LEN                    00000600
HSB_TABLES_START                  00002000
HUE                               00000000
HUE_OFFSET                        00000000
IBF                               00000007
IBOV                              00000005
ICD_ENABLED                       00000000
IDLEN                             00000007
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 48


SYMBOL TABLE
  LABEL                             VALUE 

INDF0                             00000FEF
INDF1                             00000FE7
INDF2                             00000FDF
INIT_PORTS_EXTERNAL               00000001
INIT_T0_EXTERNAL                  00000001
INIT_T1_EXTERNAL                  00000001
INIT_WATCHDOG_TIMER               00000001
INT0                              00000000
INT0E                             00000004
INT0F                             00000001
INT0IE                            00000004
INT0IF                            00000001
INT1                              00000001
INT1E                             00000003
INT1F                             00000000
INT1IE                            00000003
INT1IF                            00000000
INT1IP                            00000006
INT1P                             00000006
INT2                              00000002
INT2E                             00000004
INT2F                             00000001
INT2IE                            00000004
INT2IF                            00000001
INT2IP                            00000007
INT2P                             00000007
INTCON                            00000FF2
INTCON2                           00000FF1
INTCON3                           00000FF0
INTEDG0                           00000006
INTEDG1                           00000005
INTEDG2                           00000004
INTSRC                            00000007
IOFS                              00000002
IPEN                              00000007
IPR1                              00000F9F
IPR2                              00000FA2
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
IRVST                             00000005
ITS                               00000000
IVRST                             00000005
KBI0                              00000004
KBI1                              00000005
KBI2                              00000006
KBI3                              00000007
LATA                              00000F89
LATA0                             00000000
LATA1                             00000001
LATA2                             00000002
LATA3                             00000003
LATA4                             00000004
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 49


SYMBOL TABLE
  LABEL                             VALUE 

LATA5                             00000005
LATA6                             00000006
LATA7                             00000007
LATB                              00000F8A
LATB0                             00000000
LATB1                             00000001
LATB2                             00000002
LATB3                             00000003
LATB4                             00000004
LATB5                             00000005
LATB6                             00000006
LATB7                             00000007
LATC                              00000F8B
LATC0                             00000000
LATC1                             00000001
LATC2                             00000002
LATC3                             00000003
LATC4                             00000004
LATC5                             00000005
LATC6                             00000006
LATC7                             00000007
LATD                              00000F8C
LATD0                             00000000
LATD1                             00000001
LATD2                             00000002
LATD3                             00000003
LATD4                             00000004
LATD5                             00000005
LATD6                             00000006
LATD7                             00000007
LATE                              00000F8D
LATE0                             00000000
LATE1                             00000001
LATE2                             00000002
LED_INCLUDE_FILE                  led.inc
LVDCON                            00000FD2
LVDEN                             00000004
LVDIE                             00000002
LVDIF                             00000002
LVDIN                             00000005
LVDIP                             00000002
LVDL0                             00000000
LVDL1                             00000001
LVDL2                             00000002
LVDL3                             00000003
LVV0                              00000000
LVV1                              00000001
LVV2                              00000002
LVV3                              00000003
MAG                               000000D5
MAXRAM                            000002FF
MINUTES                           00000006
MONOCHROME_MODE                   00000001
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 50


SYMBOL TABLE
  LABEL                             VALUE 

N                                 00000004
NEVER                             000000FE
NINE                              00000011
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_CS                            00000002
NOT_DONE                          00000001
NOT_PD                            00000002
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RD                            00000000
NOT_RI                            00000004
NOT_SS                            00000005
NOT_T1SYNC                        00000002
NOT_T3SYNC                        00000002
NOT_TO                            00000003
NOT_W                             00000002
NOT_WR                            00000001
NOT_WRITE                         00000002
NOW                               000000FF
OBF                               00000006
OCLOCK                            00000015
OERR                              00000001
OFF                               00000000
ON                                00000001
ONE                               00000009
OP_ADD                            0000000B
OP_ADD_AND                        0000000C
OP_ADD_AND_SAVE                   0000000D
OP_ADD_IND                        0000000E
OP_ADD_IND_AND                    00000010
OP_ADD_IND_AND_SAVE               00000011
OP_ADD_IND_SAVE                   0000000F
OP_DEC                            00000006
OP_DECX2_RANGE                    00000008
OP_DECX3_RANGE                    00000009
OP_DECX4_RANGE                    0000000A
OP_DEC_RANGE                      00000007
OP_INC                            00000001
OP_INCX2_RANGE                    00000003
OP_INCX3_RANGE                    00000004
OP_INCX4_RANGE                    00000005
OP_INC_RANGE                      00000002
OP_LIT                            00000000
OP_OPCODE_MAX                     0000001A
OP_RAND                           00000019
OP_RAND_RANGE                     0000001A
OP_SUB                            00000012
OP_SUB_AND                        00000013
OP_SUB_AND_SAVE                   00000014
OP_SUB_IND                        00000015
OP_SUB_IND_AND                    00000017
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 51


SYMBOL TABLE
  LABEL                             VALUE 

OP_SUB_IND_AND_SAVE               00000018
OP_SUB_IND_SAVE                   00000016
ORN                               00000015
OSCCON                            00000FD3
OSCFIE                            00000007
OSCFIF                            00000007
OSCFIP                            00000007
OSCTUNE                           00000F9B
OSTS                              00000003
OV                                00000003
P                                 00000004
P1B                               00000005
P1C                               00000006
P1D                               00000007
P1M0                              00000006
P1M1                              00000007
PAST                              00000007
PATCH                             00000041
PC                                00000FF9
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PD                                00000002
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
PDC4                              00000004
PDC5                              00000005
PDC6                              00000006
PEIE                              00000006
PEN                               00000002
PGC                               00000006
PGD                               00000007
PGM                               00000005
PIE1                              00000F9D
PIE2                              00000FA0
PIR1                              00000F9E
PIR2                              00000FA1
PLAYLIST_CODA                     00000001
PLAYLIST_DONE                     00000000
PLLEN                             00000006
PLUSW0                            00000FEB
PLUSW1                            00000FE3
PLUSW2                            00000FDB
POR                               00000001
PORTA                             00000F80
PORTB                             00000F81
PORTC                             00000F82
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

PORTD                             00000F83
PORTE                             00000F84
POSTDEC0                          00000FED
POSTDEC1                          00000FE5
POSTDEC2                          00000FDD
POSTINC0                          00000FEE
POSTINC1                          00000FE6
POSTINC2                          00000FDE
PR2                               00000FCB
PREINC0                           00000FEC
PREINC1                           00000FE4
PREINC2                           00000FDC
PROD                              00000FF3
PRODH                             00000FF4
PRODL                             00000FF3
PRSEN                             00000007
PSA                               00000003
PSP0                              00000000
PSP1                              00000001
PSP2                              00000002
PSP3                              00000003
PSP4                              00000004
PSP5                              00000005
PSP6                              00000006
PSP7                              00000007
PSPIE                             00000007
PSPIF                             00000007
PSPIP                             00000007
PSPMODE                           00000004
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
PSSBD1                            00000001
PTR_ERR                           00000000
PWM1CON                           00000FB7
QUARTER                           00000003
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RA6                               00000006
RA7                               00000007
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 53


SYMBOL TABLE
  LABEL                             VALUE 

RBIE                              00000003
RBIF                              00000000
RBIP                              00000000
RBPU                              00000007
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RCEN                              00000003
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCIP                              00000005
RCMT                              00000006
RCON                              00000FD0
RCREG                             00000FAE
RCSTA                             00000FAB
RD                                00000000
RD0                               00000000
RD1                               00000001
RD16                              00000007
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
RE3                               00000003
RECIPROCAL_TABLE                  00000000
RED                               00000000
RED_OFFSET                        00000000
RI                                00000004
RSEN                              00000001
RX                                00000007
RX9                               00000006
RX9D                              00000000
RXDTP                             00000005
RX_ENABLED                        00000000
R_W                               00000002
S                                 00000003
SAT                               00000001
SAT_OFFSET                        00000001
SBOREN                            00000006
SCK                               00000003
SCKP                              00000004
SCL                               00000003
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 54


SYMBOL TABLE
  LABEL                             VALUE 

SCS0                              00000000
SCS1                              00000001
SDA                               00000004
SDI                               00000004
SDO                               00000005
SECOND_FLAG                       00000003
SEN                               00000000
SENDB                             00000003
SET_BRT                           00000011
SET_HSB                           00000023
SET_RGB                           00000033
SEVEN                             0000000F
SIX                               0000000E
SMP                               00000007
SP0                               00000000
SP1                               00000001
SP2                               00000002
SP3                               00000003
SP4                               00000004
SPBRG                             00000FAF
SPBRGH                            00000FB0
SPEN                              00000007
SREN                              00000005
SS                                00000005
SSPADD                            00000FC8
SSPBUF                            00000FC9
SSPCON1                           00000FC6
SSPCON2                           00000FC5
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPIP                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000FC7
STATUS                            00000FD8
STKFUL                            00000007
STKOVF                            00000007
STKPTR                            00000FFC
STKUNF                            00000006
SWDTE                             00000000
SWDTEN                            00000000
SWITCH_READ_FLAG                  00000002
SW_DEBOUNCE_MAX                   00000008
SW_HELD_COUNT                     0000003C
SW_STATE_FALLING_bp               00000002
SW_STATE_ON_bp                    00000000
SW_STATE_RISING_bp                00000001
SYNC                              00000004
T016BIT                           00000006
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 55


SYMBOL TABLE
  LABEL                             VALUE 

T08BIT                            00000006
T0CKI                             00000004
T0CON                             00000FD5
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0PS0                             00000000
T0PS1                             00000001
T0PS2                             00000002
T0PS3                             00000003
T0SE                              00000004
T13CKI                            00000000
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000FCD
T1OSCEN                           00000003
T1OSI                             00000001
T1OSO                             00000000
T1RUN                             00000006
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000FCA
T2OUTPS0                          00000003
T2OUTPS1                          00000004
T2OUTPS2                          00000005
T2OUTPS3                          00000006
T3CCP1                            00000003
T3CCP2                            00000006
T3CKPS0                           00000004
T3CKPS1                           00000005
T3CON                             00000FB1
T3SYNC                            00000002
TABLAT                            00000FF5
TBLPTR                            00000FF6
TBLPTRH                           00000FF7
TBLPTRL                           00000FF6
TBLPTRU                           00000FF8
TEN                               00000012
TEN_                              00000002
TEST_CHANNEL                      00000005
TEST_CIRCUIT                      00000015
THREE                             0000000B
TMR0H                             00000FD7
TMR0IE                            00000005
TMR0IF                            00000002
TMR0IP                            00000002
TMR0L                             00000FD6
TMR0ON                            00000007
TMR1CS                            00000001
TMR1H                             00000FCF
TMR1IE                            00000000
TMR1IF                            00000000
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 56


SYMBOL TABLE
  LABEL                             VALUE 

TMR1IP                            00000000
TMR1L                             00000FCE
TMR1ON                            00000000
TMR2                              00000FCC
TMR2IE                            00000001
TMR2IF                            00000001
TMR2IP                            00000001
TMR2ON                            00000002
TMR3CS                            00000001
TMR3H                             00000FB3
TMR3IE                            00000001
TMR3IF                            00000001
TMR3IP                            00000001
TMR3L                             00000FB2
TMR3ON                            00000000
TO                                00000003
TOS                               00000FFD
TOSH                              00000FFE
TOSL                              00000FFD
TOSU                              00000FFF
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TO_                               00000008
TRISA                             00000F92
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISA6                            00000006
TRISA7                            00000007
TRISB                             00000F93
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000F94
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000F95
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 57


SYMBOL TABLE
  LABEL                             VALUE 

TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000F96
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TRUE                              00000001
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TWELVE                            00000014
TWENTY                            00000004
TWO                               0000000A
TX                                00000006
TX9                               00000006
TX9D                              00000000
TXCKP                             00000004
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXIP                              00000004
TXREG                             00000FAD
TXSTA                             00000FAC
UA                                00000001
UNITS_ENABLED                     00000001
UT_C1                             0000012A
UT_CLA1                           000000B4
UT_CLA2                           000000CC
UT_CMD                            00000000
UT_CMD_LOADER                     000000D2
UT_CMD_LOADER_ALL                 000000B0
UT_CMD_LOADER_HSB                 0000008C
UT_FDR_COMPUTE_RECIPROCAL         00000006
UT_FDR_DISPATCH                   0000011A
UT_FDR_SET_FDR_TABLE_PTR          0000003C
VCFG0                             00000004
VCFG1                             00000005
VDIRMAG                           00000007
VIO                               000000D5
W                                 00000000
WATCH                             00000060
WCOL                              00000007
WDTCON                            00000FD1
WR                                00000001
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 58


SYMBOL TABLE
  LABEL                             VALUE 

WREG                              00000FE8
WREN                              00000002
WRERR                             00000003
WUE                               00000001
YEL                               0000002A
Z                                 00000002
_BOREN_NOSLP_2L                   000000FD
_BOREN_OFF_2L                     000000F9
_BOREN_ON_2L                      000000FB
_BOREN_SBORDIS_2L                 000000FF
_BORV_0_2L                        000000E7
_BORV_1_2L                        000000EF
_BORV_2_2L                        000000F7
_BORV_3_2L                        000000FF
_CCP2MX_PORTBE_3H                 000000FE
_CCP2MX_PORTC_3H                  000000FF
_CONFIG1H                         00300001
_CONFIG2H                         00300003
_CONFIG2L                         00300002
_CONFIG3H                         00300005
_CONFIG4L                         00300006
_CONFIG5H                         00300009
_CONFIG5L                         00300008
_CONFIG6H                         0030000B
_CONFIG6L                         0030000A
_CONFIG7H                         0030000D
_CONFIG7L                         0030000C
_CP0_OFF_5L                       000000FF
_CP0_ON_5L                        000000FE
_CP1_OFF_5L                       000000FF
_CP1_ON_5L                        000000FD
_CPB_OFF_5H                       000000FF
_CPB_ON_5H                        000000BF
_CPD_OFF_5H                       000000FF
_CPD_ON_5H                        0000007F
_DEBUG_OFF_4L                     000000FF
_DEBUG_ON_4L                      0000007F
_DEVID1                           003FFFFE
_DEVID2                           003FFFFF
_EBTR0_OFF_7L                     000000FF
_EBTR0_ON_7L                      000000FE
_EBTR1_OFF_7L                     000000FF
_EBTR1_ON_7L                      000000FD
_EBTRB_OFF_7H                     000000FF
_EBTRB_ON_7H                      000000BF
_FCMEN_OFF_1H                     000000BF
_FCMEN_ON_1H                      000000FF
_IDLOC0                           00200000
_IDLOC1                           00200001
_IDLOC2                           00200002
_IDLOC3                           00200003
_IDLOC4                           00200004
_IDLOC5                           00200005
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 59


SYMBOL TABLE
  LABEL                             VALUE 

_IDLOC6                           00200006
_IDLOC7                           00200007
_IESO_OFF_1H                      0000007F
_IESO_ON_1H                       000000FF
_LPT1OSC_OFF_3H                   000000FB
_LPT1OSC_ON_3H                    000000FF
_LVP_OFF_4L                       000000FB
_LVP_ON_4L                        000000FF
_MCLRE_OFF_3H                     0000007F
_MCLRE_ON_3H                      000000FF
_OSC_ECIO6_1H                     000000F5
_OSC_EC_1H                        000000F4
_OSC_HSPLL_1H                     000000F6
_OSC_HS_1H                        000000F2
_OSC_INTIO67_1H                   000000F8
_OSC_INTIO7_1H                    000000F9
_OSC_LP_1H                        000000F0
_OSC_RCIO6_1H                     000000F7
_OSC_RC_1H                        000000F3
_OSC_XT_1H                        000000F1
_PBADEN_OFF_3H                    000000FD
_PBADEN_ON_3H                     000000FF
_PWRT_OFF_2L                      000000FF
_PWRT_ON_2L                       000000FE
_STVREN_OFF_4L                    000000FE
_STVREN_ON_4L                     000000FF
_WDTPS_1024_2H                    000000F5
_WDTPS_128_2H                     000000EF
_WDTPS_16384_2H                   000000FD
_WDTPS_16_2H                      000000E9
_WDTPS_1_2H                       000000E1
_WDTPS_2048_2H                    000000F7
_WDTPS_256_2H                     000000F1
_WDTPS_2_2H                       000000E3
_WDTPS_32768_2H                   000000FF
_WDTPS_32_2H                      000000EB
_WDTPS_4096_2H                    000000F9
_WDTPS_4_2H                       000000E5
_WDTPS_512_2H                     000000F3
_WDTPS_64_2H                      000000ED
_WDTPS_8192_2H                    000000FB
_WDTPS_8_2H                       000000E7
_WDT_OFF_2H                       000000FE
_WDT_ON_2H                        000000FF
_WRT0_OFF_6L                      000000FF
_WRT0_ON_6L                       000000FE
_WRT1_OFF_6L                      000000FF
_WRT1_ON_6L                       000000FD
_WRTB_OFF_6H                      000000FF
_WRTB_ON_6H                       000000BF
_WRTC_OFF_6H                      000000FF
_WRTC_ON_6H                       000000DF
_WRTD_OFF_6H                      000000FF
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 60


SYMBOL TABLE
  LABEL                             VALUE 

_WRTD_ON_6H                       0000007F
_XINST_OFF_4L                     000000BF
_XINST_ON_4L                      000000FF
__18F4420                         00000001
app_flags                         00000000
c00                               00000000
c01                               00000004
c02                               00000008
c03                               0000000C
c04                               00000010
c05                               00000014
c06                               00000018
c07                               0000001C
c08                               00000020
c09                               00000024
c10                               00000028
c11                               0000002C
c12                               00000030
c13                               00000034
c14                               00000038
c15                               0000003C
c16                               00000040
c17                               00000044
c18                               00000048
c19                               0000004C
c20                               00000050
c21                               00000054
c22                               00000058
c23                               0000005C
c24                               00000060
c25                               00000064
c26                               00000068
c27                               0000006C
c28                               00000070
c29                               00000074
c30                               00000078
c31                               0000007C
c32                               00000080
c33                               00000084
c34                               00000088
c35                               0000008C
c36                               00000090
c37                               00000094
c38                               00000098
c39                               0000009C
c40                               000000A0
c41                               000000A4
c42                               000000A8
c43                               000000AC
c44                               000000B0
c45                               000000B4
c46                               000000B8
c47                               000000BC
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 61


SYMBOL TABLE
  LABEL                             VALUE 

c48                               000000C0
c49                               000000C4
c50                               000000C8
c51                               000000CC
c52                               000000D0
c53                               000000D4
c54                               000000D8
c55                               000000DC
c56                               000000E0
c57                               000000E4
c58                               000000E8
c59                               000000EC
c60                               000000F0
c61                               000000F4
c62                               000000F8
c63                               000000FC
chn_num                           00000000
ckt_num                           00000000
cmd_argcount                      00000007
cmd_buffer                        00000009
cmd_command                       00000006
cmd_ut_temp                       00000008
cue_watch                         00000000
cvc_tst                           
cycle_prescale                    00000000
dummy_label_200                   00000200
fdr_00                            00000100
fdr_01                            0000010D
fdr_02                            0000011A
fdr_03                            00000127
fdr_04                            00000134
fdr_05                            00000141
fdr_06                            0000014E
fdr_07                            0000015B
fdr_08                            00000168
fdr_09                            00000175
fdr_10                            00000182
fdr_11                            0000018F
fdr_12                            0000019C
fdr_13                            000001A9
fdr_14                            000001B6
fdr_15                            000001C3
fdr_16                            000001D0
fdr_17                            000001DD
fdr_18                            000001EA
fdr_19                            00000200
fdr_20                            0000020D
fdr_21                            0000021A
fdr_22                            00000227
fdr_23                            00000234
fdr_24                            00000241
fdr_25                            0000024E
fdr_level                         00000000
MPASM  5.34                     LED_FADER.ASM   5-22-2010  11:43:08         PAGE 62


SYMBOL TABLE
  LABEL                             VALUE 

fdr_temp                          00000001
fdr_temp_hi                       00000002
fdr_temp_lo                       00000003
fdr_temp_max                      00000005
fdr_temp_min                      00000004
setptr                            
switch                            
switch01b                         00000000
switch01p                         00000F80
tbladdr                           
tblindx                           
tblread                           
temp_tblptrh                      00000000
temp_tblptrl                      00000000

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed


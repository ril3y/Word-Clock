MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;*****************************************************************************
                      00002 ; PIC18F family - cues and playback code
                      00003 ;*****************************************************************************
                      00004 ;
                      00005 ;    Filename:          led_cue.asm
                      00006 ;    Author, Company:   Alden Hart, Luke's Lights
                      00007 ;    Chip Support:      Supports PIC18F family
                      00008 ;    Revision:          091130
                      00009 ;
                      00010 ;*****************************************************************************
                      00011 ; A CUE is a single lighting event that may involve a dynamic or repeating fade
                      00012 ; CUES are made of one or more individual commands (CMDs)
                      00013 ; A set of CUEs that run in sequence are a PLAYLIST (aka cue list, cue sheet)
                      00014 ; PLAYBACK is automatically playing one cue after another by detecting cue ends
                      00015 ;
                      00016 ; DISCUSSION OF TABLES AND POINTERS (see spreadsheet Playlists tab for details). 
                      00017 ; There is a hierarchy of tables:
                      00018 ;   - Playlist Master table
                      00019 ;       - Playlist_XXX tables   (one of which will be the "active" playlist)
                      00020 ;           - Cue_XXX tables    (one of which will be the "current" cue)
                      00021 ;
                      00022 ; The playlist master table is a collection of 16 bit pointers to one or more
                      00023 ; playlist tables, and is always terminated by PLAYLIST_DONE (0x0000). It is
                      00024 ; also be preceded by PLAYLIST_DONE to support backwards navigation.
                      00025 ;
                      00026 ; The play_master_ptr_hi/lo pointer (master prointer) is initialized to the 
                      00027 ; first location of the master table. A helper function is provided to reset 
                      00028 ; this pointer. The pointer is manipulated using the PLAY_GET_NEXT_PLAYLIST 
                      00029 ; and PLAY_GET_PREV_PLAYLIST calls. GET_NEXT will wrap to the beginning of 
                      00030 ; the table on overflow. GET_PREV will stick at the beginning. There are no 
                      00031 ; looping or jump commands in this table. The master pointer can also be set 
                      00032 ; directly using the PLAYLIST command from the serial port (or in a cue?).
                      00033 ;
                      00034 ; The playlist pointed to by the master pointer is considered the "active playlist".
                      00035 ;
                      00036 ; The play_ptr_hi/lo pointer (playlist pointer) points to the current cue in the 
                      00037 ; active playlist. By convention the pointer is not advanced until it's needed 
                      00038 ; (i.e. it's pre-incremented). The playlist pointer is manipulated using the
                      00039 ; PLAY_GET_NEXT_CUE function - which executes all increments, looping, jumps, 
                      00040 ; DONE and CODA handling. There is no PLAY_GET_PREV_CUE command. 
                      00041 ;
                      00042 ; The cue pointed to by the play_ptr_hi/lo is considered the "current cue".
                      00043 ;
                      00044 ; The cue_ptr_hi/lo pointer (cue pointer) points to the command in the 
                      00045 ; current cue. Since all commands in a cue are run to completion, the cue
                      00046 ; pointer is a more dynamic pointer than the playlist pointers. The cue pointer
                      00047 ; is under the control of the CUE_RUN_NEXT_CUE and CUE_LOAD_CUE functions 
                      00048 ; which use various navigation functions to move this pointer.
                      00049 ;
                      00050 ; I'm not sure if I have the dividing line between the playlist functions and 
                      00051 ; the cue functions exactly right.
                      00052 
                      00053 
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00054 ;----- Include files and other setup------
                      00055 
                      00056 #include <global.inc>                   ; 1: global defines - must be first
                      00001 ;*****************************************************************************
                      00002 ; global.inc - global header file for any application or chip family
                      00003 ;*****************************************************************************
                      00004 ;
                      00005 ;    Filename:          global.inc
                      00006 ;    Function:          define files, global equates and macros
                      00007 ;    Author, Company:   Alden Hart, Luke's Lights
                      00008 ;    Date/Time/Rev:     091015
                      00009 ;
                      00010 ; This file must be the first include file in each .asm file
                      00011 ; Set this file up first
                      00012 
                      00013 ;----- Include file definitions ------
                      00014 ;
                      00015 ; All ASM files must have this set of includes in this order:
                      00016 ;#include <global.inc>                  ; 1: global defines - must be first
                      00017 ;#include <DEV_INCLUDE_FILE>            ; 2: Our device include file
                      00018 ;#include <LED_INCLUDE_FILE>            ; 3: LED subsystem include file
                      00019 ;#include <APP_INCLUDE_FILE>            ; 4: Application include file
                      00020 ;
                      00021 ; Which are set up here:
                      00022 #define DEV_INCLUDE_FILE d18f4520.inc   ; device header file
                      00023 #define LED_INCLUDE_FILE led.inc        ; led sub-system header file
                      00024 #define APP_INCLUDE_FILE wClock.inc     ; application header file
                      00025 
                      00026 ;----- Fundamental definitions ------
                      00027 
  00000001            00028 TRUE            equ     1       ; must equal 1 - do not re-assign
  00000000            00029 FALSE           equ     0       ; must equal 0 - do not re-assign
  00000001            00030 ON              equ     1
  00000000            00031 OFF             equ     0
                      00032 
                      00033 ;---- Global error return codes ----
                      00034 
  00000000            00035 ERR_NO_ERROR            equ     .00     ; not actually an error, probably an end
  00000001            00036 ERR_BAD_COMMAND         equ     .01     ; invalid command value
  00000002            00037 ERR_BAD_CHANNEL         equ     .02     ; invalid channel number or encoded channel
  00000003            00038 ERR_BAD_ARGNUM          equ     .03     ; invalid argument number
  00000004            00039 ERR_BAD_OPCODE          equ     .04     ; invalid argument opcode
  00000005            00040 ERR_CMD_LOADER_FAILED   equ     .05     ; command loader failed in cmd module
  00000006            00041 ERR_GET_COMMAND_FAILED  equ     .06     ; get_command failed in presets module
  00000007            00042 ERR_GET_NEXT_CMD_FAILED equ     .07     ; get_next failed in presets module
                      00043 
                      00044 ;---- Handy global macros ----
                      00045 
                      00046 ;---- Handy macro to set a 16 bit pointer to a literal address
                      00047 
                      00048 setptr  macro   ADDRESS, ptr_hi, ptr_lo
                      00049         movlw   HIGH ADDRESS
                      00050         movwf   ptr_hi
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00051         movlw   LOW ADDRESS
                      00052         movwf   ptr_lo
                      00053         endm
                      00054 
                      00055 ;---- Handy macro to set table pointer to an address
                      00056 
                      00057 tbladdr macro   ADDRESS
                      00058         movlw   HIGH ADDRESS
                      00059         movwf   TBLPTRH
                      00060         movlw   LOW ADDRESS
                      00061         movwf   TBLPTRL
                      00062         endm
                      00063 
                      00064 ;---- Handy macro to set table pointer to an address indexed by a second value
                      00065 
                      00066 tblindx macro   ADDRESS, index  ; index is a mem variable name, not a literal
                      00067         movlw   high ADDRESS
                      00068         movwf   TBLPTRH
                      00069         movlw   low ADDRESS
                      00070         movwf   TBLPTRL
                      00071         rlncf   index,W                 ; multiply index value by 2
                      00072         addwf   TBLPTRL
                      00073         movlw   0                       ; propagate carry (if any)
                      00074         addwfc  TBLPTRH
                      00075         endm
                      00076 
                      00077 ;---- Handy macro to read a 16 bitvalue from a table into a pointer
                      00078 ;     Usually follows tbladdr or tblindx
                      00079 ;     Leaves table pointer to next location
                      00080 
                      00081 tblread macro   ptr_hi, ptr_lo          ; hi and lo registers for table read
                      00082         tblrd*+
                      00083         movff   TABLAT,ptr_lo           ; DATA statements are lo/hi endian
                      00084         tblrd*+
                      00085         movff   TABLAT,ptr_hi
                      00086         endm
                      00087 
                      00088 ;---- SWITCH statement macro (jump through a vector table) ----
                      00089 ; OK, it's not REALLY a switch/case statement - ot works differently than C
                      00090 ;
                      00091 ; Calling convention is:
                      00092 ;
                      00093 ;       rlncf   cmd_command,W           ; load table index x2 into W
                      00094 ;       switch                          ; call the macro
                      00095 ;       data    CL_ERROR                ; table index 0
                      00096 ;       data    CL_LOAD_SET_HSB         ; table index 1 (etc).
                      00097 ;       data    CL_LOAD_SET_RGB
                      00098 ;       data    CL_LOAD_PATCH
                      00099 ;       data    CL_LOAD_FADE
                      00100 ;       data    CL_LOAD_WATCH           ; max index. not range checked.
                      00101 ;
                      00102 ; You must also include the following lines in any file but the main:
                      00103 ;
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00104 ;       extern  tblptrh_temp
                      00105 ;       extern  tblptrl_temp
                      00106 ;
                      00107 ; CONSTRAINTS:
                      00108 ;       W must contain the table index multipled by 2 prior to invoking switch
                      00109 ;       The macro must be followed by the actual jump table as illustrated above.
                      00110 ;       The first element in the jump table must be index zero (0)
                      00111 ;       Tables are limited to 128 entries or you must change case for 16-bit math
                      00112 ;       The macro does not check that the index is in range for the table...
                      00113 ;       ...presumably this is validated by an upstream data validation checker.
                      00114 ;
                      00115 ; This macro is not nearly as code efficient as a computed BRA (below), but  
                      00116 ; doesn't break if it crosses on page boundaries:
                      00117 ;
                      00118 ;       movlw   HIGH jump
                      00119 ;       movwf   PCLATH
                      00120 ;       rlncf   index,W                 ; get command code x2 into W...
                      00121 ;       addlw   LOW jump                ;...this only works with BRAs 
                      00122 ;       movwf   PCL                     ;...GOTOs require x4
                      00123 ;jump   bra     CL_ERROR
                      00124 ;       bra     CL_LOAD_SET_HSB
                      00125 ;       bra     CL_LOAD_SET_RGB
                      00126 ;       bra     CL_LOAD_PATCH
                      00127 ;       bra     CL_LOAD_FADE
                      00128 ;       bra     CL_LOAD_WATCH
                      00129 
                      00130 switch  macro
                      00131         local   table_base
                      00132         movff   TBLPTRH,temp_tblptrh    ; save current table pointer
                      00133         movff   TBLPTRL,temp_tblptrl
                      00134 
                      00135         addlw   LOW table_base          ; add index (W) to table base
                      00136         movwf   TBLPTRL                 ; set low pointer
                      00137         movlw   HIGH table_base
                      00138         movwf   TBLPTRH
                      00139         btfsc   STATUS,C                ; propagate the carry from the add
                      00140         incf    TBLPTRH,F
                      00141 
                      00142         tblrd*+                         ; read and save vector address lo byte
                      00143         movf    TABLAT,W
                      00144         tblrd*                          ; read and save vector address hi byte
                      00145         movff   TABLAT,PCLATH
                      00146 
                      00147         movff   temp_tblptrh,TBLPTRH    ; restore calling table pointer
                      00148         movff   temp_tblptrl,TBLPTRL
                      00149 
                      00150         movwf   PCL                     ; jump to case routine
                      00151 table_base
                      00152         endm
                      00153 
                      00057 #include <DEV_INCLUDE_FILE>             ; 2: Our device include file
                      00001 ;*****************************************************************************
                      00002 ; d18f2520 - device header file
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00003 ;*****************************************************************************
                      00004 ;
                      00005 ;    Filename:          d18f4520.inc
                      00006 ;    Author, Company:   Alden Hart, Luke's Lights
                      00007 ;    Date/Time/Rev:     091015
                      00008 ;
                      00009 ; Choses device and sets basic parameters related to the device and it's 
                      00010 ; use in this application
                      00011 ; 
                      00012 
                      00013 ;----- Common, device-specific definitions -----
                      00014 
  00000018            00015 DEV_FAMILY      equ     18              ; for F18 series
  00000024            00016 FOSC            equ     .36             ; MHz (approximate and must be tested)
                      00017 
                      00018 ; Used to qualify instructions:
  00000000            00019 A       equ     0                       ; Access Bank
  00000001            00020 B       equ     1                       ; BSR banked
                      00021 
                      00022 ;------ Select Device -----
                      00023 ; pick only one:
                      00024 ;DEVTYPE  equ   2420            ; 18F2420
                      00025 ;DEVTYPE  equ   2520            ; 18F2520
  00004420            00026 DEVTYPE  equ    4420            ; 18F4420
                      00027 ;DEVTYPE  equ   4520            ; 18F4520
                      00028 
                      00029 ; PIC18F2420
                      00030     if DEVTYPE == 2420
                      00031         nolist
                      00032 #include <p18f2420.inc>
                      00033         list
                      00034 ;       list    p=18f2420               ; not needed - processor is set by MPLAB
                      00035 MAXRAM  equ     0x02FF
                      00036     endif
                      00037 
                      00038 ;PIC18F2520
                      00039     if DEVTYPE == 2520
                      00040         nolist
                      00041 #include <p18f2520.inc>
                      00042         list
                      00043 ;       list    p=18f2520               ; not needed - processor is set by MPLAB
                      00044 MAXRAM  equ     0x05FF
                      00045     endif
                      00046 
                      00047 ;PIC18F4420
                      00048     if DEVTYPE == 4420
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC18F4420 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2007 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00008 
                      01293         LIST
                      00051         list
                      00052 ;       list    p=18f4420               ; not needed - processor is set by MPLAB
  000002FF            00053 MAXRAM  equ     0x02FF
                      00054     endif
                      00055 
                      00056 ;PIC18F4520
                      00057     if DEVTYPE == 4520
                      00058         nolist
                      00059 #include <p18f4520.inc>
                      00060         list
                      00061 ;       list    p=18f4520               ; not needed - processor is set by MPLAB
                      00062 MAXRAM  equ     0x05FF
                      00063     endif
                      00058 #include <LED_INCLUDE_FILE>             ; 3: LED subsystem include file
                      00001 ;*****************************************************************************
                      00002 ; PIC18F family - LED subsystem include file
                      00003 ;*****************************************************************************
                      00004 ;*****************************************************************************
                      00005 ;
                      00006 ;    Filename:          led.inc
                      00007 ;    Author, Company:   Alden Hart, Luke's Lights
                      00008 ;    Chip Support:      Supports PIC18F family
                      00009 ;    Revision:          091015
                      00010 ;
                      00011 ;    This file basically serves as documentation for creating cues and playback
                      00012 ;
                      00013 ;*****************************************************************************
                      00014 ; CUES AND PLAYBACK
                      00015 ; 
                      00016 ; PLAY_INIT               Init playlist/cue module and load first playlist/cue
                      00017 ; PLAY_GET_NEXT_PLAYLIST  Return ptr to next playlist in playlist master table
                      00018 ; PLAY_GET_PREV_PLAYLIST  Return ptr to previous playlist in playlist master table
                      00019 ; PLAY_START_PLAYIST      Start a playlist from playlist ptr (becomes active playlist)
                      00020 ; PLAY_RUN_NEXT_CUE       Run next cue in active playlist
                      00021 ;         
                      00022 ; CUE_LOAD_CUE            Load an entire cue
                      00023 ; CUE_GET_NEXT_COMMAND    Iterator used for for loading an entire cue
                      00024 ; CUE_GET_COMMAND         Load a single command from cue (into FDR_LOADER buffer)
                      00025 ; CUE_SET_ARGUMENT        Load an argument into arg table
                      00026 ; CUE_GET_ARGUMENT        Get an argument from arg table
                      00027 ;
                      00028 ; CUES
                      00029 ;
                      00030 ; A CUE is a set of COMMANDS that run as a unit to load the state of the 
                      00031 ; lighting system. A cue takes data from program memory and loads the commands
                      00032 ; in to the FADER tables (there are some exceptions).
                      00033 ;
                      00034 ; For example, if you wanted to load 8 different hue waveforms, set 
                      00035 ; saturations to 8 different static levels, and PATCH all brightnesses to a 
                      00036 ; master channel, this could be done using a cue. 
                      00037 ;
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00038 ; The challenge is to define (and encode) complex cues in a way that's both 
                      00039 ; simple to understand and program and is also relatively memory efficicient. 
                      00040 ; The above example would take about ~200 bytes if performed as a simple set of 
                      00041 ; commands. Using the cue tools for definition and encoding this same 
                      00042 ; operation could be encoded in as little as ~20 bytes.
                      00043 ;
                      00044 ; To do this, a series of other operations is supported for cues:
                      00045 ; 
                      00046 ;       - CUE_CMD               load a regular command from pgm memory to RAM
                      00047 ;       - CUE_ARG               load an argument structure into an arg cell
                      00048 ;       - CUE_LOOP              load the next command N times           
                      00049 ;       - CUE_LOOP_BLOCK        loop until END_ADDR, N times, starting at START_ADDR
                      00050 ;       - CUE_JUMP              jump to JUMP_ADDR
                      00051 ;       - CUE_DONE              end of cue or playback
                      00052 ;       - CUE_CODA              start queue over
                      00053 ;
                      00054 ; Details of the above operations are littered throughout the headers in this
                      00055 ; file. Summaries of the cue operations are provided below;
                      00056 ;
                      00057 ; CUE_CMD:      CUE_CMD, cmd, argmask, arg0....argN
                      00058 ;
                      00059 ; Action is to load the command into RAM - similarly to if the command was 
                      00060 ; received in a serial RX buffer. Contains a command code followed by a 
                      00061 ; bitmask specifying which args in the command are to be read lterally from 
                      00062 ; the command line and which args are to be loaded from the argument cells. 
                      00063 ; The argmask is one byte long except in the case of the FADE command where 
                      00064 ; it is 2 bytes. See CUE_LOAD_COMMAND for details.
                      00065 ; 
                      00066 ; CUE_ARG:      CUE_ARG, argnum, opcode, var1, [var2], [var3]
                      00067 ;
                      00068 ; Action is to initialize one of the argument cells with an opcode and one or
                      00069 ; more starting values (vars). Consists of a CUE_ARG byte and 3 - 5 data
                      00070 ; bytes. Arguments can increment, decrement, add, and do other things between
                      00071 ; command calls that allow common commands to be set up generically.
                      00072 ; See CUE_LOAD_ARGUMENT for details.
                      00073 ;
                      00074 ; CUE_LOOP:             CUE_LOOP, repeat_count
                      00075 ;
                      00076 ; Action is to run the next command N times. The next table entry must be a 
                      00077 ; command.
                      00078 ;
                      00079 ; CUE_LOOP_BLOCK:       CUE_LOOP_BLOCK, repeat_count, start_address
                      00080 ;
                      00081 ; Action is to loop N times between the start address and CUE_DONE (the 
                      00082 ; "looping block"). CUE execution continues on the next line after the 
                      00083 ; CUE_LOOP_BLOCK command once the loop is complete.
                      00084 ;
                      00085 ; This command is useful to iterate through a series of channels with 
                      00086 ; parameters that vary based on the number of times an arg is used. Typically 
                      00087 ; a set of CUE_ARGS is setup before calling the block. This is useful to 
                      00088 ; create "subroutines" of commonly used preset operations. This command 
                      00089 ; DOES NOT nest and cannot be called recursively (sorry!).
                      00090 ;
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00091 ; CUE_JUMP:             CUE_JUMP, jump_address
                      00092 ;
                      00093 ; Action is to transfer cue exeution to a new address, from which execution
                      00094 ; will not return. Any number of jumps may be chained. Useful for "finishing up"
                      00095 ; with common code.
                      00096 ;
                      00097 ; CUE_DONE:             CUE_DONE <no parameters>
                      00098 ;
                      00099 ; Signals the end of a cue block (see above descriptions). If found in 
                      00100 ; the main body of the called cue, it terminates the interpretation of the 
                      00101 ; cue and returns control to the caller. If found in a LOOP is terminates
                      00102 ; that iteration of the loop and returns control to the cue line that 
                      00103 ; called the loop.
                      00104 ; 
                      00105 ; 
                      00106 ; RESOURCE USAGE:
                      00107 ; - The PLAYBACK sub-system uses FSR1 as its primary pointer, FSR2 as secondary. 
                      00108 ; - Does not use FSR0 as this is reserved for interrupts.
                      00109 ; - The ARG table takes 128 bytes of RAM to store 32 arguments.
                      00110 ; - Routines follow the convnetion of returning Z bit set for OK, or to indicate
                      00111 ;   the further processing is required.
                      00112 
                      00113 ;----- Circuit and Command Processing Definitions ----
                      00114 ; See Ckt Mapping tab of spreadsheet for further documentation
                      00115 
  0000000D            00116 FDR_TABLE_LEN           equ     .13     ; bytes allocated per fader table
  00000015            00117 CHN_NUM_MAX             equ     .21     ; number of color or mono channels (zero based)
  0000001D            00118 CKT_NUM_MAX             equ     .29     ; maximum encoded circuit number (zero based)
  00000005            00119 CKT_TABLE_INCREMENT     equ     .5      ; number of ports being serviced
  00000027            00120 CKT_TABLE_LEN           equ     .39     ; circuit table is 5 ports * 8 bits (zero based)
                      00121 
  00000F80            00122 switch01p               equ     PORTA
  00000000            00123 switch01b               equ     .0
                      00124 
  00000001            00125 MONOCHROME_MODE         equ     TRUE    ; set TRUE if running monochrome, FALSE for color
                      00126 
                      00127 ; not used in monochrome mode apps
  00000000            00128 RED_OFFSET              equ     0       ; table offsets
  00000001            00129 GRN_OFFSET              equ     1
  00000002            00130 BLU_OFFSET              equ     2
  00000003            00131 EXT_OFFSET              equ     3       ; offset for extra channel
  00000000            00132 HUE_OFFSET              equ     0
  00000001            00133 SAT_OFFSET              equ     1
  00000002            00134 BRT_OFFSET              equ     2
                      00135 
                      00136 ;---- COMMAND SET ----
                      00137 ; Command set - MSbyte is command code, LSbyte is argument counter
                      00138 ; Adding a command involves:
                      00139 ;  - adding it to this list and adjusting any values
                      00140 ;  - adding it to CMD_LOADER dispatch table (led_fader.asm)
                      00141 ;  - adding it to CMD_VALIDATE_CMDCODE (led_fader.asm)
                      00142 ;  - adding it to CUE_GET_COMMAND (led_cue.asm)
                      00143 
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000011            00144 SET_BRT                 equ     0x11    ; set BRT for color or monochrome
  00000023            00145 SET_HSB                 equ     0x23    ; set HSB values (color only)
  00000033            00146 SET_RGB                 equ     0x33    ; set RGB values (color only)
  00000041            00147 PATCH                   equ     0x41    ; PATCH command
  00000056            00148 FADE                    equ     0x56    ; FADE command args up through OFF
  00000057            00149 FADE_REPEAT             equ     0x57    ; FADE command args up through REPEAT 
  00000058            00150 FADE_MIN                equ     0x58    ; FADE command args up through MIN
  00000059            00151 FADE_MAX                equ     0x59    ; FADE command args up through MAX
  0000005A            00152 FADE_X                  equ     0x5A    ; FADE command args up through XFADE
  00000060            00153 WATCH                   equ     0x60    ; WATCH command - takes one arg (0)
                      00154 
  000000FF            00155 NOW                     equ     0xFF    ; WATCH command value - load now
  000000FE            00156 NEVER                   equ     0xFE    ; WATCH command value - never load
                      00157 
                      00158 ;---- Cue command line templates (very useful) ----
                      00159 ; SET_HSB       CUE_CMD  CMD_SET_HSB  mask  chn  hue   sat   brt        
                      00160 ; PATCH         CUE_CMD  CMD_PATCH  mask   slave_ckt     master_ckt
                      00161 ; FADE_46       CUE_CMD CMD_FADE  mask  ckt_num     presc  dly   up   on  down off      
                      00162 
                      00163 ;---- CUE AND PLAYBACK EQUATES ----
                      00164 
  00000000            00165 ARG_NUM_MAX             equ     .0      ; maximum argument number (zero is a valid #)
                      00166                                         ; each arg takes 4 bytes of RAM
  00000000            00167 ARG_HI_FLAG             equ     .0      ; bit to set and test for hi args (>7)
                      00168 
  00000000            00169 CUE_DONE                equ     .00     ; should be zero
  00000001            00170 CUE_CMD                 equ     .01     ; prefix for a command
  00000002            00171 CUE_ARG                 equ     .02     ; prefix for an argument
  00000003            00172 CUE_LOOP                equ     .03
  00000004            00173 CUE_LOOP_BLOCK          equ     .04
  00000005            00174 CUE_JUMP                equ     .05
  00000005            00175 CUE_MAX                 equ     .05     ; maximum allowable cmd instruction value
                      00176 
                      00177 ; MSbyte of these PLAYLIST_xxxx values must be zero:
  00000000            00178 PLAYLIST_DONE           equ     0x0000  ; requries a 16 bit value
  00000001            00179 PLAYLIST_CODA           equ     0x0001
                      00180 
                      00181 ;---- Argument OPCODE definitions ----
                      00182 ;
                      00183 ; Command arguments (args) are 4 byte structures that perform substitutions 
                      00184 ; for command variables during command loads. Args can perform literal 
                      00185 ; substitution for variables or a variety of simple math functions. Structure:
                      00186 ;
                      00187 ;       - Arg number    args number 0 - N. Implicit based on location in table
                      00188 ;       - Opcode        operation to perform during argument substitution
                      00189 ;       - Operand1      (op1) first operand interprested by opcode
                      00190 ;       - Operand2      (op2) second operand interprested by opcode
                      00191 ;       - Operand3      (op3) thirg operand interprested by opcode
                      00192 ;
                      00193 ; op2(op1) means use the value of op1 found at the argnum provided in op2
                      00194 ;   an arg error returns the value of zero.
                      00195 ;
                      00196 ; opcode            op1    op2    op3   usage
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00197 ; OP_LIT            value  ---    ---   ; use op1 as literal value
                      00198 ; OP_INC            start  ---    ---   ; use op1, post increment & store in op1
                      00199 ; OP_INC_RANGE      start  max    min   ; inc by 1 [op2=max, op3=min], store in op1
                      00200 ; OP_INCX2_RANGE    start  max    min   ; inc by 2 [op2=max, op3=min], store in op1
                      00201 ; OP_INCX3_RANGE    start  max    min   ; inc by 3 [op2=max, op3=min], store in op1
                      00202 ; OP_INCX4_RANGE    start  max    min   ; inc by 4 [op2=max, op3=min], store in op1
                      00203 ; OP_DEC            start  ---    ---   ; use op1, post decrement & store in op1
                      00204 ; OP_DEC_RANGE      start  max    min   ; dec by 1 [op2=max, op3=min], store in op1
                      00205 ; OP_DECX2_RANGE    start  max    min   ; dec by 2 [op2=max, op3=min], store in op1
                      00206 ; OP_DECX3_RANGE    start  max    min   ; dec by 3 [op2=max, op3=min], store in op1
                      00207 ; OP_DECX4_RANGE    start  max    min   ; dec by 4 [op2=max, op3=min], store in op1
                      00208 ; OP_ADD            start  add    ---   ; (op1+op2), save result in op1
                      00209 ; OP_ADD_AND        start  add    and   ; (op1+op2), AND with op3, do not save result
                      00210 ; OP_ADD_AND_SAVE   start  add    and   ; (op1+op2), AND with op3l, save result in op1
                      00211 ; OP_ADD_IND        start  ind    ---   ; (op1+op2(op1)), do not save result
                      00212 ; OP_ADD_IND_SAVE   start  ind    ---   ; (op1+op2(op1)), save result in op1
                      00213 ; OP_ADD_IND_AND    start  ind    and   ; (op1+op2(op1)), AND with op3, do not save
                      00214 ; OP_ADD_IND_AND_SAVE srt  ind    and   ; (op1+op2(op1)), AND with op3, save in op1
                      00215 ; OP_SUB            start  sub    ---   ; (op1-op2), save result in op1
                      00216 ; OP_SUB_AND        start  sub    and   ; (op1-op2), AND with op3, do not save result
                      00217 ; OP_SUB_AND_SAVE   start  sub    and   ; (op1-op2), AND with op3, save in op1
                      00218 ; OP_SUB_IND        start  ind    ---   ; (op1-op2(op1)), do not save result
                      00219 ; OP_SUB_IND_SAVE   start  ind    ---   ; (op1-op2(op1)), save result in op1
                      00220 ; OP_SUB_IND_AND    start  ind    and   ; (op1-op2(op1)), AND with op3, do not save
                      00221 ; OP_SUB_IND_AND_SAVE srt  ind    and   ; (op1-op2(op1)), AND with op3, save in op1
                      00222 ; OP_RAND           seed   ---    ---   ; pseudo-random#, op1=seed, update seed
                      00223 ; OP_RAND_RANGE     seed   max    min   ; pseudo-random# [op2=max, op3=min], op1=seed
                      00224 
                      00225 ; actual definitions used by the code:
                      00226 
  00000000            00227 OP_LIT                  equ     .00     ; use op1 as literal value
  00000001            00228 OP_INC                  equ     .01     ; use op1, post increment & store in op1
  00000002            00229 OP_INC_RANGE            equ     .02     ; inc by 1 [op2=max, op3=min], store in op1
  00000003            00230 OP_INCX2_RANGE          equ     .03     ; inc by 2 [op2=max, op3=min], store in op1
  00000004            00231 OP_INCX3_RANGE          equ     .04     ; inc by 3 [op2=max, op3=min], store in op1
  00000005            00232 OP_INCX4_RANGE          equ     .05     ; inc by 4 [op2=max, op3=min], store in op1
  00000006            00233 OP_DEC                  equ     .06     ; use op1, post decrement & store in op1
  00000007            00234 OP_DEC_RANGE            equ     .07     ; dec by 1 [op2=max, op3=min], store in op1
  00000008            00235 OP_DECX2_RANGE          equ     .08     ; dec by 2 [op2=max, op3=min], store in op1
  00000009            00236 OP_DECX3_RANGE          equ     .09     ; dec by 3 [op2=max, op3=min], store in op1
  0000000A            00237 OP_DECX4_RANGE          equ     .10     ; dec by 4 [op2=max, op3=min], store in op1
  0000000B            00238 OP_ADD                  equ     .11     ; (op1+op2), save result in op1
  0000000C            00239 OP_ADD_AND              equ     .12     ; (op1+op2), AND with op3, do not save result
  0000000D            00240 OP_ADD_AND_SAVE         equ     .13     ; (op1+op2), AND with op3l, save result in op1
  0000000E            00241 OP_ADD_IND              equ     .14     ; (op1+op2(op1)), do not save result
  0000000F            00242 OP_ADD_IND_SAVE         equ     .15     ; (op1+op2(op1)), save result in op1
  00000010            00243 OP_ADD_IND_AND          equ     .16     ; (op1+op2(op1)), AND with op3, do not save
  00000011            00244 OP_ADD_IND_AND_SAVE     equ     .17     ; (op1+op2(op1)), AND with op3, save in op1
  00000012            00245 OP_SUB                  equ     .18     ; (op1-op2), save result in op1
  00000013            00246 OP_SUB_AND              equ     .19     ; (op1-op2), AND with op3, do not save result
  00000014            00247 OP_SUB_AND_SAVE         equ     .20     ; (op1-op2), AND with op3, save in op1
  00000015            00248 OP_SUB_IND              equ     .21     ; (op1-op2(op1)), do not save result
  00000016            00249 OP_SUB_IND_SAVE         equ     .22     ; (op1-op2(op1)), save result in op1
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000017            00250 OP_SUB_IND_AND          equ     .23     ; (op1-op2(op1)), AND with op3, do not save
  00000018            00251 OP_SUB_IND_AND_SAVE     equ     .24     ; (op1-op2(op1)), AND with op3, save in op1
  00000019            00252 OP_RAND                 equ     .25     ; pseudo-random#, op1=seed, update seed
  0000001A            00253 OP_RAND_RANGE           equ     .26     ; pseudo-random# [op2=max, op3=min], op1=seed
  0000001A            00254 OP_OPCODE_MAX           equ     .26     ; MAXIMUM LEGAL OPCODE VALUE
                      00255 
                      00256 
                      00257 ;--- SOME USEFUL SHORTHAND ----
                      00258 
  00000000            00259 HUE     equ     HUE_OFFSET
  00000001            00260 SAT     equ     SAT_OFFSET
  00000002            00261 BRT     equ     BRT_OFFSET
                      00262 
                      00263 ; Colors (applies to HUE)
                      00264 
  00000000            00265 RED     equ     0x00                    ; red
  00000015            00266 ORN     equ     0x15                    ; orange
  0000002A            00267 YEL     equ     0x2A                    ; yellow
  00000055            00268 GRN     equ     0x55                    ; green
  0000007F            00269 CYN     equ     0x7F                    ; cyan
  000000AB            00270 BLU     equ     0xAB                    ; blue
  000000D5            00271 MAG     equ     0xD5                    ; magenta
  000000D5            00272 VIO     equ     MAG                     ; violet = magenta
                      00273 
                      00274 ; Channel specifiers with the 2 left shifts:
  00000000            00275 c00     equ     .00 <<2
  00000004            00276 c01     equ     .01 <<2
  00000008            00277 c02     equ     .02 <<2
  0000000C            00278 c03     equ     .03 <<2
  00000010            00279 c04     equ     .04 <<2
  00000014            00280 c05     equ     .05 <<2
  00000018            00281 c06     equ     .06 <<2
  0000001C            00282 c07     equ     .07 <<2
  00000020            00283 c08     equ     .08 <<2
  00000024            00284 c09     equ     .09 <<2
  00000028            00285 c10     equ     .10 <<2
  0000002C            00286 c11     equ     .11 <<2
  00000030            00287 c12     equ     .12 <<2
  00000034            00288 c13     equ     .13 <<2
  00000038            00289 c14     equ     .14 <<2
  0000003C            00290 c15     equ     .15 <<2
  00000040            00291 c16     equ     .16 <<2
  00000044            00292 c17     equ     .17 <<2
  00000048            00293 c18     equ     .18 <<2
  0000004C            00294 c19     equ     .19 <<2
  00000050            00295 c20     equ     .20 <<2
  00000054            00296 c21     equ     .21 <<2
  00000058            00297 c22     equ     .22 <<2
  0000005C            00298 c23     equ     .23 <<2
  00000060            00299 c24     equ     .24 <<2
  00000064            00300 c25     equ     .25 <<2
  00000068            00301 c26     equ     .26 <<2
  0000006C            00302 c27     equ     .27 <<2
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000070            00303 c28     equ     .28 <<2
  00000074            00304 c29     equ     .29 <<2
  00000078            00305 c30     equ     .30 <<2
  0000007C            00306 c31     equ     .31 <<2
  00000080            00307 c32     equ     .32 <<2
  00000084            00308 c33     equ     .33 <<2
  00000088            00309 c34     equ     .34 <<2
  0000008C            00310 c35     equ     .35 <<2
  00000090            00311 c36     equ     .36 <<2
  00000094            00312 c37     equ     .37 <<2
  00000098            00313 c38     equ     .38 <<2
  0000009C            00314 c39     equ     .39 <<2
  000000A0            00315 c40     equ     .40 <<2
  000000A4            00316 c41     equ     .41 <<2
  000000A8            00317 c42     equ     .42 <<2
  000000AC            00318 c43     equ     .43 <<2
  000000B0            00319 c44     equ     .44 <<2
  000000B4            00320 c45     equ     .45 <<2
  000000B8            00321 c46     equ     .46 <<2
  000000BC            00322 c47     equ     .47 <<2
  000000C0            00323 c48     equ     .48 <<2
  000000C4            00324 c49     equ     .49 <<2
  000000C8            00325 c50     equ     .50 <<2
  000000CC            00326 c51     equ     .51 <<2
  000000D0            00327 c52     equ     .52 <<2
  000000D4            00328 c53     equ     .53 <<2
  000000D8            00329 c54     equ     .54 <<2
  000000DC            00330 c55     equ     .55 <<2
  000000E0            00331 c56     equ     .56 <<2
  000000E4            00332 c57     equ     .57 <<2
  000000E8            00333 c58     equ     .58 <<2
  000000EC            00334 c59     equ     .59 <<2
  000000F0            00335 c60     equ     .60 <<2
  000000F4            00336 c61     equ     .61 <<2
  000000F8            00337 c62     equ     .62 <<2
  000000FC            00338 c63     equ     .63 <<2
                      00339 
                      00340         
                      00059 #include <APP_INCLUDE_FILE>             ; 4: Application include file
                      00001 ;*****************************************************************************
                      00002 ; wClock - common header file
                      00003 ;*****************************************************************************
                      00004 ;
                      00005 ;    Filename:          wClock.inc
                      00006 ;    Author, Company:   Alden Hart, Luke's Lights
                      00007 ;    Date/Time/Rev:     091015
                      00008 ;
                      00009 ;    'sproke notes: If shit breaks, look in the following places:
                      00010 ;       - test ISR dispatcher for not crossing a page boundary
                      00011 ;       - look for all occurrences of "HACK HACK"
                      00012 
                      00013 ;------ Application Switches -----      
                      00014 ; The default initialization routines are provided in the device file: d18fxxxx.asm
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00015 ; Setting an _EXTERNAL switch TRUE will use an init located in some other file.
                      00016 ; You must also set up an extern in the d18fxxxx.asm file and a global in the 
                      00017 ; target application file to override the default init.
                      00018 
  00000001            00019 INIT_PORTS_EXTERNAL     equ     TRUE    ; set true to use an external init routine
  00000001            00020 INIT_T0_EXTERNAL        equ     TRUE    ; uses the one in wClock.asm
  00000001            00021 INIT_T1_EXTERNAL        equ     TRUE    ; uses the one in led_ckt4520.asm
  00000001            00022 INIT_WATCHDOG_TIMER     equ     TRUE    ; set if WDT enabled. See WDT_INIT
                      00023 
                      00024 ;----- Assembly-Time Switches ------
                      00025 
  00000000            00026 RX_ENABLED              equ     FALSE   ; enable RX ISR processing
  00000000            00027 ICD_ENABLED             equ     FALSE   ; enable ICD2 debugging
  00000001            00028 UNITS_ENABLED           equ     TRUE    ; enable unit tests
  00000001            00029 DIAGNOSTICS_ENABLED     equ     TRUE    ; takes up space and time
                      00030 
  00000BDC            00031 CLK_TIMER               equ     0x0BDC  ; value for prescale 128 (rev 1)
                      00032 ;CLK_TIMER              equ     0xC000  ; TEST value for prescale 128
                      00033 
                      00034 ;----- switch port assignments and equates
                      00035 
  00000008            00036 SW_DEBOUNCE_MAX         equ     .8      ; # of 6.66 ms cycles to debounce switch
  0000003C            00037 SW_HELD_COUNT           equ     .60     ; # of 6.66 ms increments before advance
  00000000            00038 SW_STATE_ON_bp          equ     .00     ; 1=switch is on  0=switch is off
  00000001            00039 SW_STATE_RISING_bp      equ     .01     ; rising edge (this state can be removed)
  00000002            00040 SW_STATE_FALLING_bp     equ     .02     ; falling edge (this state can be removed)
                      00041 
                      00042 ;----- Table program memory allocation -----
                      00043 ; The following  tables must be aligned on a 0x100 page boundary
                      00044 ; Look at the eFruit.map file for optimal placement
                      00045 
  00002000            00046 BASE_OF_TABLES          equ     0x2000
  00000600            00047 HSB_TABLES_LEN          equ     0x600
                      00048 ;HSB_TABLES_LEN         equ     0x00
                      00049 
  00002000            00050 HSB_TABLES_START        equ     BASE_OF_TABLES
  00002600            00051 CUE_TABLES_START        equ     HSB_TABLES_START + HSB_TABLES_LEN 
                      00052 ; Cue tables can use the rest of program memory if they need to, and should be last
                      00053 
                      00054 ;--- Flag values for app_flags ----
                      00055 ; Notes on TIME bits:
                      00056 ; - TIME_5MS is an approximate flag set by cycle processing (for switch timing)
                      00057 ; - The other TIME flags are managed by CLK_IRQ
                      00058 
  00000000            00059 DIRTY_BIT               equ     0       ; set to signal new dimmer value
  00000001            00060 CYCLE_START_FLAG        equ     1       ; set once per cycle during BAM interval
  00000002            00061 SWITCH_READ_FLAG        equ     2       ; is set approx every 6 ms
  00000003            00062 SECOND_FLAG             equ     3       ; is set every second (exactly)
                      00063 
                      00064 ;---- Word to channel mapping ----
                      00065 
  00000000            00066 ITS             equ     .0              ; Channel 0 is "IT'S"
  00000001            00067 HALF            equ     .1
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000002            00068 TEN_            equ     .2              ; differentiate from hour TEN
  00000003            00069 QUARTER         equ     .3
  00000004            00070 TWENTY          equ     .4
  00000005            00071 FIVE_           equ     .5              ; differentiate from hour FIVE
  00000006            00072 MINUTES         equ     .6
  00000007            00073 PAST            equ     .7
  00000008            00074 TO_             equ     .8              ; must have an underscore
  00000009            00075 ONE             equ     .9
  0000000A            00076 TWO             equ     .10
  0000000B            00077 THREE           equ     .11
  0000000C            00078 FOUR            equ     .12
  0000000D            00079 FIVE            equ     .13
  0000000E            00080 SIX             equ     .14
  0000000F            00081 SEVEN           equ     .15
  00000010            00082 EIGHT           equ     .16
  00000011            00083 NINE            equ     .17
  00000012            00084 TEN             equ     .18
  00000013            00085 ELEVEN          equ     .19
  00000014            00086 TWELVE          equ     .20
  00000015            00087 OCLOCK          equ     .21
                      00088 ;PLUS_1         equ     .22
                      00089 ;PLUS_2         equ     .23
                      00090 ;PLUS_3         equ     .24
                      00091 ;PLUS_4         equ     .25
                      00060 
                      00061 ;------ Exports (globals) - specific to the clock application -----
                      00062 
  0000                00063         global  CUE_CLK_READOUT         ; application specific routine
  0000                00064         global  cue_clk_min
  0000                00065         global  cue_clk_hour
                      00066 
                      00067 ;------ Needed to export these just so I could WATCH them. MPLAB bug?
                      00068 
  0000                00069         global  cue_clk_min_plus
  0000                00070         global  cue_clk_min_five
  0000                00071         global  cue_ptr_hi
  0000                00072         global  cue_ptr_lo
                      00073 
                      00074 ;------ Exports (globals) - not application specific -----
                      00075 
  0000                00076         global  PLAY_INIT
  0000                00077         global  cue_watch               ; used by command loader only
  0000                00078         global  CUE_WATCHER
  0000                00079         global  UT_PLAY                 ; playlist and cues unit tests
                      00080 
                      00081 ;----- External variables and FUNCTIONS -----
                      00082 
  0000                00083         extern  chn_num                 ; channel number
  0000                00084         extern  chn_level               ; circuit level
  0000                00085         extern  CKT_WRITE_CHANNEL       ; write a mono value or RGB triplet to ckt table
                      00086 
  0000                00087         extern  cmd_buffer              ; command input buffer
  0000                00088         extern  CMD_VALIDATE_CMDCODE    ; validate command code
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                00089         extern  CMD_LOADER
  0000                00090         extern  FDR_TEST_FDR_DONE       ; returns Z=1 if fader is done or inactive
  0000                00091         extern  temp_tblptrh
  0000                00092         extern  temp_tblptrl
                      00093 
                      00094 ;------ RAM definitions -----
                      00095 
                      00096 ;##### BANK 0 #####
                      00097 UDATA_BANK_0_ACS        udata_acs       ; linker allocates space in bank 0
                      00098 
                      00099 ; application specific variables (clock application)
000000                00100 cue_clk_hour            res     1       ; hour to read out
000001                00101 cue_clk_min             res     1       ; minutes to read out
000002                00102 cue_clk_min_five        res     1       ; minutes by 5 minutes counter (0-11)
000003                00103 cue_clk_min_plus        res     1       ; minutes plus signs isolated (0-4)
                      00104 
                      00105 ; general variables
000004                00106 play_master_ptr_hi      res     1       ; playlist master table pointer
000005                00107 play_master_ptr_lo      res     1
000006                00108 play_ptr_hi             res     1       ; active playlist table pointer
000007                00109 play_ptr_lo             res     1
000008                00110 cue_ptr_hi              res     1       ; current cue table pointer
000009                00111 cue_ptr_lo              res     1
00000A                00112 cue_num_hi              res     1       ; cue number hi/lo
00000B                00113 cue_num_lo              res     1
                      00114 
00000C                00115 cue_fsr1_temp_hi        res     1       ; needed for GET_ARGUMENT
00000D                00116 cue_fsr1_temp_lo        res     1
                      00117 ;cue_loop_end_addr_hi   res     1       ; end address of a CUE_LOOP command
                      00118 ;cue_loop_end_addr_lo   res     1
                      00119 
00000E                00120 cue_command             res     1       ; command code (4 bits)
00000F                00121 cue_argcount            res     1       ; command argument count (4 bits)
000010                00122 cue_argnum              res     1       ; argment number being processed
000011                00123 cue_argmask             res     1       ; argument bitmask, args <7-0>
000012                00124 cue_argmask_hi          res     1       ; argument bitmask, args <F-8>
000013                00125 cue_argvalue            res     1       ; argument value as read from the table
000014                00126 cue_argflags            res     1       ; set b0 to signal there are upper args
000015                00127 cue_loop_work           res     1       ; working register for loop counting
                      00128 
000016                00129 cue_loop_counter        res     1       ; counter for LOOP commands
000017                00130 cue_loop_table_hi       res     1
000018                00131 cue_loop_table_lo       res     1
                      00132 
000019                00133 cue_opcode              res     1       ; argument opcode byte
00001A                00134 cue_op1                 res     1       ; argument operand 1
00001B                00135 cue_op2                 res     1       ; argument operand 2
00001C                00136 cue_op3                 res     1       ; argument operand 3
                      00137 
00001D                00138 cue_watch               res     1       ; cue DONE watch register
                      00139 
                      00140 ;##### BANK 3 #####
                      00141 ;UDATA_ARG_TABLE udata  0x300           ; argtable must be on a page boundary 
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00142                                         ; or you must change CUE_SET_ARG_ADDR
00001E                00143 arg_table               res     4*(ARG_NUM_MAX+1)
                      00144 
                      00145 ;###############################
                      00146 ;##### BEGIN CODE SECTION ######
                      00147 ;###############################
                      00148 
                      00149 CODE_LED_CUE_CODE       code
                      00150 
                      00151 ;*****************************************************************************
                      00152 ;***** WCLOCK APPLICATION SPECIFIC ROUTINES **********************************
                      00153 ;*****************************************************************************
                      00154 
                      00155 ;******************************************************************************
                      00156 ; CUE_CLK_READOUT - Read out the clock display from the clock registers
                      00157 ;
                      00158 ; Normally called from the main loop each time FLAG_MINUTE is set by CLK_ISR. 
                      00159 ; It can also be called as part of setting the clock 
                      00160 ;
                      00161 ; INPUTS (expected to be loaded when routine is called)
                      00162 ;       - cue_clk_min                   ; minutes to read out
                      00163 ;       - cue_clk_hour                  ; hour to read out
                      00164 ; USES: - cue_clk_min_five              ; 5 minute marks (0-11)
                      00165 ;       - cue_clk_min_plus              ; minutes beyond the 5 minute mark (0-4)
                      00166 ;
                      00167 ; Generating the cue_clk_min_five and cue_clk_min_plus terms is tricky without
                      00168 ; having a ready division function. To generate the _five term, dividing by 5 
                      00169 ; is the same as multiplying by 1/5, which is 256/5 = 51.2. Using 52 has an 
                      00170 ; error term that's small enough not to present a problem in the 0-59 range. 
                      00171 ; Result is in PRODH. (By the way, this breaks when you hit 64/5, so this 
                      00172 ; method will not work above 63/5)
                      00173 ; 
                      00174 ; The cue_clk_min_plus term can be derived by multiplying the remainder (PRODL) 
                      00175 ; by 5 and picking the result out of PRODH.
                      00176 
000000                00177 CUE_CLK_READOUT
                      00178         ; generate the cue_clk_min_five and cue_clk_min_plus terms
000000 50??           00179         movf    cue_clk_min,W           ; divide 0-59 by 5 (multiply by 52)
000002 0D34           00180         mullw   .52                     ; changes every 5 minutes...
000004 CFF4 F???      00181         movff   PRODH,cue_clk_min_five  ; ...varies from 0 - 11
000008 50F3           00182         movf    PRODL,W                 ; now go get the _plus term
00000A 0D05           00183         mullw   .5                      ; changes every minute...
00000C CFF4 F???      00184         movff   PRODH,cue_clk_min_plus  ; ...varies from 0 - 4
                      00185 ; removed next 2 instructions or time set functions won't work reliably
                      00186 ;       movf    PRODH,W                 ; test for 5 minute boundaries
                      00187 ;       bnz     CCR_EXIT                ; only update on 5 minute marks
                      00188 
                      00189         ; adjust hours. We use an hour from twenty-five to, to half-past
000010 50??           00190         movf    cue_clk_min_five,W
000012 0806           00191         sublw   .6                      ; find "twenty-five to" division
000014 E7??           00192         bnn     CCR_DSP
000016 50??           00193         movf    cue_clk_hour,W
000018 080C           00194         sublw   .12                     ; adjust hour forward, with rollover
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00001A B4D8           00195         btfsc   STATUS,Z
00001C 6A??           00196         clrf    cue_clk_hour            ; sets hour to 1 if it's 12 o'clock
00001E 2A??           00197         incf    cue_clk_hour,F
                      00198 
000020                00199 CCR_DSP ; display routines (see global.inc for macro listings)
                      00200 
000020 EC?? F???      00201         call    CUE_CLK_LOADER
                      00202 
                      00203         ; display minutes preamble and o'clock postfix
                      00204 ;       tblindx CLK_MINUTES_MAP, cue_clk_min_five  ; set index into MIN map
                      00205 ;       tblread cue_ptr_hi, cue_ptr_lo             ; set cue_ptr from MIN map
                      00206 ;       call    CUE_LOAD_CUE
                      00207 
                      00208         ; display hours
                      00209 ;       tblindx CLK_HOURS_MAP, cue_clk_hour     ; set index into HOURS map 
                      00210 ;       tblread cue_ptr_hi, cue_ptr_lo          ; set cue_ptr from HOURS map
                      00211 ;       call    CUE_LOAD_CUE
                      00212 
000024                00213 CCR_EXIT
000024 0012           00214         return
                      00215 
                      00216 
                      00217 ;--- CUE_CLK_LOADER - 
                      00218 ; Load tables into channels
                      00219 ; First load the 5min values, then load the hours
                      00220 
000026                00221 CUE_CLK_LOADER
000026 0E15           00222         movlw   CHN_NUM_MAX             ; turn all channels off
000028 6E??           00223         movwf   chn_num
00002A 6A??           00224 CCL2    clrf    chn_level
00002C EC?? F???      00225         call    CKT_WRITE_CHANNEL
000030 06??           00226         decf    chn_num
000032 E7??           00227         bnn     CCL2
                      00228 
                      00229         ;#### THIS CODE SEGMENT CANNOT CROSS A 0x100 PROGRAM MEMORY BOUNDARY
000034 0E??           00230         movlw   HIGH CCL_MIN
000036 6EFA           00231         movwf   PCLATH
000038 44??           00232         rlncf   cue_clk_min_five,W      ; get index x2 into W...
00003A 0F??           00233         addlw   LOW CCL_MIN             ;...this only works with BRAs 
00003C 6EF9           00234         movwf   PCL                     ;...GOTOs require x4
00003E D???           00235 CCL_MIN bra     _min00                  ; dispatch to 00 minutes
000040 D???           00236         bra     _min05
000042 D???           00237         bra     _min10
000044 D???           00238         bra     _min15
000046 D???           00239         bra     _min20
000048 D???           00240         bra     _min25
00004A D???           00241         bra     _min30
00004C D???           00242         bra     _min35
00004E D???           00243         bra     _min40
000050 D???           00244         bra     _min45
000052 D???           00245         bra     _min50
000054 D???           00246         bra     _min55
                      00247 
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000056                00248 CCL_HOURS
000056 0E??           00249         movlw   HIGH CCL_HR
000058 6EFA           00250         movwf   PCLATH
00005A 44??           00251         rlncf   cue_clk_hour,W          ; get index x2 into W...
00005C 0F??           00252         addlw   LOW CCL_HR              ;...this only works with BRAs 
00005E 6EF9           00253         movwf   PCL                     ;...GOTOs require x4
000060 D???           00254 CCL_HR  bra     _hour00                 ; NULL never happens
000062 D???           00255         bra     _hour01
000064 D???           00256         bra     _hour02
000066 D???           00257         bra     _hour03
000068 D???           00258         bra     _hour04
00006A D???           00259         bra     _hour05
00006C D???           00260         bra     _hour06
00006E D???           00261         bra     _hour07
000070 D???           00262         bra     _hour08
000072 D???           00263         bra     _hour09
000074 D???           00264         bra     _hour10
000076 D???           00265         bra     _hour11
000078 D???           00266         bra     _hour12
                      00267         ; #### TO HERE
                      00268 
                      00269 ccload  macro   channel, level
                      00270         movlw   level
                      00271         movwf   chn_level
                      00272         movlw   channel
                      00273         movwf   chn_num
                      00274         call    CKT_WRITE_CHANNEL
                      00275         endm
                      00276         
                      00277 _min00  ccload  OCLOCK, LIT
00007A 0EFF               M         movlw   LIT
00007C 6E??               M         movwf   chn_level
00007E 0E15               M         movlw   OCLOCK
000080 6E??               M         movwf   chn_num
000082 EC?? F???          M         call    CKT_WRITE_CHANNEL
000086 D???           00278         bra     CCL_HOURS
                      00279 
                      00280 _min05  ccload  ITS, LIT
000088 0EFF               M         movlw   LIT
00008A 6E??               M         movwf   chn_level
00008C 0E00               M         movlw   ITS
00008E 6E??               M         movwf   chn_num
000090 EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00281         ccload  FIVE_, LIT
000094 0EFF               M         movlw   LIT
000096 6E??               M         movwf   chn_level
000098 0E05               M         movlw   FIVE_
00009A 6E??               M         movwf   chn_num
00009C EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00282         ccload  MINUTES, LIT
0000A0 0EFF               M         movlw   LIT
0000A2 6E??               M         movwf   chn_level
0000A4 0E06               M         movlw   MINUTES
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000A6 6E??               M         movwf   chn_num
0000A8 EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00283         ccload  PAST, LIT
0000AC 0EFF               M         movlw   LIT
0000AE 6E??               M         movwf   chn_level
0000B0 0E07               M         movlw   PAST
0000B2 6E??               M         movwf   chn_num
0000B4 EC?? F???          M         call    CKT_WRITE_CHANNEL
0000B8 D???           00284         bra     CCL_HOURS
                      00285 
                      00286 _min10  ccload  ITS, LIT
0000BA 0EFF               M         movlw   LIT
0000BC 6E??               M         movwf   chn_level
0000BE 0E00               M         movlw   ITS
0000C0 6E??               M         movwf   chn_num
0000C2 EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00287         ccload  TEN_, LIT
0000C6 0EFF               M         movlw   LIT
0000C8 6E??               M         movwf   chn_level
0000CA 0E02               M         movlw   TEN_
0000CC 6E??               M         movwf   chn_num
0000CE EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00288         ccload  PAST, LIT
0000D2 0EFF               M         movlw   LIT
0000D4 6E??               M         movwf   chn_level
0000D6 0E07               M         movlw   PAST
0000D8 6E??               M         movwf   chn_num
0000DA EC?? F???          M         call    CKT_WRITE_CHANNEL
0000DE D???           00289         bra     CCL_HOURS
                      00290 
                      00291 _min15  ccload  ITS, LIT
0000E0 0EFF               M         movlw   LIT
0000E2 6E??               M         movwf   chn_level
0000E4 0E00               M         movlw   ITS
0000E6 6E??               M         movwf   chn_num
0000E8 EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00292         ccload  QUARTER, LIT
0000EC 0EFF               M         movlw   LIT
0000EE 6E??               M         movwf   chn_level
0000F0 0E03               M         movlw   QUARTER
0000F2 6E??               M         movwf   chn_num
0000F4 EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00293         ccload  PAST, LIT
0000F8 0EFF               M         movlw   LIT
0000FA 6E??               M         movwf   chn_level
0000FC 0E07               M         movlw   PAST
0000FE 6E??               M         movwf   chn_num
000100 EC?? F???          M         call    CKT_WRITE_CHANNEL
000104 D???           00294         bra     CCL_HOURS
                      00295 
                      00296 _min20  ccload  ITS, LIT
000106 0EFF               M         movlw   LIT
000108 6E??               M         movwf   chn_level
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00010A 0E00               M         movlw   ITS
00010C 6E??               M         movwf   chn_num
00010E EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00297         ccload  TWENTY, LIT
000112 0EFF               M         movlw   LIT
000114 6E??               M         movwf   chn_level
000116 0E04               M         movlw   TWENTY
000118 6E??               M         movwf   chn_num
00011A EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00298         ccload  PAST, LIT
00011E 0EFF               M         movlw   LIT
000120 6E??               M         movwf   chn_level
000122 0E07               M         movlw   PAST
000124 6E??               M         movwf   chn_num
000126 EC?? F???          M         call    CKT_WRITE_CHANNEL
00012A D???           00299         bra     CCL_HOURS
                      00300 
                      00301 _min25  ccload  ITS, LIT
00012C 0EFF               M         movlw   LIT
00012E 6E??               M         movwf   chn_level
000130 0E00               M         movlw   ITS
000132 6E??               M         movwf   chn_num
000134 EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00302         ccload  TWENTY, LIT
000138 0EFF               M         movlw   LIT
00013A 6E??               M         movwf   chn_level
00013C 0E04               M         movlw   TWENTY
00013E 6E??               M         movwf   chn_num
000140 EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00303         ccload  FIVE_, LIT
000144 0EFF               M         movlw   LIT
000146 6E??               M         movwf   chn_level
000148 0E05               M         movlw   FIVE_
00014A 6E??               M         movwf   chn_num
00014C EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00304         ccload  MINUTES, LIT
000150 0EFF               M         movlw   LIT
000152 6E??               M         movwf   chn_level
000154 0E06               M         movlw   MINUTES
000156 6E??               M         movwf   chn_num
000158 EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00305         ccload  PAST, LIT
00015C 0EFF               M         movlw   LIT
00015E 6E??               M         movwf   chn_level
000160 0E07               M         movlw   PAST
000162 6E??               M         movwf   chn_num
000164 EC?? F???          M         call    CKT_WRITE_CHANNEL
000168 D???           00306         bra     CCL_HOURS
                      00307 
                      00308 _min30  ccload  ITS, LIT
00016A 0EFF               M         movlw   LIT
00016C 6E??               M         movwf   chn_level
00016E 0E00               M         movlw   ITS
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000170 6E??               M         movwf   chn_num
000172 EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00309         ccload  HALF, LIT
000176 0EFF               M         movlw   LIT
000178 6E??               M         movwf   chn_level
00017A 0E01               M         movlw   HALF
00017C 6E??               M         movwf   chn_num
00017E EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00310         ccload  PAST, LIT
000182 0EFF               M         movlw   LIT
000184 6E??               M         movwf   chn_level
000186 0E07               M         movlw   PAST
000188 6E??               M         movwf   chn_num
00018A EC?? F???          M         call    CKT_WRITE_CHANNEL
00018E D???           00311         bra     CCL_HOURS
                      00312 
                      00313 _min35  ccload  ITS, LIT
000190 0EFF               M         movlw   LIT
000192 6E??               M         movwf   chn_level
000194 0E00               M         movlw   ITS
000196 6E??               M         movwf   chn_num
000198 EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00314         ccload  TWENTY, LIT
00019C 0EFF               M         movlw   LIT
00019E 6E??               M         movwf   chn_level
0001A0 0E04               M         movlw   TWENTY
0001A2 6E??               M         movwf   chn_num
0001A4 EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00315         ccload  FIVE_, LIT
0001A8 0EFF               M         movlw   LIT
0001AA 6E??               M         movwf   chn_level
0001AC 0E05               M         movlw   FIVE_
0001AE 6E??               M         movwf   chn_num
0001B0 EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00316         ccload  TO_, LIT
0001B4 0EFF               M         movlw   LIT
0001B6 6E??               M         movwf   chn_level
0001B8 0E08               M         movlw   TO_
0001BA 6E??               M         movwf   chn_num
0001BC EC?? F???          M         call    CKT_WRITE_CHANNEL
0001C0 D???           00317         bra     CCL_HOURS
                      00318 
                      00319 _min40  ccload  ITS, LIT
0001C2 0EFF               M         movlw   LIT
0001C4 6E??               M         movwf   chn_level
0001C6 0E00               M         movlw   ITS
0001C8 6E??               M         movwf   chn_num
0001CA EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00320         ccload  TWENTY, LIT
0001CE 0EFF               M         movlw   LIT
0001D0 6E??               M         movwf   chn_level
0001D2 0E04               M         movlw   TWENTY
0001D4 6E??               M         movwf   chn_num
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0001D6 EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00321         ccload  MINUTES, LIT
0001DA 0EFF               M         movlw   LIT
0001DC 6E??               M         movwf   chn_level
0001DE 0E06               M         movlw   MINUTES
0001E0 6E??               M         movwf   chn_num
0001E2 EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00322         ccload  TO_, LIT
0001E6 0EFF               M         movlw   LIT
0001E8 6E??               M         movwf   chn_level
0001EA 0E08               M         movlw   TO_
0001EC 6E??               M         movwf   chn_num
0001EE EC?? F???          M         call    CKT_WRITE_CHANNEL
0001F2 D???           00323         bra     CCL_HOURS
                      00324 
                      00325 _min45  ccload  ITS, LIT
0001F4 0EFF               M         movlw   LIT
0001F6 6E??               M         movwf   chn_level
0001F8 0E00               M         movlw   ITS
0001FA 6E??               M         movwf   chn_num
0001FC EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00326         ccload  QUARTER, LIT
000200 0EFF               M         movlw   LIT
000202 6E??               M         movwf   chn_level
000204 0E03               M         movlw   QUARTER
000206 6E??               M         movwf   chn_num
000208 EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00327         ccload  TO_, LIT
00020C 0EFF               M         movlw   LIT
00020E 6E??               M         movwf   chn_level
000210 0E08               M         movlw   TO_
000212 6E??               M         movwf   chn_num
000214 EC?? F???          M         call    CKT_WRITE_CHANNEL
000218 D???           00328         bra     CCL_HOURS
                      00329 
                      00330 _min50  ccload  ITS, LIT
00021A 0EFF               M         movlw   LIT
00021C 6E??               M         movwf   chn_level
00021E 0E00               M         movlw   ITS
000220 6E??               M         movwf   chn_num
000222 EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00331         ccload  TEN_, LIT
000226 0EFF               M         movlw   LIT
000228 6E??               M         movwf   chn_level
00022A 0E02               M         movlw   TEN_
00022C 6E??               M         movwf   chn_num
00022E EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00332         ccload  MINUTES, LIT
000232 0EFF               M         movlw   LIT
000234 6E??               M         movwf   chn_level
000236 0E06               M         movlw   MINUTES
000238 6E??               M         movwf   chn_num
00023A EC?? F???          M         call    CKT_WRITE_CHANNEL
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00333         ccload  TO_, LIT
00023E 0EFF               M         movlw   LIT
000240 6E??               M         movwf   chn_level
000242 0E08               M         movlw   TO_
000244 6E??               M         movwf   chn_num
000246 EC?? F???          M         call    CKT_WRITE_CHANNEL
00024A D???           00334         bra     CCL_HOURS
                      00335 
                      00336 _min55  ccload  ITS, LIT
00024C 0EFF               M         movlw   LIT
00024E 6E??               M         movwf   chn_level
000250 0E00               M         movlw   ITS
000252 6E??               M         movwf   chn_num
000254 EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00337         ccload  FIVE_, LIT
000258 0EFF               M         movlw   LIT
00025A 6E??               M         movwf   chn_level
00025C 0E05               M         movlw   FIVE_
00025E 6E??               M         movwf   chn_num
000260 EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00338         ccload  MINUTES, LIT
000264 0EFF               M         movlw   LIT
000266 6E??               M         movwf   chn_level
000268 0E06               M         movlw   MINUTES
00026A 6E??               M         movwf   chn_num
00026C EC?? F???          M         call    CKT_WRITE_CHANNEL
                      00339         ccload  TO_, LIT
000270 0EFF               M         movlw   LIT
000272 6E??               M         movwf   chn_level
000274 0E08               M         movlw   TO_
000276 6E??               M         movwf   chn_num
000278 EC?? F???          M         call    CKT_WRITE_CHANNEL
00027C D???           00340         bra     CCL_HOURS
                      00341 
                      00342 _hour00 ccload  ONE, LIT
00027E 0EFF               M         movlw   LIT
000280 6E??               M         movwf   chn_level
000282 0E09               M         movlw   ONE
000284 6E??               M         movwf   chn_num
000286 EC?? F???          M         call    CKT_WRITE_CHANNEL
00028A D???           00343         bra     CCL_HOURS
                      00344 
                      00345 _hour01 ccload  ONE, LIT
00028C 0EFF               M         movlw   LIT
00028E 6E??               M         movwf   chn_level
000290 0E09               M         movlw   ONE
000292 6E??               M         movwf   chn_num
000294 EC?? F???          M         call    CKT_WRITE_CHANNEL
000298 D???           00346         bra     CCL_HOURS
                      00347 
                      00348 _hour02 ccload  TWO, LIT
00029A 0EFF               M         movlw   LIT
00029C 6E??               M         movwf   chn_level
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00029E 0E0A               M         movlw   TWO
0002A0 6E??               M         movwf   chn_num
0002A2 EC?? F???          M         call    CKT_WRITE_CHANNEL
0002A6 D???           00349         bra     CCL_HOURS
                      00350 
                      00351 _hour03 ccload  THREE, LIT
0002A8 0EFF               M         movlw   LIT
0002AA 6E??               M         movwf   chn_level
0002AC 0E0B               M         movlw   THREE
0002AE 6E??               M         movwf   chn_num
0002B0 EC?? F???          M         call    CKT_WRITE_CHANNEL
0002B4 D???           00352         bra     CCL_HOURS
                      00353 
                      00354 _hour04 ccload  FOUR, LIT
0002B6 0EFF               M         movlw   LIT
0002B8 6E??               M         movwf   chn_level
0002BA 0E0C               M         movlw   FOUR
0002BC 6E??               M         movwf   chn_num
0002BE EC?? F???          M         call    CKT_WRITE_CHANNEL
0002C2 D???           00355         bra     CCL_HOURS
                      00356 
                      00357 _hour05 ccload  FIVE, LIT
0002C4 0EFF               M         movlw   LIT
0002C6 6E??               M         movwf   chn_level
0002C8 0E0D               M         movlw   FIVE
0002CA 6E??               M         movwf   chn_num
0002CC EC?? F???          M         call    CKT_WRITE_CHANNEL
0002D0 D???           00358         bra     CCL_HOURS
                      00359 
                      00360 _hour06 ccload  SIX, LIT
0002D2 0EFF               M         movlw   LIT
0002D4 6E??               M         movwf   chn_level
0002D6 0E0E               M         movlw   SIX
0002D8 6E??               M         movwf   chn_num
0002DA EC?? F???          M         call    CKT_WRITE_CHANNEL
0002DE D???           00361         bra     CCL_HOURS
                      00362 
                      00363 _hour07 ccload  SEVEN, LIT
0002E0 0EFF               M         movlw   LIT
0002E2 6E??               M         movwf   chn_level
0002E4 0E0F               M         movlw   SEVEN
0002E6 6E??               M         movwf   chn_num
0002E8 EC?? F???          M         call    CKT_WRITE_CHANNEL
0002EC D???           00364         bra     CCL_HOURS
                      00365 
                      00366 _hour08 ccload  EIGHT, LIT
0002EE 0EFF               M         movlw   LIT
0002F0 6E??               M         movwf   chn_level
0002F2 0E10               M         movlw   EIGHT
0002F4 6E??               M         movwf   chn_num
0002F6 EC?? F???          M         call    CKT_WRITE_CHANNEL
0002FA D???           00367         bra     CCL_HOURS
                      00368 
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00369 _hour09 ccload  NINE, LIT
0002FC 0EFF               M         movlw   LIT
0002FE 6E??               M         movwf   chn_level
000300 0E11               M         movlw   NINE
000302 6E??               M         movwf   chn_num
000304 EC?? F???          M         call    CKT_WRITE_CHANNEL
000308 D???           00370         bra     CCL_HOURS
                      00371 
                      00372 _hour10 ccload  TEN, LIT
00030A 0EFF               M         movlw   LIT
00030C 6E??               M         movwf   chn_level
00030E 0E12               M         movlw   TEN
000310 6E??               M         movwf   chn_num
000312 EC?? F???          M         call    CKT_WRITE_CHANNEL
000316 D???           00373         bra     CCL_HOURS
                      00374 
                      00375 _hour11 ccload  ELEVEN, LIT
000318 0EFF               M         movlw   LIT
00031A 6E??               M         movwf   chn_level
00031C 0E13               M         movlw   ELEVEN
00031E 6E??               M         movwf   chn_num
000320 EC?? F???          M         call    CKT_WRITE_CHANNEL
000324 D???           00376         bra     CCL_HOURS
                      00377 
                      00378 _hour12 ccload  TWELVE, LIT
000326 0EFF               M         movlw   LIT
000328 6E??               M         movwf   chn_level
00032A 0E14               M         movlw   TWELVE
00032C 6E??               M         movwf   chn_num
00032E EC?? F???          M         call    CKT_WRITE_CHANNEL
000332 D???           00379         bra     CCL_HOURS
                      00380 
                      00381 
                      00382 ;*****************************************************************************
                      00383 ;***** PLAYLIST LEVEL FUNCTIONS **********************************************
                      00384 ;*****************************************************************************
                      00385 
                      00386 ;*****************************************************************************
                      00387 ; PLAY_INIT             Init playback module and load first cue
                      00388 ;
                      00389 ; INPUTS: <none>
                      00390 ; RETURNS: <none>
                      00391 
000334                00392 PLAY_INIT       
000334 EC?? F???      00393         call    _PLAY_RESET_MASTER_PTR  ; init playlist master table pointer 
000338 EC?? F???      00394         call    _PLAY_SET_PLAY_PTR      ; set active playlist pointer from master
00033C EC?? F???      00395         call    _PLAY_SET_CUE_PTR       ; set cue pointer from playlist pointer
000340 EC?? F???      00396         call    CUE_LOAD_CUE            ; start playlist at first cue
000344 0012           00397         return
                      00398 
                      00399 ;*****************************************************************************
                      00400 ; PLAY_GET_NEXT_PLAYLIST        Advance to next playlist
                      00401 ; PLAY_GET_PREV_PLAYLIST        Back up to previous playlist
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00402 ;
                      00403 ; INPUTS:       play_master_ptr_hi/lo current state
                      00404 ;
                      00405 ; RETURNS:      play_master_ptr_hi/lo next/previous state
                      00406 ;               play_ptr_hi/lo set to value in master playlist
                      00407 ;
                      00408 ; PLAYLIST_DONE is technically treated as a CODA (which also would test positive)
                      00409 
000346                00410 PLAY_GET_NEXT_PLAYLIST
000346 EC?? F???      00411         call    _PLAY_INCR_MASTER_PTR
00034A D???           00412         bra     PGP_01
                      00413 
00034C                00414 PLAY_GET_PREV_PLAYLIST
00034C EC?? F???      00415         call    _PLAY_DECR_MASTER_PTR
000350 EC?? F???      00416 PGP_01  call    _PLAY_SET_PLAY_PTR
000354 50??           00417         movf    play_ptr_hi,W           ; test pointer for master playlist DONE
000356 0A00           00418         xorlw   HIGH PLAYLIST_DONE      ; test for both list overflow and underflow
000358 E0??           00419         bz      PGP_RESTART             ; if MSByte is zer, restart the master list
00035A 0012           00420         return                          ; otehrwise return without pointer adjustment
                      00421 
00035C                00422 PGP_RESTART
00035C EC?? F???      00423         call    _PLAY_RESET_MASTER_PTR
000360 EC?? F???      00424         call    _PLAY_SET_PLAY_PTR
000364 0012           00425         return
                      00426 
                      00427 ;*****************************************************************************
                      00428 ; PLAY_RUN_NEXT_CUE     Run next cue in active playlist
                      00429 ;
000366                00430 PLAY_RUN_NEXT_CUE
000366 EC?? F???      00431         call    PLAY_GET_NEXT_CUE       ; get the next cue
00036A E1??           00432         bnz     PRNC_OK                 ; if Z=0 exit with no cue load 
00036C EC?? F???      00433         call    CUE_LOAD_CUE            ; run the next cue      
000370 0012           00434 PRNC_OK return
                      00435 
                      00436 ;*****************************************************************************
                      00437 ; PLAY_GET_NEXT_CUE   Get next cue in active playlist. 
                      00438 ; Handles DONE, CODA, LOOPs and JUMPs.
                      00439 ;
                      00440 ; INPUTS:       cue_ptr_hi/lo points to current cue in active playlist
                      00441 ;
                      00442 ; RETURNS:      Z=1     pointer advanced successfully (cue should be exectuted)
                      00443 ;               Z=0     pointer did not advance because: (do not run cue)
                      00444 ;                        - DONE encountered
                      00445 ;                        - error detected
000372                00446 PLAY_GET_NEXT_CUE
                      00447         ; read next cue pointer from active playlist
000372 EC?? F???      00448         call    _PLAY_INCR_PLAY_PTR     ; increment play pointer to next cue 
000376 EC?? F???      00449         call    _PLAY_SET_CUE_PTR       ; set cue pointer from playlist pointer
                      00450 
                      00451         ; test cue pointer for playlist DONE or CODA
00037A 50??           00452         movf    cue_ptr_hi,W
00037C E1??           00453         bnz     PGNC_01                 ; if MSbyte is not zero skip these tests
                      00454 
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00037E 50??           00455         movf    cue_ptr_lo,W
000380 0A00           00456         xorlw   LOW PLAYLIST_DONE       ; test for DONE
000382 E0??           00457         bz      PGNC_DONE               ; it's done - exit OK
                      00458 
000384 50??           00459         movf    cue_ptr_lo,W            ; test for CODA
000386 0A01           00460         xorlw   LOW PLAYLIST_CODA
000388 E1??           00461         bnz     PGNC_ERR                ; it's not DONE or CODA - error
                      00462 
00038A EC?? F???      00463         call    _PLAY_SET_PLAY_PTR      ; it's a CODA. (Re)set playlist ptr from master
00038E EC?? F???      00464         call    _PLAY_SET_CUE_PTR       ; set cue pointer from playlist pointer
                      00465 
000392                00466 PGNC_01 ; put looping controls here
                      00467         
000392 84D8           00468 PGNC_OK bsf     STATUS,Z                ; OK exit. Run next cue
000394 0C00           00469         retlw   ERR_NO_ERROR
                      00470 
000396                00471 PGNC_DONE                               ; DONE exit. Do not run next cue
000396 94D8           00472         bcf     STATUS,Z
000398 0C00           00473         retlw   ERR_NO_ERROR
                      00474 
00039A                00475 PGNC_ERR                                ; Error exit. Do not run next cue
00039A 94D8           00476         bcf     STATUS,Z
00039C 0C01           00477         retlw   ERR_BAD_COMMAND
                      00478 
                      00479 ;*****************************************************************************
                      00480 ; Playlist helper routines
                      00481 ;
00039E                00482 _PLAY_RESET_MASTER_PTR                  ; reset playlist master pointer
00039E 0E??           00483         movlw   HIGH PLAYLIST_MASTER_TABLE
0003A0 6E??           00484         movwf   play_master_ptr_hi
0003A2 0E??           00485         movlw   LOW PLAYLIST_MASTER_TABLE
0003A4 6E??           00486         movwf   play_master_ptr_lo
0003A6 0012           00487         return
                      00488 
0003A8                00489 _PLAY_INCR_MASTER_PTR                   ; increment playlist master pointer 
0003A8 0E02           00490         movlw   0x02
0003AA 26??           00491         addwf   play_master_ptr_lo,F    
0003AC 0E00           00492         movlw   0x00
0003AE 22??           00493         addwfc  play_master_ptr_hi,F    
0003B0 0012           00494         return
                      00495 
0003B2                00496 _PLAY_DECR_MASTER_PTR                   ; decrement playlist master pointer 
0003B2 0E02           00497         movlw   0x02
0003B4 5E??           00498         subwf   play_master_ptr_lo,F    
0003B6 0E00           00499         movlw   0x00
0003B8 5A??           00500         subwfb  play_master_ptr_hi,F    
0003BA 0012           00501         return
                      00502 
0003BC                00503 _PLAY_SET_PLAY_PTR                      ; set playlist pointer from master pointer 
0003BC C??? FFF7      00504         movff   play_master_ptr_hi,TBLPTRH
0003C0 C??? FFF6      00505         movff   play_master_ptr_lo,TBLPTRL
0003C4 0009           00506         tblrd*+
0003C6 CFF5 F???      00507         movff   TABLAT,play_ptr_lo
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0003CA 0009           00508         tblrd*+
0003CC CFF5 F???      00509         movff   TABLAT,play_ptr_hi
0003D0 0012           00510         return
                      00511 
0003D2                00512 _PLAY_INCR_PLAY_PTR                     ; increment playlist pointer 
0003D2 0E02           00513         movlw   0x02
0003D4 26??           00514         addwf   play_ptr_lo,F   
0003D6 0E00           00515         movlw   0x00
0003D8 22??           00516         addwfc  play_ptr_hi,F   
0003DA 0012           00517         return
                      00518 
0003DC                00519 _PLAY_SET_CUE_PTR                       ; set cue pointer from playlist pointer
0003DC C??? FFF7      00520         movff   play_ptr_hi,TBLPTRH
0003E0 C??? FFF6      00521         movff   play_ptr_lo,TBLPTRL
0003E4 0009           00522         tblrd*+
0003E6 CFF5 F???      00523         movff   TABLAT,cue_ptr_lo
0003EA 0009           00524         tblrd*+
0003EC CFF5 F???      00525         movff   TABLAT,cue_ptr_hi
0003F0 0012           00526         return
                      00527 
                      00528 
                      00529 ;*****************************************************************************
                      00530 ;***** CUE LEVEL FUNCTIONS ***************************************************
                      00531 ;*****************************************************************************
                      00532 
                      00533 ;*****************************************************************************
                      00534 ; CUE_WATCHER           Test cue_watch for cue done & run cue if needed
                      00535 ;
                      00536 ; See if the current cue is finished by checking the fade channel status.
                      00537 ; Run the next cue in the active playlist if this is true
                      00538 ;
                      00539 ; INPUTS:  cue_watch    watch state:
                      00540 ;                       0x00 - 0xNN     - Check fader NN for DONE & load cue if true
                      00541 ;                       0xFE (NOW)      - Load next cue right now.
                      00542 ;                       0xFF (NEVER)    - Never load next cue (disabled).
                      00543 
0003F2                00544 CUE_WATCHER
0003F2 50??           00545         movf    cue_watch,W             ; test for NEVER condition
0003F4 0AFE           00546         xorlw   NEVER
0003F6 E0??           00547         bz      CUW_EXIT_NO_CHANGE
                      00548 
0003F8 50??           00549         movf    cue_watch,W             ; test for NOW condition
0003FA 0AFF           00550         xorlw   NOW
0003FC E0??           00551         bz      CUW_RUN_NEXT_CUE
                      00552 
0003FE EC?? F???      00553         call    FDR_TEST_FDR_DONE       ; test watched fader channel for completion status
000402 E0??           00554         bz      CUW_EXIT_NO_CHANGE
                      00555 
000404                00556 CUW_RUN_NEXT_CUE
000404 EC?? F???      00557         call    PLAY_RUN_NEXT_CUE
                      00558 
000408                00559 CUW_EXIT_NO_CHANGE
000408 0012           00560         return
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00561 
                      00562 
                      00563 ;*****************************************************************************
                      00564 ; CUE_RUN_CUE           Run a cue from cue table by mumber
                      00565 ;
                      00566 ; INPUTS cue_num_hi     cue number to run
                      00567 ;        cue_num_lo     
                      00568 ;
                      00569 ; FUNCTION      Calls CUE_LOAD_CUE with cue pointer from CUE_NUMBER_TABLE
                      00570 
00040A                00571 CUE_RUN_CUE
                      00572         tblindx CUE_NUMBER_TABLE, cue_num_lo    ; set table pointer
00040A 0E??               M         movlw   high CUE_NUMBER_TABLE
00040C 6EF7               M         movwf   TBLPTRH
00040E 0E??               M         movlw   low CUE_NUMBER_TABLE
000410 6EF6               M         movwf   TBLPTRL
000412 44??               M         rlncf   cue_num_lo,W            ; multiply index value by 2
000414 26F6               M         addwf   TBLPTRL
000416 0E00               M         movlw   0                       ; propagate carry (if any)
000418 22F7               M         addwfc  TBLPTRH
00041A 0009           00573         tblrd*+
00041C CFF5 F???      00574         movff   TABLAT,cue_ptr_lo
000420 0008           00575         tblrd*
000422 CFF5 F???      00576         movff   TABLAT,cue_ptr_hi
000426 EC?? F???      00577         call    CUE_LOAD_CUE
00042A 0012           00578         return
                      00579 
                      00580 ;*****************************************************************************
                      00581 ; CUE_LOAD_CUE          Load an entire cue from cue_ptr_hi/lo cue pointer
                      00582 ;
00042C                00583 CUE_LOAD_CUE
00042C C??? FFF6      00584         movff   cue_ptr_lo,TBLPTRL      ; setup the table pointer
000430 C??? FFF7      00585         movff   cue_ptr_hi,TBLPTRH
                      00586 
000434 0EFE           00587         movlw   NEVER                   ; clear the watch register
000436 6E??           00588         movwf   cue_watch
                      00589 
000438 EC?? F???      00590 PLP_01  call    CUE_GET_NEXT_COMMAND    ; loop in the command
00043C B4D8           00591         btfsc   STATUS,Z
00043E D???           00592         bra     PLP_01
000440 0012           00593         return
                      00594 
                      00595 ;*****************************************************************************
                      00596 ; CUE_GET_NEXT_COMMAND  Get and execute next command from cue
                      00597 ;
                      00598 ; INPUTS TBLPTR         points to CUE_xxxx in code space as per the following:
                      00599 ;                        - CUE_DONE
                      00600 ;                        - CUE_CMD
                      00601 ;                        - CUE_ARG
                      00602 ;                        - CUE_LOOP
                      00603 ;                        - CUE_LOOP_BLOCK
                      00604 ;                        - CUE_JUMP
                      00605 ;
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00606 ; RETURN  TBLPTR        points to next CUE_xxxx byte in string
                      00607 ;       - Z=0           signals an error occurred in processing (errcode in Z)
                      00608 ;       - Z=1           signals processing occurred OK
                      00609 ;
                      00610 ; USES:
                      00611 ;       - FSR1          primary memory pointer (trashed)
                      00612 ;       - FSR2          used in some ARG cases (might be trashed)
                      00613 ;
                      00614 ; See CUE_GET_COMMAND for details of the command structure
                      00615 
000442                00616 CUE_GET_NEXT_COMMAND
000442 0009           00617         tblrd*+                         ; read CUE_xxx byte (with post increment)
000444 50F5           00618         movf    TABLAT,W
000446 0806           00619         sublw   CUE_MAX+1
000448 E2??           00620         bc      CGN_01
00044A 94D8           00621         bcf     STATUS,Z
00044C 0C07           00622         retlw   ERR_GET_NEXT_CMD_FAILED
                      00623 
00044E 44F5           00624 CGN_01  rlncf   TABLAT,W                ; get CUE_xxxxx code x2 into W...
                      00625         switch
  0000                    M         local   table_base
000450 CFF7 F???          M         movff   TBLPTRH,temp_tblptrh    ; save current table pointer
000454 CFF6 F???          M         movff   TBLPTRL,temp_tblptrl
                          M 
000458 0F??               M         addlw   LOW table_base          ; add index (W) to table base
00045A 6EF6               M         movwf   TBLPTRL                 ; set low pointer
00045C 0E??               M         movlw   HIGH table_base
00045E 6EF7               M         movwf   TBLPTRH
000460 B0D8               M         btfsc   STATUS,C                ; propagate the carry from the add
000462 2AF7               M         incf    TBLPTRH,F
                          M 
000464 0009               M         tblrd*+                         ; read and save vector address lo byte
000466 50F5               M         movf    TABLAT,W
000468 0008               M         tblrd*                          ; read and save vector address hi byte
00046A CFF5 FFFA          M         movff   TABLAT,PCLATH
                          M 
00046E C??? FFF7          M         movff   temp_tblptrh,TBLPTRH    ; restore calling table pointer
000472 C??? FFF6          M         movff   temp_tblptrl,TBLPTRL
                          M 
000476 6EF9               M         movwf   PCL                     ; jump to case routine
000478                    M table_base
000478 ????           00626         data    CGN_DONE
00047A ????           00627         data    CGN_COMMAND
00047C ????           00628         data    CGN_ARGUMENT
00047E ????           00629         data    CGN_LOOP
000480 ????           00630         data    CGN_LOOP_LOCAL
000482 ????           00631         data    CGN_LOOP_REMOTE
000484 ????           00632         data    CGN_JUMP
                      00633 
000486                00634 CGN_DONE
000486 94D8           00635         bcf     STATUS,Z                ; signal DONE
000488 0C00           00636         retlw   ERR_NO_ERROR
                      00637 
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00048A                00638 CGN_COMMAND
00048A EC?? F???      00639         call    CUE_GET_COMMAND         ; this will pass back OK or ERR condition
00048E D???           00640         bra     CGN_EXIT
                      00641 
000490                00642 CGN_ARGUMENT
000490 EC?? F???      00643         call    CUE_SET_ARGUMENT
000494 D???           00644         bra     CGN_EXIT
                      00645 
000496                00646 CGN_LOOP
000496 0009           00647         tblrd*+                         ; get repeat counter
000498 CFF5 F???      00648         movff   TABLAT,cue_loop_counter
                      00649         
00049C 0009           00650         tblrd*+                         ; read the CUE_COMMAND code
00049E 50F5           00651         movf    TABLAT,W
0004A0 0A01           00652         xorlw   CUE_CMD
0004A2 E0??           00653         bz      CGNL01
0004A4 94D8           00654         bcf     STATUS,Z
0004A6 0C01           00655         retlw   ERR_BAD_COMMAND         ; return if error (with Z=0)
                      00656         
0004A8 CFF7 F???      00657 CGNL01  movff   TBLPTRH,cue_loop_table_hi ; save the command starting address
0004AC CFF6 F???      00658         movff   TBLPTRL,cue_loop_table_lo
                      00659 
0004B0 C??? FFF7      00660 CGNL02  movff   cue_loop_table_hi,TBLPTRH ; restore command starting address
0004B4 C??? FFF6      00661         movff   cue_loop_table_lo,TBLPTRL
                      00662 
0004B8 EC?? F???      00663         call    CUE_GET_COMMAND         ; this will pass back OK or ERR condition
0004BC A4D8           00664         btfss   STATUS,Z
0004BE 0C01           00665         retlw   ERR_BAD_COMMAND         ; return if error (with Z=0)
                      00666 
0004C0 2E??           00667         decfsz  cue_loop_counter
0004C2 D???           00668         bra     CGNL02
0004C4 D???           00669         bra     CGN_EXIT
                      00670 
0004C6                00671 CGN_LOOP_LOCAL
0004C6 D???           00672         bra     CGN_EXIT
                      00673 
0004C8                00674 CGN_LOOP_REMOTE
0004C8 D???           00675         bra     CGN_EXIT
                      00676 
0004CA                00677 CGN_JUMP
0004CA D???           00678         bra     CGN_EXIT
                      00679 
0004CC                00680 CGN_EXIT
0004CC 84D8           00681         bsf     STATUS,Z
0004CE 0012           00682         return
                      00683 
                      00684 ;*****************************************************************************
                      00685 ; CUE_GET_COMMAND       Get single command from cue (into FDR_LOADER buffer)
                      00686 ;
                      00687 ; INPUTS:
                      00688 ;       - TBLPTR        points to cmd byte in code space as per the following:
                      00689 ;                       CUE_CMD, cmd, argmask, arg0....argN    (see below)
                      00690 ; RETURNS:
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00691 ;       - chn_num       set to channel number of command
                      00692 ;       - FSR1          points to beginning of command buffer --
                      00693 ;                       suitable for passing to FDR_LOADER
                      00694 ;       - TBLPTR        points to next byte in in-memory cue string
                      00695 ;       - Z=0           signals an error occurred in processing
                      00696 ;       - Z=1           signals processing occurred OK
                      00697 ;
                      00698 ; Commands are represented by the following bytes:
                      00699 ;       - cmd           full command w/arg count (see color64.inc for defs)
                      00700 ;                       MSdigit is command code, LSdigit is arg count (zero based)
                      00701 ;
                      00702 ;       - argmask       single-byte bitfield organized <b7-b0> corresponding to 
                      00703 ;                       arg7 - arg0 for all commands except FADE 0x48, 0x49
                      00704 ;                       and 0x4A which require a preceding byte to encode the 
                      00705 ;                       upper bits as <bF-b8> corresponding to arg 0x0F - 0x08.
                      00706 ;                       If a bit is clear the literal value present in the 
                      00707 ;                       following arg string will be used. If a bit is set 
                      00708 ;                       then the arg at that location will be treated as an 
                      00709 ;                       arg number, and the value computed from the arg of that 
                      00710 ;                       number. If the arg number is greater than the max arg 
                      00711 ;                       number an error will be returned.
                      00712 ;
                      00713 ;       - arg0          first arg in the arg string
                      00714 ;       - arg1          second arg in the arg string
                      00715 ;         ....
                      00716 ;       - argN          Nth arg in the arg string
                      00717 ;
                      00718 
0004D0                00719 CUE_GET_COMMAND
0004D0 0009           00720         tblrd*+                         ; read cmd
0004D2 50F5           00721         movf    TABLAT,W
0004D4 EC?? F???      00722         call    CMD_VALIDATE_CMDCODE
0004D8 A4D8           00723         btfss   STATUS,Z
0004DA 0C01           00724         retlw   ERR_BAD_COMMAND         ; return if error (with Z=0)
                      00725 
                      00726         ; initialize context - each CGC_xxx gets the folling setup for them:
                      00727         ; - cue_command = command code in lower 4 bits
                      00728         ; - cue_argcount = number of args, 1 based
                      00729         ; - cue_argmask = lower argmask (or upper if there are 2 argmask bytes)
                      00730         ; - TBLPTR pointing to arg0 (or lower argmask if tehre are 2 argmask bytes)
                      00731         ;
0004DC EE?? F0??      00732         lfsr    1,cmd_buffer            ; initialize command buffer pointer
0004E0 6EE6           00733         movwf   POSTINC1                ; save command code in first byte
0004E2 6E??           00734         movwf   cue_argcount            ; isolate & save arg count...
0004E4 6E??           00735         movwf   cue_command             ;...and command digit
0004E6 3A??           00736         swapf   cue_command,F
0004E8 0E0F           00737         movlw   0x0F
0004EA 16??           00738         andwf   cue_argcount,F
0004EC 16??           00739         andwf   cue_command,F
                      00740 
0004EE 0009           00741         tblrd*+                         ; get first argument bitmask
0004F0 CFF5 F???      00742         movff   TABLAT,cue_argmask      ; will fix later if cmd has > 8 args
                      00743 
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00744         ; dispatch on command codes
0004F4 44??           00745         rlncf   cue_command,W           ; get command code x2 into W...
                      00746         switch
  0000                    M         local   table_base
0004F6 CFF7 F???          M         movff   TBLPTRH,temp_tblptrh    ; save current table pointer
0004FA CFF6 F???          M         movff   TBLPTRL,temp_tblptrl
                          M 
0004FE 0F??               M         addlw   LOW table_base          ; add index (W) to table base
000500 6EF6               M         movwf   TBLPTRL                 ; set low pointer
000502 0E??               M         movlw   HIGH table_base
000504 6EF7               M         movwf   TBLPTRH
000506 B0D8               M         btfsc   STATUS,C                ; propagate the carry from the add
000508 2AF7               M         incf    TBLPTRH,F
                          M 
00050A 0009               M         tblrd*+                         ; read and save vector address lo byte
00050C 50F5               M         movf    TABLAT,W
00050E 0008               M         tblrd*                          ; read and save vector address hi byte
000510 CFF5 FFFA          M         movff   TABLAT,PCLATH
                          M 
000514 C??? FFF7          M         movff   temp_tblptrh,TBLPTRH    ; restore calling table pointer
000518 C??? FFF6          M         movff   temp_tblptrl,TBLPTRL
                          M 
00051C 6EF9               M         movwf   PCL                     ; jump to case routine
00051E                    M table_base
00051E ????           00747         data    CGC_ERROR               ; 00 = no command - error exit
000520 ????           00748         data    CGC_SET_BRT
000522 ????           00749         data    CGC_SET_HSB
000524 ????           00750         data    CGC_SET_RGB
000526 ????           00751         data    CGC_PATCH
000528 ????           00752         data    CGC_FADE
00052A ????           00753         data    CGC_WATCH
                      00754 
00052C                00755 CGC_ERROR                               ; error return
00052C 94D8           00756         bcf     STATUS,Z
00052E 0C06           00757         retlw   ERR_GET_COMMAND_FAILED
                      00758 
                      00759 
                      00760 ;--- SET_BRT command handler ----
                      00761 ;--- SET_HSB command handler ----
                      00762 ;--- PATCH command handler ----
                      00763 ; Same code works for all commands
                      00764 
000530                00765 CGC_SET_BRT
000530                00766 CGC_SET_HSB
000530                00767 CGC_PATCH
000530 C??? F???      00768         movff   cue_argcount,cue_loop_work
000534 2A??           00769         incf    cue_loop_work,F         ; increment to make counting easier
000536 0009           00770 CGC_H1  tblrd*+                         ; get and save arg value
000538 CFF5 F???      00771         movff   TABLAT,cue_argvalue
00053C B0??           00772         btfsc   cue_argmask,0           ; bit of interest in argmask is found in LSB
00053E EC?? F???      00773         call    CUE_GET_ARGUMENT        ; perform arg reeplacement - returns in argvalue
000542 C??? FFE6      00774         movff   cue_argvalue,POSTINC1   ; move the value in
000546 42??           00775         rrncf   cue_argmask,F           ; shift next arg bitmask value into bit 0
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000548 2E??           00776         decfsz  cue_loop_work,F         ; looping test
00054A D???           00777         bra     CGC_H1
00054C EC?? F???      00778         call    CGC_COMMON_EXIT         ; load command into comamnd table and exit      
000550 0012           00779         return
                      00780 
                      00781 ;--- SET_HSB command handler ----
                      00782 
000552                00783 CGC_SET_RGB                             ; ++++++ not implemented
000552 0012           00784         return
                      00785 
                      00786 ;--- WATCH command handler ---- 
                      00787 
000554                00788 CGC_WATCH
000554 0009           00789         tblrd*+                         ; get and save WATCH circuit or arg value
000556 CFF5 F???      00790         movff   TABLAT,cue_argvalue     ; save in arg_value
00055A B0??           00791         btfsc   cue_argmask,0           ; bit of interest in argmask is found in LSB
00055C EC?? F???      00792         call    CUE_GET_ARGUMENT        ; perform arg replacement - returns in argvalue
000560 C??? FFE6      00793         movff   cue_argvalue,POSTINC1   ; move the value in
000564 EC?? F???      00794         call    CGC_COMMON_EXIT         ; load command into comamnd table and exit      
000568 0012           00795         return
                      00796 
                      00797 ;--- FADE command handler ----
                      00798 
00056A                00799 CGC_FADE
00056A 6A??           00800         clrf    cue_argflags            ; initialize flags (ARG_HI_FLAG is zeroed)
00056C 50??           00801         movf    cue_argcount,W
00056E 0807           00802         sublw   0x07                    ; test if a larger argmask is required
000570 E2??           00803         bc      CGC_P1
000572 C??? F???      00804         movff   cue_argmask, cue_argmask_hi
000576 000B           00805         tblrd+*                         ; get second argument bitmask
000578 CFF5 F???      00806         movff   TABLAT,cue_argmask
00057C 80??           00807         bsf     cue_argflags,ARG_HI_FLAG ; signal that there are upper args
00057E 0E08           00808         movlw   0x08
000580 6E??           00809         movwf   cue_loop_work           ; set loop counter to do all 8 lo args
000582 D???           00810         bra     CGC_P2
                      00811 
                      00812         ; do lower (up to) 8 arguments 
000584 C??? F???      00813 CGC_P1  movff   cue_argcount,cue_loop_work
000588 2A??           00814         incf    cue_loop_work,F         ; increment to make counting easier
00058A 0009           00815 CGC_P2  tblrd*+                         ; get and save arg value
00058C CFF5 F???      00816         movff   TABLAT,cue_argvalue
000590 B0??           00817         btfsc   cue_argmask,0           ; bit of interest in argmask is found in LSB
000592 EC?? F???      00818         call    CUE_GET_ARGUMENT        ; perform arg replacement - returns in argvalue
000596 C??? FFE6      00819         movff   cue_argvalue,POSTINC1   ; move the value in
00059A 42??           00820         rrncf   cue_argmask,F           ; shift next arg bitmask value into bit 0
00059C 2E??           00821         decfsz  cue_loop_work,F         ; looping test
00059E D???           00822         bra     CGC_P2
                      00823 
                      00824         ; test for and do upper (up to) 8 arguments 
0005A0 A0??           00825         btfss   cue_argflags,ARG_HI_FLAG
0005A2 D???           00826         bra     CGC_COMMON_EXIT         ; load command into command table
0005A4 0E07           00827         movlw   0x07                    ; 8 minus 1
0005A6 5C??           00828         subwf   cue_argcount,W
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0005A8 6E??           00829         movwf   cue_loop_work           ; set loop counter
0005AA 0009           00830 CGC_P3  tblrd*+                         ; get and save arg value
0005AC CFF5 F???      00831         movff   TABLAT,cue_argvalue
0005B0 B0??           00832         btfsc   cue_argmask_hi,0        ; bit of interest in argmask is found in LSB
0005B2 EC?? F???      00833         call    CUE_GET_ARGUMENT        ; perform arg replacement - returns in argvalue
0005B6 C??? FFE6      00834         movff   cue_argvalue,POSTINC1   ; move the value in
0005BA 42??           00835         rrncf   cue_argmask_hi,F        ; shift next arg bitmask value into bit 0
0005BC 2E??           00836         decfsz  cue_loop_work,F
0005BE D???           00837         bra     CGC_P3
                      00838 
                      00839 ;---- COMMON EXIT for PGC routines ----
                      00840 ; Load command into the command table and exit with status propogated from loader
                      00841 
0005C0                00842 CGC_COMMON_EXIT 
                      00843         ; load the command into the command table
0005C0 EE?? F0??      00844         lfsr    1,cmd_buffer            ; initialize command buffer pointer
0005C4 EC?? F???      00845         call    CMD_LOADER              ; load command (TBLPTR must be preserved)
                      00846 ;       bsf     STATUS,Z
0005C8 0012           00847         return
                      00848 
                      00849 ;*****************************************************************************
                      00850 ; CUE_SET_ARGUMENT      Load an argument structure into arg cell
                      00851 ;
                      00852 ; INPUTS:
                      00853 ;       - TBLPTR        points to argnum in code space as per the following:
                      00854 ;                       CUE_ARG, argnum, opcode, var1, [var2], [var3]
                      00855 ; RETURNS:
                      00856 ;       - TBLPTR        points to next CUE_xxxx byte in string
                      00857 ;       - Z=0           signals an error occurred in processing
                      00858 ;       - Z=1           signals processing occurred OK
                      00859 
                      00860 ; Command arguments (args) are 4 byte structures that perform substitutions 
                      00861 ; for command variables during command loads. Args can perform literal 
                      00862 ; substitution for variables or a variety of simple math functions. Structure:
                      00863 ;
                      00864 ;       - Arg number    args number 0 - N. Implicit based on location in table
                      00865 ;       - Opcode        operation to perform during argument substitution
                      00866 ;       - Operand1      (op1) first operand interprested by opcode
                      00867 ;       - Operand2      (op2) second operand interprested by opcode
                      00868 ;       - Operand3      (op3) thirg operand interprested by opcode
                      00869 ;
                      00870 ; Op2 and op3 can be used as a 16 bit address - refered to as "addr".
                      00871 ; See Argument OPCODE definitions for opcode details
                      00872 ;
                      00873 ; opcode            var1   var2   var3  usage
                      00874 ; OP_LIT            value  ---    ---   ; use op1 as literal value
                      00875 ; OP_INC            start  ---    ---   ; use op1, post increment & store in op1
                      00876 ; OP_INC_RANGE      start  max    min   ; inc by 1 [op2=max, op3=min], store in op1
                      00877 ; OP_INCX2_RANGE    start  max    min   ; inc by 2 [op2=max, op3=min], store in op1
                      00878 ; OP_INCX3_RANGE    start  max    min   ; inc by 3 [op2=max, op3=min], store in op1
                      00879 ; OP_INCX4_RANGE    start  max    min   ; inc by 4 [op2=max, op3=min], store in op1
                      00880 ; OP_DEC            start  ---    ---   ; use op1, post decrement & store in op1
                      00881 ; OP_DEC_RANGE      start  max    min   ; dec by 1 [op2=max, op3=min], store in op1
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00882 ; OP_DECX2_RANGE    start  max    min   ; dec by 2 [op2=max, op3=min], store in op1
                      00883 ; OP_DECX3_RANGE    start  max    min   ; dec by 3 [op2=max, op3=min], store in op1
                      00884 ; OP_DECX4_RANGE    start  max    min   ; dec by 4 [op2=max, op3=min], store in op1
                      00885 ; OP_ADD            start  add    ---   ; (op1+op2), save result in op1
                      00886 ; OP_ADD_AND        start  add    and   ; (op1+op2), AND with op3, do not save result
                      00887 ; OP_ADD_AND_SAVE   start  add    and   ; (op1+op2), AND with op3l, save result in op1
                      00888 ; OP_ADD_IND        start  ind    ---   ; (op1+op2(op1)), do not save result
                      00889 ; OP_ADD_IND_SAVE   start  ind    ---   ; (op1+op2(op1)), save result in op1
                      00890 ; OP_ADD_IND_AND    start  ind    and   ; (op1+op2(op1)), AND with op3, do not save
                      00891 ; OP_ADD_IND_AND_SAVE srt  ind    and   ; (op1+op2(op1)), AND with op3, save in op1
                      00892 ; OP_SUB            start  sub    ---   ; (op1-op2), save result in op1
                      00893 ; OP_SUB_AND        start  sub    and   ; (op1-op2), AND with op3, do not save result
                      00894 ; OP_SUB_AND_SAVE   start  sub    and   ; (op1-op2), AND with op3, save in op1
                      00895 ; OP_SUB_IND        start  ind    ---   ; (op1-op2(op1)), do not save result
                      00896 ; OP_SUB_IND_SAVE   start  ind    ---   ; (op1-op2(op1)), save result in op1
                      00897 ; OP_SUB_IND_AND    start  ind    and   ; (op1-op2(op1)), AND with op3, do not save
                      00898 ; OP_SUB_IND_AND_SAVE srt  ind    and   ; (op1-op2(op1)), AND with op3, save in op1
                      00899 ; OP_RAND           seed   ---    ---   ; pseudo-random#, op1=seed, update seed
                      00900 ; OP_RAND_RANGE     seed   max    min   ; pseudo-random# [op2=max, op3=min], op1=seed
                      00901 
0005CA                00902 CUE_SET_ARGUMENT
0005CA 0009           00903         tblrd*+                         ; read argnum
0005CC 50F5           00904         movf    TABLAT,W
0005CE EC?? F???      00905         call    CUE_SET_ARG_ADDR        ; set FSR to opcode in arg_table
0005D2 0009           00906         tblrd*+                         ; get the opcode (keep in TABLAT)
0005D4 50F5           00907         movf    TABLAT,W
0005D6 081A           00908         sublw   OP_OPCODE_MAX           ; test for error in opcode value
0005D8 E2??           00909         bc      CSA_DSP
0005DA 94D8           00910         bcf     STATUS,Z                ; return with error
0005DC 0C04           00911         retlw   ERR_BAD_OPCODE
                      00912 
                      00913                 ; dispatch on opcode
0005DE 44F5           00914 CSA_DSP rlncf   TABLAT,W                ; get opcode x2 into W...
                      00915         switch
  0000                    M         local   table_base
0005E0 CFF7 F???          M         movff   TBLPTRH,temp_tblptrh    ; save current table pointer
0005E4 CFF6 F???          M         movff   TBLPTRL,temp_tblptrl
                          M 
0005E8 0F??               M         addlw   LOW table_base          ; add index (W) to table base
0005EA 6EF6               M         movwf   TBLPTRL                 ; set low pointer
0005EC 0E??               M         movlw   HIGH table_base
0005EE 6EF7               M         movwf   TBLPTRH
0005F0 B0D8               M         btfsc   STATUS,C                ; propagate the carry from the add
0005F2 2AF7               M         incf    TBLPTRH,F
                          M 
0005F4 0009               M         tblrd*+                         ; read and save vector address lo byte
0005F6 50F5               M         movf    TABLAT,W
0005F8 0008               M         tblrd*                          ; read and save vector address hi byte
0005FA CFF5 FFFA          M         movff   TABLAT,PCLATH
                          M 
0005FE C??? FFF7          M         movff   temp_tblptrh,TBLPTRH    ; restore calling table pointer
000602 C??? FFF6          M         movff   temp_tblptrl,TBLPTRL
                          M 
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000606 6EF9               M         movwf   PCL                     ; jump to case routine
000608                    M table_base
000608 ????           00916         data    CSA_OP_LIT              ; start  ---    ---
00060A ????           00917         data    CSA_OP_INC              ; start  ---    ---
00060C ????           00918         data    CSA_OP_INC_RANGE        ; start  max    min
00060E ????           00919         data    CSA_OP_INCX2_RANGE      ; start  max    min
000610 ????           00920         data    CSA_OP_INCX3_RANGE      ; start  max    min
000612 ????           00921         data    CSA_OP_INCX4_RANGE      ; start  max    min
000614 ????           00922         data    CSA_OP_DEC              ; start  ---    ---
000616 ????           00923         data    CSA_OP_DEC_RANGE        ; start  max    min
000618 ????           00924         data    CSA_OP_DECX2_RANGE      ; start  max    min
00061A ????           00925         data    CSA_OP_DECX3_RANGE      ; start  max    min
00061C ????           00926         data    CSA_OP_DECX4_RANGE      ; start  max    min
00061E ????           00927         data    CSA_OP_ADD              ; start  add    ---
000620 ????           00928         data    CSA_OP_ADD_AND          ; start  add    and
000622 ????           00929         data    CSA_OP_ADD_AND_SAVE     ; start  add    and
000624 ????           00930         data    CSA_OP_ADD_IND          ; start  ind    ---
000626 ????           00931         data    CSA_OP_ADD_IND_SAVE     ; start  ind    ---
000628 ????           00932         data    CSA_OP_ADD_IND_AND      ; start  ind    and
00062A ????           00933         data    CSA_OP_ADD_IND_AND_SAVE ; start  ind    and
00062C ????           00934         data    CSA_OP_SUB              ; start  sub    ---
00062E ????           00935         data    CSA_OP_SUB_AND          ; start  sub    and
000630 ????           00936         data    CSA_OP_SUB_AND_SAVE     ; start  sub    and
000632 ????           00937         data    CSA_OP_SUB_IND          ; start  ind    ---
000634 ????           00938         data    CSA_OP_SUB_IND_SAVE     ; start  ind    ---
000636 ????           00939         data    CSA_OP_SUB_IND_AND      ; start  ind    ---
000638 ????           00940         data    CSA_OP_SUB_IND_AND_SAVE ; start  ind    ---
00063A ????           00941         data    CSA_OP_RAND             ; seed   ---    ---
00063C ????           00942         data    CSA_OP_RAND_RANGE       ; seed   max    min
                      00943 
00063E                00944 CSA_OP_INC_RANGE                        ; start  max    min
00063E                00945 CSA_OP_INCX2_RANGE                      ; start  max    min
00063E                00946 CSA_OP_INCX3_RANGE                      ; start  max    min
00063E                00947 CSA_OP_INCX4_RANGE                      ; start  max    min
00063E                00948 CSA_OP_DEC_RANGE                        ; start  max    min
00063E                00949 CSA_OP_DECX2_RANGE                      ; start  max    min
00063E                00950 CSA_OP_DECX3_RANGE                      ; start  max    min
00063E                00951 CSA_OP_DECX4_RANGE                      ; start  max    min
00063E                00952 CSA_OP_ADD_AND                          ; start  add    and
00063E                00953 CSA_OP_ADD_AND_SAVE                     ; start  add    and
00063E                00954 CSA_OP_ADD_IND_AND                      ; start  ind    and
00063E                00955 CSA_OP_ADD_IND_AND_SAVE                 ; start  ind    and
00063E                00956 CSA_OP_SUB_AND                          ; start  sub    and
00063E                00957 CSA_OP_SUB_AND_SAVE                     ; start  sub    and
00063E                00958 CSA_OP_SUB_IND_AND                      ; start  ind    and
00063E                00959 CSA_OP_SUB_IND_AND_SAVE                 ; start  ind    and
00063E                00960 CSA_OP_RAND_RANGE                       ; seed   max    min
                      00961         ; args w/ op1, op2, op3
00063E 0009           00962         tblrd*+                         ; get op1
000640 CFF5 FFE6      00963         movff   TABLAT,POSTINC1         ; move to arg table
                      00964         ; args w/ op1, op2
000644                00965 CSA_OP_ADD                              ; start  add    ---
000644                00966 CSA_OP_ADD_IND                          ; start  ind    ---
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000644                00967 CSA_OP_ADD_IND_SAVE                     ; start  ind    ---
000644                00968 CSA_OP_SUB                              ; start  sub    ---
000644                00969 CSA_OP_SUB_IND                          ; start  ind    ---
000644                00970 CSA_OP_SUB_IND_SAVE                     ; start  ind    ---
000644 0009           00971         tblrd*+                         ; get op1 or op2
000646 CFF5 FFE6      00972         movff   TABLAT,POSTINC1         ; move to arg table
                      00973         ; args w/ op1 only
00064A                00974 CSA_OP_LIT                              ; start  ---    ---
00064A                00975 CSA_OP_INC                              ; start  ---    ---
00064A                00976 CSA_OP_DEC                              ; start  ---    ---
00064A                00977 CSA_OP_RAND                             ; seed   ---    ---
00064A 0009           00978         tblrd*+                         ; get op1 or op2 or op3
00064C CFF5 FFE6      00979         movff   TABLAT,POSTINC1         ; move to arg table
000650 84D8           00980         bsf     STATUS,Z                ; return OK
000652 0012           00981         return
                      00982 
                      00983 ;*****************************************************************************
                      00984 ; CUE_GET_ARGUMENT      Get an arguemnt value from an arg cell
                      00985 ;
                      00986 ; INPUTS:
                      00987 ;       - cue_argvalue  contains the argument *number* to get
                      00988 ;
                      00989 ; RETURNS:
                      00990 ;       - cue_argvalue  returns the argument *value*
                      00991 ;
                      00992 ; USES:
                      00993 ;       - uses FSR1 but restores it
                      00994 
000654                00995 CUE_GET_ARGUMENT
000654 50??           00996         movf    cue_argvalue,W          ; validate arg number range
000656 EC?? F???      00997         call    CUE_CHECK_ARGNUM        ; Note: validator destroys W
00065A A4D8           00998         btfss   STATUS,Z
00065C 0C03           00999         retlw   ERR_BAD_ARGNUM          ; error return
                      01000 
00065E CFE2 F???      01001         movff   FSR1H,cue_fsr1_temp_hi  ; save FSR1
000662 CFE1 F???      01002         movff   FSR1L,cue_fsr1_temp_lo
000666 50??           01003         movf    cue_argvalue,W
000668 EC?? F???      01004         call    CUE_SET_ARG_ADDR        ; set FSR1 to arg table entry - opcode byte
                      01005 
00066C CFE6 F???      01006         movff   POSTINC1,cue_opcode     ; get opcode - FSR1 now points to op1
000670 50??           01007         movf    cue_opcode,W            ; check for valid opcode
000672 EC?? F???      01008         call    CUE_CHECK_OPCODE        ; Note: validator destroys W
000676 E0??           01009         bz      PGA_01                  ; if Z=1, things are OK, otherwise error
000678 C??? FFE2      01010         movff   cue_fsr1_temp_hi,FSR1H  ; restore FSR1
00067C C??? FFE1      01011         movff   cue_fsr1_temp_lo,FSR1L
000680 0C04           01012         retlw   ERR_BAD_OPCODE          ; error return
                      01013 
000682 CFE6 F???      01014 PGA_01  movff   POSTINC1,cue_op1        ; get op1
000686 CFE6 F???      01015         movff   POSTINC1,cue_op2        ; get op2
00068A CFE7 F???      01016         movff   INDF1,cue_op3           ; get op3
00068E 50E5           01017         movf    POSTDEC1,W              ; dummy instruction to decrement pointer
000690 50E5           01018         movf    POSTDEC1,W              ; leave pointer to op1
                      01019 
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000692 44??           01020 PGA_DSP rlncf   cue_opcode,W            ; get opcode x2 into W...
                      01021         switch                          ;...GOTOs require x4
  0000                    M         local   table_base
000694 CFF7 F???          M         movff   TBLPTRH,temp_tblptrh    ; save current table pointer
000698 CFF6 F???          M         movff   TBLPTRL,temp_tblptrl
                          M 
00069C 0F??               M         addlw   LOW table_base          ; add index (W) to table base
00069E 6EF6               M         movwf   TBLPTRL                 ; set low pointer
0006A0 0E??               M         movlw   HIGH table_base
0006A2 6EF7               M         movwf   TBLPTRH
0006A4 B0D8               M         btfsc   STATUS,C                ; propagate the carry from the add
0006A6 2AF7               M         incf    TBLPTRH,F
                          M 
0006A8 0009               M         tblrd*+                         ; read and save vector address lo byte
0006AA 50F5               M         movf    TABLAT,W
0006AC 0008               M         tblrd*                          ; read and save vector address hi byte
0006AE CFF5 FFFA          M         movff   TABLAT,PCLATH
                          M 
0006B2 C??? FFF7          M         movff   temp_tblptrh,TBLPTRH    ; restore calling table pointer
0006B6 C??? FFF6          M         movff   temp_tblptrl,TBLPTRL
                          M 
0006BA 6EF9               M         movwf   PCL                     ; jump to case routine
0006BC                    M table_base
0006BC ????           01022         data    PGA_OP_LIT              ; start  ---    ---
0006BE ????           01023         data    PGA_OP_INC              ; start  ---    ---
0006C0 ????           01024         data    PGA_OP_INC_RANGE        ; start  max    min
0006C2 ????           01025         data    PGA_OP_INCX2_RANGE      ; start  max    min
0006C4 ????           01026         data    PGA_OP_INCX3_RANGE      ; start  max    min
0006C6 ????           01027         data    PGA_OP_INCX4_RANGE      ; start  max    min
0006C8 ????           01028         data    PGA_OP_DEC              ; start  ---    ---
0006CA ????           01029         data    PGA_OP_DEC_RANGE        ; start  max    min
0006CC ????           01030         data    PGA_OP_DECX2_RANGE      ; start  max    min
0006CE ????           01031         data    PGA_OP_DECX3_RANGE      ; start  max    min
0006D0 ????           01032         data    PGA_OP_DECX4_RANGE      ; start  max    min
0006D2 ????           01033         data    PGA_OP_ADD              ; start  add    ---
0006D4 ????           01034         data    PGA_OP_ADD_AND          ; start  add    and
0006D6 ????           01035         data    PGA_OP_ADD_AND_SAVE     ; start  add    and
0006D8 ????           01036         data    PGA_OP_ADD_IND          ; start  ind    ---
0006DA ????           01037         data    PGA_OP_ADD_IND_SAVE     ; start  ind    ---
0006DC ????           01038         data    PGA_OP_ADD_IND_AND      ; start  ind    and
0006DE ????           01039         data    PGA_OP_ADD_IND_AND_SAVE ; start  ind    and
0006E0 ????           01040         data    PGA_OP_SUB              ; start  sub    ---
0006E2 ????           01041         data    PGA_OP_SUB_AND          ; start  sub    and
0006E4 ????           01042         data    PGA_OP_SUB_AND_SAVE     ; start  sub    and
0006E6 ????           01043         data    PGA_OP_SUB_IND          ; start  ind    ---
0006E8 ????           01044         data    PGA_OP_SUB_IND_SAVE     ; start  ind    ---
0006EA ????           01045         data    PGA_OP_SUB_IND_AND      ; start  ind    ---
0006EC ????           01046         data    PGA_OP_SUB_IND_AND_SAVE ; start  ind    ---
0006EE ????           01047         data    PGA_OP_RAND             ; seed   ---    ---
0006F0 ????           01048         data    PGA_OP_RAND_RANGE       ; seed   max    min
                      01049 
0006F2                01050 PGA_OP_LIT                              ; use op1 as literal value
0006F2 D???           01051         bra     PGA_OK                  ; cue_argvalue is returned unchanged
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01052 
0006F4                01053 PGA_OP_INC                              ; use op1, post increment & store in op1
0006F4 C??? F???      01054         movff   cue_op1,cue_argvalue 
0006F8 2AE7           01055         incf    INDF1,F                 ; increment op1 unconditionally
0006FA D???           01056         bra     PGA_OK
                      01057 
0006FC                01058 PGA_OP_INC_RANGE                        ; inc by 1 [op2=max, op3=min], store in op1
0006FC C??? F???      01059         movff   cue_op1,cue_argvalue
000700 2AE7           01060         incf    INDF1,F                 ; increment op1
000702 50??           01061         movf    cue_op2,W
000704 64E7           01062         cpfsgt  INDF1                   ; compare and skip if op1 > op2
000706 D???           01063         bra     PGA_OK
000708 C??? FFE7      01064         movff   cue_op3,INDF1           ; load op1 with minimum value
00070C D???           01065         bra     PGA_OK
                      01066 
00070E                01067 PGA_OP_INCX2_RANGE                      ; inc by 2 [op2=max, op3=min], store in op1
00070E C??? F???      01068         movff   cue_op1,cue_argvalue
000712 0E02           01069         movlw   0x02
000714 26E7           01070         addwf   INDF1,F                 ; increment op1 by 2
000716 50??           01071         movf    cue_op2,W
000718 64E7           01072         cpfsgt  INDF1                   ; compare and skip if op1 > op2
00071A D???           01073         bra     PGA_OK
00071C C??? FFE7      01074         movff   cue_op3,INDF1           ; load op1 with minimum value
000720 D???           01075         bra     PGA_OK
                      01076 
000722                01077 PGA_OP_INCX3_RANGE                      ; inc by 3 [op2=max, op3=min], store in op1
000722 C??? F???      01078         movff   cue_op1,cue_argvalue
000726 0E03           01079         movlw   0x03
000728 26E7           01080         addwf   INDF1,F                 ; increment op1 by 3
00072A 50??           01081         movf    cue_op2,W
00072C 64E7           01082         cpfsgt  INDF1                   ; compare and skip if op1 > op2
00072E D???           01083         bra     PGA_OK
000730 C??? FFE7      01084         movff   cue_op3,INDF1           ; load op1 with minimum value
000734 D???           01085         bra     PGA_OK
                      01086 
000736                01087 PGA_OP_INCX4_RANGE                      ; inc by 4 [op2=max, op3=min], store in op1
000736 C??? F???      01088         movff   cue_op1,cue_argvalue
00073A 0E04           01089         movlw   0x04
00073C 26E7           01090         addwf   INDF1,F                 ; increment op1 by 4
00073E 50??           01091         movf    cue_op2,W
000740 64E7           01092         cpfsgt  INDF1                   ; compare and skip if op1 > op2
000742 D???           01093         bra     PGA_OK
000744 C??? FFE7      01094         movff   cue_op3,INDF1           ; load op1 with minimum value
000748 D???           01095         bra     PGA_OK
                      01096 
00074A                01097 PGA_OP_DEC                              ; use op1, post decrement & store in op1
00074A C??? F???      01098         movff   cue_op1,cue_argvalue 
00074E 06E7           01099         decf    INDF1,F                 ; increment op1 unconditionally
000750 D???           01100         bra     PGA_OK
                      01101 
000752                01102 PGA_OP_DEC_RANGE                        ; dec by 1 [op2=max, op3=min], store in op1
000752 C??? F???      01103         movff   cue_op1,cue_argvalue
000756 06E7           01104         decf    INDF1,F                 ; decrement op1 in place
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000758 50??           01105         movf    cue_op3,W
00075A 5CE7           01106         subwf   INDF1,W                 ; subtract the minimum from the new value
00075C E3??           01107         bnc     PGAODR
00075E D???           01108         bra     PGA_OK
000760 C??? FFE7      01109 PGAODR  movff   cue_op2,INDF1           ; load op1 with maximum value
000764 D???           01110         bra     PGA_OK
                      01111 
000766                01112 PGA_OP_DECX2_RANGE                      ; dec by 2 [op2=max, op3=min], store in op1
000766 C??? F???      01113         movff   cue_op1,cue_argvalue
00076A 0E02           01114         movlw   0x02
00076C 5EE7           01115         subwf   INDF1,F                 ; decrement op1 in place by 2
00076E E6??           01116         bn      PGAOD2R                 ; trap the overlapped underflow condition
000770 50??           01117         movf    cue_op3,W
000772 5CE7           01118         subwf   INDF1,W                 ; subtract the minimum from the new value
000774 E3??           01119         bnc     PGAOD2R
000776 D???           01120         bra     PGA_OK
000778 C??? FFE7      01121 PGAOD2R movff   cue_op2,INDF1           ; load op1 with maximum value
00077C D???           01122         bra     PGA_OK
                      01123 
00077E                01124 PGA_OP_DECX3_RANGE                      ; dec by 3 [op2=max, op3=min], store in op1
00077E C??? F???      01125         movff   cue_op1,cue_argvalue
000782 0E03           01126         movlw   0x03
000784 5EE7           01127         subwf   INDF1,F                 ; decrement op1 in place by 2
000786 E6??           01128         bn      PGAOD3R                 ; trap the overlapped underflow condition
000788 50??           01129         movf    cue_op3,W
00078A 5CE7           01130         subwf   INDF1,W                 ; subtract the minimum from the new value
00078C E3??           01131         bnc     PGAOD2R
00078E D???           01132         bra     PGA_OK
000790 C??? FFE7      01133 PGAOD3R movff   cue_op2,INDF1           ; load op1 with maximum value
000794 D???           01134         bra     PGA_OK
                      01135 
000796                01136 PGA_OP_DECX4_RANGE                      ; dec by 4 [op2=max, op3=min], store in op1
000796 C??? F???      01137         movff   cue_op1,cue_argvalue
00079A 0E04           01138         movlw   0x04
00079C 5EE7           01139         subwf   INDF1,F                 ; decrement op1 in place by 2
00079E E6??           01140         bn      PGAOD4R                 ; trap the overlapped underflow condition
0007A0 50??           01141         movf    cue_op3,W
0007A2 5CE7           01142         subwf   INDF1,W                 ; subtract the minimum from the new value
0007A4 E3??           01143         bnc     PGAOD2R
0007A6 D???           01144         bra     PGA_OK
0007A8 C??? FFE7      01145 PGAOD4R movff   cue_op2,INDF1           ; load op1 with maximum value
0007AC D???           01146         bra     PGA_OK
                      01147 
0007AE                01148 PGA_OP_ADD                              ; (op1+op2), store in op1
0007AE 50??           01149         movf    cue_op2,W
0007B0 24??           01150         addwf   cue_op1,W
0007B2 6EE7           01151         movwf   INDF1
0007B4 6E??           01152         movwf   cue_argvalue
0007B6 D???           01153         bra     PGA_OK
                      01154 
0007B8                01155 PGA_OP_ADD_AND                          ; (op1+op2), AND with op3, do not save result
0007B8 50??           01156         movf    cue_op2,W
0007BA 24??           01157         addwf   cue_op1,W
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0007BC 6EE7           01158         movwf   INDF1
0007BE 50??           01159         movf    cue_op3,W
0007C0 14E7           01160         andwf   INDF1,W
0007C2 6E??           01161         movwf   cue_argvalue
0007C4 D???           01162         bra     PGA_OK
                      01163 
0007C6                01164 PGA_OP_ADD_AND_SAVE                     ; (op1+op2), AND with op3, save result in op1
0007C6 50??           01165         movf    cue_op2,W
0007C8 24??           01166         addwf   cue_op1,W
0007CA 6EE7           01167         movwf   INDF1
0007CC 50??           01168         movf    cue_op3,W
0007CE 14E7           01169         andwf   INDF1,W
0007D0 6EE7           01170         movwf   INDF1                   ; save result
0007D2 6E??           01171         movwf   cue_argvalue
0007D4 D???           01172         bra     PGA_OK
                      01173 
0007D6                01174 PGA_OP_ADD_IND                          ; (op1+op2(op1)), do not save result
0007D6 50??           01175         movf    cue_op2,W               ; check for invalid arg number...
0007D8 EC?? F???      01176         call    CUE_CHECK_ARGNUM        ; and return zero if so
0007DC E0??           01177         bz      POAI1
0007DE 6A??           01178         clrf    cue_argvalue
0007E0 D???           01179         bra     PGA_OK
0007E2 50??           01180 POAI1   movf    cue_op2,W
0007E4 EC?? F???      01181         call    CUE_SET_ARG_ADDR2       ; set FSR2 to the indirect arg
0007E8 50DC           01182         movf    PREINC2,W               ; get value of op1 at argnum op2
0007EA 24??           01183         addwf   cue_op1,W
0007EC 6E??           01184         movwf   cue_argvalue
0007EE D???           01185         bra     PGA_OK
                      01186 
0007F0                01187 PGA_OP_ADD_IND_SAVE                     ; (op1+op2(op1)), save result in op1
0007F0 50??           01188         movf    cue_op2,W               ; check for invalid arg number...
0007F2 EC?? F???      01189         call    CUE_CHECK_ARGNUM        ; and return zero if so
0007F6 E0??           01190         bz      POAIS1
0007F8 6A??           01191         clrf    cue_argvalue
0007FA D???           01192         bra     PGA_OK
0007FC 50??           01193 POAIS1  movf    cue_op2,W
0007FE EC?? F???      01194         call    CUE_SET_ARG_ADDR2       ; set FSR2 to the indirect arg
000802 50DC           01195         movf    PREINC2,W               ; get value of op1 at argnum op2
000804 24??           01196         addwf   cue_op1,W
000806 6E??           01197         movwf   cue_argvalue
000808 6EE7           01198         movwf   INDF1                   ; save result
00080A D???           01199         bra     PGA_OK
                      01200 
00080C                01201 PGA_OP_ADD_IND_AND                      ; (op1+op2(op1)), AND with op3, do not save result
00080C 50??           01202         movf    cue_op2,W               ; check for invalid arg number...
00080E EC?? F???      01203         call    CUE_CHECK_ARGNUM        ; and return zero if so
000812 E0??           01204         bz      POAIA1
000814 6A??           01205         clrf    cue_argvalue
000816 D???           01206         bra     PGA_OK
000818 50??           01207 POAIA1  movf    cue_op2,W
00081A EC?? F???      01208         call    CUE_SET_ARG_ADDR2       ; set FSR2 to the indirect arg
00081E 50DC           01209         movf    PREINC2,W               ; get value of op1 at argnum op2
000820 24??           01210         addwf   cue_op1,W
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000822 50??           01211         movf    cue_op3,W
000824 14E7           01212         andwf   INDF1,W
000826 6E??           01213         movwf   cue_argvalue
000828 D???           01214         bra     PGA_OK
                      01215 
00082A                01216 PGA_OP_ADD_IND_AND_SAVE                 ; (op1+op2(op1)), AND with op3, save result
00082A 50??           01217         movf    cue_op2,W               ; check for invalid arg number...
00082C EC?? F???      01218         call    CUE_CHECK_ARGNUM        ; and return zero if so
000830 E0??           01219         bz      POAIAS1
000832 6A??           01220         clrf    cue_argvalue
000834 D???           01221         bra     PGA_OK
000836 50??           01222 POAIAS1 movf    cue_op2,W
000838 EC?? F???      01223         call    CUE_SET_ARG_ADDR2       ; set FSR2 to the indirect arg
00083C 50DC           01224         movf    PREINC2,W               ; get value of op1 at argnum op2
00083E 24??           01225         addwf   cue_op1,W
000840 50??           01226         movf    cue_op3,W
000842 14E7           01227         andwf   INDF1,W
000844 6E??           01228         movwf   cue_argvalue
000846 6EE7           01229         movwf   INDF1                   ; save result
000848 D???           01230         bra     PGA_OK
                      01231 
00084A                01232 PGA_OP_SUB                              ; (op1-op2), save result in op1
00084A 50??           01233         movf    cue_op2,W
00084C 5C??           01234         subwf   cue_op1,W
00084E 6EE7           01235         movwf   INDF1
000850 6E??           01236         movwf   cue_argvalue
000852 D???           01237         bra     PGA_OK
                      01238 
000854                01239 PGA_OP_SUB_AND                          ; (op1-op2), AND with op3, do not save result
000854 50??           01240         movf    cue_op2,W
000856 5C??           01241         subwf   cue_op1,W
000858 6EE7           01242         movwf   INDF1
00085A 50??           01243         movf    cue_op3,W
00085C 14E7           01244         andwf   INDF1,W
00085E 6E??           01245         movwf   cue_argvalue
000860 D???           01246         bra     PGA_OK
                      01247 
000862                01248 PGA_OP_SUB_AND_SAVE                     ; (op1-op2), AND with op3, save result in op1
000862 50??           01249         movf    cue_op2,W
000864 5C??           01250         subwf   cue_op1,W
000866 6EE7           01251         movwf   INDF1
000868 50??           01252         movf    cue_op3,W
00086A 14E7           01253         andwf   INDF1,W
00086C 6EE7           01254         movwf   INDF1                   ; save result
00086E 6E??           01255         movwf   cue_argvalue
000870 D???           01256         bra     PGA_OK
                      01257 
                      01258 ;+++++ Not done yet
000872                01259 PGA_OP_SUB_IND                          ; (op1-op2(op1)), do not save result
000872                01260 PGA_OP_SUB_IND_SAVE                     ; (op1-op2(op1)), save result in op1
000872                01261 PGA_OP_SUB_IND_AND                      ; (op1-op2(op1)), AND with op3, do not save
000872                01262 PGA_OP_SUB_IND_AND_SAVE                 ; (op1-op2(op1)), AND with op3, save in op1
000872 D???           01263         bra     PGA_OK
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01264 
000874                01265 PGA_OP_RAND                             ; pseudo-random#, op1=seed, update seed
000874 EC?? F???      01266         call    RAND
000878 6EE7           01267         movwf   INDF1
00087A 6E??           01268         movwf   cue_argvalue
00087C D???           01269         bra     PGA_OK
                      01270         
00087E                01271 PGA_OP_RAND_RANGE                       ; pseudo-random# [op2=max, op3=min], op1=seed
00087E EC?? F???      01272         call    RAND
000882 6EE7           01273         movwf   INDF1                   ; reset seed to new value
000884 6E??           01274         movwf   cue_op1                 ; working register
                      01275 
000886 50??           01276         movf    cue_op3,W               ; get minumum
000888 5C??           01277         subwf   cue_op2,W               ; get difference between min and max (range)
00088A 02??           01278         mulwf   cue_op1                 ; multiply rand * range
00088C 50F4           01279         movf    PRODH,W                 ; get hi byte of product
00088E 24??           01280         addwf   cue_op3,W               ; offset by minimum
000890 6E??           01281         movwf   cue_argvalue            ; return this value
000892 D???           01282         bra     PGA_OK
                      01283 
000894 C??? FFE2      01284 PGA_OK  movff   cue_fsr1_temp_hi,FSR1H  ; restore FSR1
000898 C??? FFE1      01285         movff   cue_fsr1_temp_lo,FSR1L
00089C 84D8           01286         bsf     STATUS,Z                ; set status to OK
00089E 0012           01287         return
                      01288 
                      01289 
                      01290 ;---- CUE_SET_ARG_ADDR ----
                      01291 ; Helper function to set the argument table address
                      01292 ; - takes argnum in W
                      01293 ; - returns FSR1 pointer to opcode byte in arg_table
                      01294 ; - assumes arg_table is on a page boundary
                      01295  
0008A0                01296 CUE_SET_ARG_ADDR
0008A0 6EE1           01297         movwf   FSR1L                   ; argument number...
0008A2 46E1           01298         rlncf   FSR1L,F                 ; ...x2...
0008A4 46E1           01299         rlncf   FSR1L,F                 ; ...x4
0008A6 0E??           01300         movlw   HIGH arg_table
0008A8 6EE2           01301         movwf   FSR1H
0008AA 0012           01302         return
                      01303 
                      01304 ;---- CUE_SET_ARG_ADDR2 ----
                      01305 ; same as above, but sets FSR2
                      01306 
0008AC                01307 CUE_SET_ARG_ADDR2
0008AC 6ED9           01308         movwf   FSR2L                   ; argument number...
0008AE 46D9           01309         rlncf   FSR2L,F                 ; ...x2...
0008B0 46D9           01310         rlncf   FSR2L,F                 ; ...x4
0008B2 0E??           01311         movlw   HIGH arg_table
0008B4 6EDA           01312         movwf   FSR2H
0008B6 0012           01313         return
                      01314 
                      01315 ;---- CUE_CHECK_ARGNUM ----
                      01316 ; Helper function to check for a valid argnum
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01317 ; - takes argnum in W (destroys W)
                      01318 ; - returns Z = 1 if OK
                      01319 ; - returns Z = 0 if ERROR
                      01320  
0008B8                01321 CUE_CHECK_ARGNUM
0008B8 0800           01322         sublw   ARG_NUM_MAX
0008BA 84D8           01323         bsf     STATUS,Z
0008BC E2??           01324         bc      PCAx
0008BE 94D8           01325         bcf     STATUS,Z
0008C0 0C03           01326 PCAx    retlw   ERR_BAD_ARGNUM          ; meaningful only if argnum fails
                      01327 
                      01328 ;---- CUE_CHECK_OPCODE ----
                      01329 ; Helper function to check for a valid opcode
                      01330 ; - takes argnum in W (destroys W)
                      01331 ; - returns Z = 1 if OK
                      01332 ; - returns Z = 0 if ERROR
                      01333  
0008C2                01334 CUE_CHECK_OPCODE
0008C2 081A           01335         sublw   OP_OPCODE_MAX
0008C4 84D8           01336         bsf     STATUS,Z
0008C6 E2??           01337         bc      PCOx
0008C8 94D8           01338         bcf     STATUS,Z
0008CA 0C04           01339 PCOx    retlw   ERR_BAD_OPCODE          ; meaningful only if opcode fails
                      01340 
                      01341 ;----- 8 bit pseudo random number generator - LFSR style -----
                      01342 ; The 'random' register (op1) must be seeded with a non-zero value
                      01343 ; Returns new randon # in W
                      01344 ; Will never return to zero
                      01345 ; Reference: http://www.piclist.com/techref/microchip/rand8bit.htm, LFSR example
                      01346 
0008CC 44??           01347 RAND    rlncf   cue_op1,W       ; seed must be non-zero... test for this
0008CE E1??           01348         bnz     RAND1
0008D0 0E01           01349         movlw   0x01            ; artificially set seed to 1
0008D2 B8??           01350 RAND1   btfsc   cue_op1,4
0008D4 0A01           01351         xorlw   1
0008D6 BA??           01352         btfsc   cue_op1,5
0008D8 0A01           01353         xorlw   1
0008DA B6??           01354         btfsc   cue_op1,3
0008DC 0A01           01355         xorlw   1
0008DE 0012           01356         return
                      01357 
                      01358 ;Alternate Random routine from Robert LaBudde and Nikolai Golovchenko
                      01359 ; Rnew = Rold * 221 + 53
                      01360 ; 221 = 256 - 32 - 4 + 1
                      01361 ; 256 can be eliminated so we need to calculate 
                      01362 ; Rnew = Rold * (1 - 32 - 4) + 53 
                      01363 ; using truncating arithmetic or Rnew = Rold * (-32 - 3) + 53
                      01364 ;       clrc
                      01365 ;       rlf     Number, 1       ; needs conversion for PIC16
                      01366 ;       swapf   Number, 0
                      01367 ;       andlw   0xE0
                      01368 ;       rrf     Number, 1
                      01369 ;       addwf   Number, 0
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01370 ;       addwf   Number, 0
                      01371 ;       addwf   Number, 0
                      01372 ;       sublw   0x35
                      01373 ;       movwf   Number
                      01374 
                      01375 ;*****************************************************************************
                      01376 ;***** UNIT TESTS ************************************************************
                      01377 ;*****************************************************************************
                      01378 
0008E0                01379 UT_PLAY
                      01380     if UNITS_ENABLED
                      01381 ;       call    UT_CUE_SET_ARGUMENT     ; test setting all argument types
                      01382 ;       call    UT_CUE_GET_ARGUMENT     ; test getting all argument types
                      01383 ;       call    UT_CUE_GET_COMMAND      ; test getting commands
                      01384 ;       call    UT_CUE_GET_NEXT         ; test loading commands
                      01385 ;       call    UT_CUE_LOAD_CUE         ; test loading a cue
0008E0 EC?? F???      01386         call    UT_CUE_RUN_CUE          ; run a cue from CUE_NUMBER_TABLE
                      01387 ;       call    UT_WALK_PLAYLIST        ; walk playlist to test pointer routines
                      01388     endif
0008E4 0012           01389         return                          ; always have a return here for safety
                      01390 
                      01391     if UNITS_ENABLED
                      01392 
                      01393 ;--- test running a cue from the CUE_NUMBER_TABLE
                      01394 
0008E6                01395 UT_CUE_RUN_CUE
0008E6 6A??           01396         clrf    cue_num_hi
0008E8 0E01           01397         movlw   0x01
0008EA 6E??           01398         movwf   cue_num_lo
0008EC EC?? F???      01399         call    CUE_RUN_CUE
0008F0 0012           01400         return
                      01401 
                      01402 
                      01403 ;--- test Walk Playlist - pointer navigation routines ----
                      01404 
0008F2                01405 UT_WALK_PLAYLIST
0008F2 EC?? F???      01406         call    PLAY_INIT               ; init and load first cue
0008F6 EC?? F???      01407         call    PLAY_GET_NEXT_PLAYLIST
0008FA EC?? F???      01408         call    PLAY_GET_NEXT_PLAYLIST
0008FE EC?? F???      01409         call    PLAY_GET_PREV_PLAYLIST
000902 EC?? F???      01410         call    PLAY_GET_PREV_PLAYLIST
000906 EC?? F???      01411         call    PLAY_GET_PREV_PLAYLIST
00090A EC?? F???      01412         call    PLAY_RUN_NEXT_CUE       ; load next cue
00090E 0012           01413         return
                      01414 
                      01415 ;--- test CUE_LOAD_CUE ----
                      01416 
                      01417 ut_plp  macro   ADDRESS
                      01418         movlw   HIGH ADDRESS
                      01419         movwf   cue_ptr_hi
                      01420         movlw   LOW ADDRESS
                      01421         movwf   cue_ptr_lo
                      01422         call    CUE_LOAD_CUE
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01423         endm
000910                01424 UT_CUE_LOAD_CUE
                      01425         ut_plp  UT_TEST2
000910 0E??               M         movlw   HIGH UT_TEST2
000912 6E??               M         movwf   cue_ptr_hi
000914 0E??               M         movlw   LOW UT_TEST2
000916 6E??               M         movwf   cue_ptr_lo
000918 EC?? F???          M         call    CUE_LOAD_CUE
00091C 0012           01426         return
                      01427 
                      01428 ;--- test SET_ARGUMENT ----
                      01429 
                      01430 ut_psa  macro   ADDRESS
                      01431         movlw   HIGH ADDRESS
                      01432         movwf   TBLPTRH
                      01433         movlw   LOW ADDRESS
                      01434         movwf   TBLPTRL
                      01435         tblrd+*                         ; increment past CUE_ARG
                      01436         call    CUE_SET_ARGUMENT
                      01437         endm
00091E                01438 UT_CUE_SET_ARGUMENT                     ; set one of each type of argument
                      01439         ut_psa  UPSA_00
00091E 0E??               M         movlw   HIGH UPSA_00
000920 6EF7               M         movwf   TBLPTRH
000922 0E??               M         movlw   LOW UPSA_00
000924 6EF6               M         movwf   TBLPTRL
000926 000B               M         tblrd+*                         ; increment past CUE_ARG
000928 EC?? F???          M         call    CUE_SET_ARGUMENT
                      01440         ut_psa  UPSA_01
00092C 0E??               M         movlw   HIGH UPSA_01
00092E 6EF7               M         movwf   TBLPTRH
000930 0E??               M         movlw   LOW UPSA_01
000932 6EF6               M         movwf   TBLPTRL
000934 000B               M         tblrd+*                         ; increment past CUE_ARG
000936 EC?? F???          M         call    CUE_SET_ARGUMENT
                      01441         ut_psa  UPSA_02
00093A 0E??               M         movlw   HIGH UPSA_02
00093C 6EF7               M         movwf   TBLPTRH
00093E 0E??               M         movlw   LOW UPSA_02
000940 6EF6               M         movwf   TBLPTRL
000942 000B               M         tblrd+*                         ; increment past CUE_ARG
000944 EC?? F???          M         call    CUE_SET_ARGUMENT
                      01442         ut_psa  UPSA_03
000948 0E??               M         movlw   HIGH UPSA_03
00094A 6EF7               M         movwf   TBLPTRH
00094C 0E??               M         movlw   LOW UPSA_03
00094E 6EF6               M         movwf   TBLPTRL
000950 000B               M         tblrd+*                         ; increment past CUE_ARG
000952 EC?? F???          M         call    CUE_SET_ARGUMENT
                      01443         ut_psa  UPSA_04
000956 0E??               M         movlw   HIGH UPSA_04
000958 6EF7               M         movwf   TBLPTRH
00095A 0E??               M         movlw   LOW UPSA_04
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00095C 6EF6               M         movwf   TBLPTRL
00095E 000B               M         tblrd+*                         ; increment past CUE_ARG
000960 EC?? F???          M         call    CUE_SET_ARGUMENT
                      01444         ut_psa  UPSA_05
000964 0E??               M         movlw   HIGH UPSA_05
000966 6EF7               M         movwf   TBLPTRH
000968 0E??               M         movlw   LOW UPSA_05
00096A 6EF6               M         movwf   TBLPTRL
00096C 000B               M         tblrd+*                         ; increment past CUE_ARG
00096E EC?? F???          M         call    CUE_SET_ARGUMENT
                      01445         ut_psa  UPSA_05
000972 0E??               M         movlw   HIGH UPSA_05
000974 6EF7               M         movwf   TBLPTRH
000976 0E??               M         movlw   LOW UPSA_05
000978 6EF6               M         movwf   TBLPTRL
00097A 000B               M         tblrd+*                         ; increment past CUE_ARG
00097C EC?? F???          M         call    CUE_SET_ARGUMENT
                      01446         ut_psa  UPSA_06
000980 0E??               M         movlw   HIGH UPSA_06
000982 6EF7               M         movwf   TBLPTRH
000984 0E??               M         movlw   LOW UPSA_06
000986 6EF6               M         movwf   TBLPTRL
000988 000B               M         tblrd+*                         ; increment past CUE_ARG
00098A EC?? F???          M         call    CUE_SET_ARGUMENT
                      01447         ut_psa  UPSA_07
00098E 0E??               M         movlw   HIGH UPSA_07
000990 6EF7               M         movwf   TBLPTRH
000992 0E??               M         movlw   LOW UPSA_07
000994 6EF6               M         movwf   TBLPTRL
000996 000B               M         tblrd+*                         ; increment past CUE_ARG
000998 EC?? F???          M         call    CUE_SET_ARGUMENT
                      01448         ut_psa  UPSA_08
00099C 0E??               M         movlw   HIGH UPSA_08
00099E 6EF7               M         movwf   TBLPTRH
0009A0 0E??               M         movlw   LOW UPSA_08
0009A2 6EF6               M         movwf   TBLPTRL
0009A4 000B               M         tblrd+*                         ; increment past CUE_ARG
0009A6 EC?? F???          M         call    CUE_SET_ARGUMENT
                      01449         ut_psa  UPSA_09
0009AA 0E??               M         movlw   HIGH UPSA_09
0009AC 6EF7               M         movwf   TBLPTRH
0009AE 0E??               M         movlw   LOW UPSA_09
0009B0 6EF6               M         movwf   TBLPTRL
0009B2 000B               M         tblrd+*                         ; increment past CUE_ARG
0009B4 EC?? F???          M         call    CUE_SET_ARGUMENT
                      01450         ut_psa  UPSA_10
0009B8 0E??               M         movlw   HIGH UPSA_10
0009BA 6EF7               M         movwf   TBLPTRH
0009BC 0E??               M         movlw   LOW UPSA_10
0009BE 6EF6               M         movwf   TBLPTRL
0009C0 000B               M         tblrd+*                         ; increment past CUE_ARG
0009C2 EC?? F???          M         call    CUE_SET_ARGUMENT
                      01451         ut_psa  UPSA_11
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0009C6 0E??               M         movlw   HIGH UPSA_11
0009C8 6EF7               M         movwf   TBLPTRH
0009CA 0E??               M         movlw   LOW UPSA_11
0009CC 6EF6               M         movwf   TBLPTRL
0009CE 000B               M         tblrd+*                         ; increment past CUE_ARG
0009D0 EC?? F???          M         call    CUE_SET_ARGUMENT
                      01452         ut_psa  UPSA_12
0009D4 0E??               M         movlw   HIGH UPSA_12
0009D6 6EF7               M         movwf   TBLPTRH
0009D8 0E??               M         movlw   LOW UPSA_12
0009DA 6EF6               M         movwf   TBLPTRL
0009DC 000B               M         tblrd+*                         ; increment past CUE_ARG
0009DE EC?? F???          M         call    CUE_SET_ARGUMENT
                      01453         ut_psa  UPSA_13
0009E2 0E??               M         movlw   HIGH UPSA_13
0009E4 6EF7               M         movwf   TBLPTRH
0009E6 0E??               M         movlw   LOW UPSA_13
0009E8 6EF6               M         movwf   TBLPTRL
0009EA 000B               M         tblrd+*                         ; increment past CUE_ARG
0009EC EC?? F???          M         call    CUE_SET_ARGUMENT
                      01454         ut_psa  UPSA_14
0009F0 0E??               M         movlw   HIGH UPSA_14
0009F2 6EF7               M         movwf   TBLPTRH
0009F4 0E??               M         movlw   LOW UPSA_14
0009F6 6EF6               M         movwf   TBLPTRL
0009F8 000B               M         tblrd+*                         ; increment past CUE_ARG
0009FA EC?? F???          M         call    CUE_SET_ARGUMENT
                      01455         ut_psa  UPSA_15
0009FE 0E??               M         movlw   HIGH UPSA_15
000A00 6EF7               M         movwf   TBLPTRH
000A02 0E??               M         movlw   LOW UPSA_15
000A04 6EF6               M         movwf   TBLPTRL
000A06 000B               M         tblrd+*                         ; increment past CUE_ARG
000A08 EC?? F???          M         call    CUE_SET_ARGUMENT
                      01456         ut_psa  UPSA_16
000A0C 0E??               M         movlw   HIGH UPSA_16
000A0E 6EF7               M         movwf   TBLPTRH
000A10 0E??               M         movlw   LOW UPSA_16
000A12 6EF6               M         movwf   TBLPTRL
000A14 000B               M         tblrd+*                         ; increment past CUE_ARG
000A16 EC?? F???          M         call    CUE_SET_ARGUMENT
                      01457         ut_psa  UPSA_17
000A1A 0E??               M         movlw   HIGH UPSA_17
000A1C 6EF7               M         movwf   TBLPTRH
000A1E 0E??               M         movlw   LOW UPSA_17
000A20 6EF6               M         movwf   TBLPTRL
000A22 000B               M         tblrd+*                         ; increment past CUE_ARG
000A24 EC?? F???          M         call    CUE_SET_ARGUMENT
                      01458         ut_psa  UPSA_18
000A28 0E??               M         movlw   HIGH UPSA_18
000A2A 6EF7               M         movwf   TBLPTRH
000A2C 0E??               M         movlw   LOW UPSA_18
000A2E 6EF6               M         movwf   TBLPTRL
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000A30 000B               M         tblrd+*                         ; increment past CUE_ARG
000A32 EC?? F???          M         call    CUE_SET_ARGUMENT
                      01459         ut_psa  UPSA_19
000A36 0E??               M         movlw   HIGH UPSA_19
000A38 6EF7               M         movwf   TBLPTRH
000A3A 0E??               M         movlw   LOW UPSA_19
000A3C 6EF6               M         movwf   TBLPTRL
000A3E 000B               M         tblrd+*                         ; increment past CUE_ARG
000A40 EC?? F???          M         call    CUE_SET_ARGUMENT
                      01460         ut_psa  UPSA_20
000A44 0E??               M         movlw   HIGH UPSA_20
000A46 6EF7               M         movwf   TBLPTRH
000A48 0E??               M         movlw   LOW UPSA_20
000A4A 6EF6               M         movwf   TBLPTRL
000A4C 000B               M         tblrd+*                         ; increment past CUE_ARG
000A4E EC?? F???          M         call    CUE_SET_ARGUMENT
                      01461         ut_psa  UPSA_21
000A52 0E??               M         movlw   HIGH UPSA_21
000A54 6EF7               M         movwf   TBLPTRH
000A56 0E??               M         movlw   LOW UPSA_21
000A58 6EF6               M         movwf   TBLPTRL
000A5A 000B               M         tblrd+*                         ; increment past CUE_ARG
000A5C EC?? F???          M         call    CUE_SET_ARGUMENT
                      01462         ut_psa  UPSA_22
000A60 0E??               M         movlw   HIGH UPSA_22
000A62 6EF7               M         movwf   TBLPTRH
000A64 0E??               M         movlw   LOW UPSA_22
000A66 6EF6               M         movwf   TBLPTRL
000A68 000B               M         tblrd+*                         ; increment past CUE_ARG
000A6A EC?? F???          M         call    CUE_SET_ARGUMENT
                      01463         ut_psa  UPSA_23
000A6E 0E??               M         movlw   HIGH UPSA_23
000A70 6EF7               M         movwf   TBLPTRH
000A72 0E??               M         movlw   LOW UPSA_23
000A74 6EF6               M         movwf   TBLPTRL
000A76 000B               M         tblrd+*                         ; increment past CUE_ARG
000A78 EC?? F???          M         call    CUE_SET_ARGUMENT
                      01464         ut_psa  UPSA_24
000A7C 0E??               M         movlw   HIGH UPSA_24
000A7E 6EF7               M         movwf   TBLPTRH
000A80 0E??               M         movlw   LOW UPSA_24
000A82 6EF6               M         movwf   TBLPTRL
000A84 000B               M         tblrd+*                         ; increment past CUE_ARG
000A86 EC?? F???          M         call    CUE_SET_ARGUMENT
                      01465         ut_psa  UPSA_25
000A8A 0E??               M         movlw   HIGH UPSA_25
000A8C 6EF7               M         movwf   TBLPTRH
000A8E 0E??               M         movlw   LOW UPSA_25
000A90 6EF6               M         movwf   TBLPTRL
000A92 000B               M         tblrd+*                         ; increment past CUE_ARG
000A94 EC?? F???          M         call    CUE_SET_ARGUMENT
                      01466         ut_psa  UPSA_26
000A98 0E??               M         movlw   HIGH UPSA_26
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000A9A 6EF7               M         movwf   TBLPTRH
000A9C 0E??               M         movlw   LOW UPSA_26
000A9E 6EF6               M         movwf   TBLPTRL
000AA0 000B               M         tblrd+*                         ; increment past CUE_ARG
000AA2 EC?? F???          M         call    CUE_SET_ARGUMENT
000AA6 0012           01467         return
                      01468 
                      01469 ;--- test GET_ARGUMENT ----
                      01470 
                      01471 ut_pga  macro   ARGNUM, REPEAT          ; set REPEAT to non-zero to loop forever
                      01472         local   restart
                      01473 restart movlw   ARGNUM
                      01474         movwf   cue_argvalue
                      01475         call    CUE_GET_ARGUMENT
                      01476     if REPEAT
                      01477         bra     restart
                      01478     endif
                      01479         endm
000AA8                01480 UT_CUE_GET_ARGUMENT
                      01481         ut_pga  .00,0                   ; OP_LIT        
  0000                    M         local   restart
000AA8 0E00               M restart movlw   .00
000AAA 6E??               M         movwf   cue_argvalue
000AAC EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01482         ut_pga  .01,0                   ; OP_INC
  0000                    M         local   restart
000AB0 0E01               M restart movlw   .01
000AB2 6E??               M         movwf   cue_argvalue
000AB4 EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01483         ut_pga  .02,1                   ; OP_INC_RANGE
  0000                    M         local   restart
000AB8 0E02               M restart movlw   .02
000ABA 6E??               M         movwf   cue_argvalue
000ABC EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 1
000AC0 D???               M         bra     restart
                          M     endif
                      01484         ut_pga  .03,0                   ; OP_INCX2_RANGE        
  0000                    M         local   restart
000AC2 0E03               M restart movlw   .03
000AC4 6E??               M         movwf   cue_argvalue
000AC6 EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01485         ut_pga  .04,0                   ; OP_INCX3_RANGE
  0000                    M         local   restart
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000ACA 0E04               M restart movlw   .04
000ACC 6E??               M         movwf   cue_argvalue
000ACE EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01486         ut_pga  .05,0                   ; OP_INCX4_RANGE
  0000                    M         local   restart
000AD2 0E05               M restart movlw   .05
000AD4 6E??               M         movwf   cue_argvalue
000AD6 EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01487         ut_pga  .06,0                   ; OP_DEC
  0000                    M         local   restart
000ADA 0E06               M restart movlw   .06
000ADC 6E??               M         movwf   cue_argvalue
000ADE EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01488         ut_pga  .07,0                   ; OP_DEC_RANGE
  0000                    M         local   restart
000AE2 0E07               M restart movlw   .07
000AE4 6E??               M         movwf   cue_argvalue
000AE6 EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01489         ut_pga  .08,0                   ; OP_DECX2_RANGE
  0000                    M         local   restart
000AEA 0E08               M restart movlw   .08
000AEC 6E??               M         movwf   cue_argvalue
000AEE EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01490         ut_pga  .09,0                   ; OP_DECX3_RANGE
  0000                    M         local   restart
000AF2 0E09               M restart movlw   .09
000AF4 6E??               M         movwf   cue_argvalue
000AF6 EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01491         ut_pga  .10,0                   ; OP_DECX4_RANGE
  0000                    M         local   restart
000AFA 0E0A               M restart movlw   .10
000AFC 6E??               M         movwf   cue_argvalue
000AFE EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M     endif
                      01492         ut_pga  .11,0                   ; OP_ADD
  0000                    M         local   restart
000B02 0E0B               M restart movlw   .11
000B04 6E??               M         movwf   cue_argvalue
000B06 EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01493         ut_pga  .12,0                   ; OP_ADD_AND
  0000                    M         local   restart
000B0A 0E0C               M restart movlw   .12
000B0C 6E??               M         movwf   cue_argvalue
000B0E EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01494         ut_pga  .13,0                   ; OP_ADD_AND_SAVE
  0000                    M         local   restart
000B12 0E0D               M restart movlw   .13
000B14 6E??               M         movwf   cue_argvalue
000B16 EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01495         ut_pga  .14,0                   ; OP_ADD_IND
  0000                    M         local   restart
000B1A 0E0E               M restart movlw   .14
000B1C 6E??               M         movwf   cue_argvalue
000B1E EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01496         ut_pga  .15,0                   ; OP_ADD_IND_SAVE
  0000                    M         local   restart
000B22 0E0F               M restart movlw   .15
000B24 6E??               M         movwf   cue_argvalue
000B26 EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01497         ut_pga  .16,0                   ; OP_ADD_IND_AND
  0000                    M         local   restart
000B2A 0E10               M restart movlw   .16
000B2C 6E??               M         movwf   cue_argvalue
000B2E EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01498         ut_pga  .17,0                   ; OP_ADD_IND_AND_SAVE
  0000                    M         local   restart
000B32 0E11               M restart movlw   .17
000B34 6E??               M         movwf   cue_argvalue
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000B36 EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01499         ut_pga  .18,0                   ; OP_SUB
  0000                    M         local   restart
000B3A 0E12               M restart movlw   .18
000B3C 6E??               M         movwf   cue_argvalue
000B3E EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01500         ut_pga  .19,0                   ; OP_SUB_AND
  0000                    M         local   restart
000B42 0E13               M restart movlw   .19
000B44 6E??               M         movwf   cue_argvalue
000B46 EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01501         ut_pga  .20,0                   ; OP_SUB_AND_SAVE
  0000                    M         local   restart
000B4A 0E14               M restart movlw   .20
000B4C 6E??               M         movwf   cue_argvalue
000B4E EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01502         ut_pga  .21,0                   ; OP_SUB_IND
  0000                    M         local   restart
000B52 0E15               M restart movlw   .21
000B54 6E??               M         movwf   cue_argvalue
000B56 EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01503         ut_pga  .22,0                   ; OP_SUB_IND_SAVE
  0000                    M         local   restart
000B5A 0E16               M restart movlw   .22
000B5C 6E??               M         movwf   cue_argvalue
000B5E EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01504         ut_pga  .23,0                   ; OP_SUB_IND_AND
  0000                    M         local   restart
000B62 0E17               M restart movlw   .23
000B64 6E??               M         movwf   cue_argvalue
000B66 EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01505         ut_pga  .24,0                   ; OP_SUB_IND_AND_SAVE
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                    M         local   restart
000B6A 0E18               M restart movlw   .24
000B6C 6E??               M         movwf   cue_argvalue
000B6E EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01506         ut_pga  .25,0                   ; OP_RAND
  0000                    M         local   restart
000B72 0E19               M restart movlw   .25
000B74 6E??               M         movwf   cue_argvalue
000B76 EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
                      01507         ut_pga  .26,0                   ; OP_RAND_RANGE
  0000                    M         local   restart
000B7A 0E1A               M restart movlw   .26
000B7C 6E??               M         movwf   cue_argvalue
000B7E EC?? F???          M         call    CUE_GET_ARGUMENT
                          M     if 0
                          M         bra     restart
                          M     endif
000B82 0012           01508         return
                      01509 
                      01510 ;--- test CUE_GET_COMMAND ----
                      01511 
                      01512 ut_getc macro   ADDRESS
                      01513         movlw   HIGH ADDRESS
                      01514         movwf   TBLPTRH
                      01515         movlw   LOW ADDRESS
                      01516         movwf   TBLPTRL
                      01517         tblrd+*                         ; skip the CUE_CMD table entry
                      01518         call    CUE_GET_COMMAND
                      01519         endm
                      01520 
000B84                01521 UT_CUE_GET_COMMMAND
                      01522 ;       ut_getc UPGC_00
                      01523 ;       ut_getc UPGC_01
                      01524 ;       ut_getc UPGC_02
                      01525 ;       ut_getc UPGC_03
                      01526 ;       ut_getc UPGC_04
                      01527         ut_getc UPGC_05
000B84 0E??               M         movlw   HIGH UPGC_05
000B86 6EF7               M         movwf   TBLPTRH
000B88 0E??               M         movlw   LOW UPGC_05
000B8A 6EF6               M         movwf   TBLPTRL
000B8C 000B               M         tblrd+*                         ; skip the CUE_CMD table entry
000B8E EC?? F???          M         call    CUE_GET_COMMAND
000B92 0012           01528         return
                      01529     endif
                      01530 
                      01531 ;--- test CUE_GET_NEXT_CMD ----
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01532 
                      01533 ut_lodc macro   ADDRESS
                      01534         movlw   HIGH ADDRESS
                      01535         movwf   TBLPTRH
                      01536         movlw   LOW ADDRESS
                      01537         movwf   TBLPTRL
                      01538         call    CUE_GET_NEXT_COMMAND
                      01539         endm
                      01540 
000B94                01541 UT_CUE_GET_NEXT
                      01542         ut_lodc UT_TEST1
000B94 0E??               M         movlw   HIGH UT_TEST1
000B96 6EF7               M         movwf   TBLPTRH
000B98 0E??               M         movlw   LOW UT_TEST1
000B9A 6EF6               M         movwf   TBLPTRL
000B9C EC?? F???          M         call    CUE_GET_NEXT_COMMAND
                      01543 ;       ut_lodc UPGC_00
                      01544 ;       ut_lodc UPGC_01
                      01545 ;       ut_lodc UPGC_02
                      01546 ;       ut_lodc UPGC_03
                      01547 ;       ut_lodc UPGC_04
                      01548 ;       ut_lodc UPGC_05
000BA0 0012           01549         return
                      01550 
                      01551 ;###########################################
                      01552 ;##### BEGIN DATA TABLES CODE SECTION ######
                      01553 ;###########################################
                      01554 
                      01555 ; Use code_pack of things can get out of alignment due to zero padding
                      01556 
                      01557 DATA_LED_CUE_TABLES     code_pack
                      01558 
                      01559 ;---- Data used by unit tests
                      01560 
                      01561     if UNITS_ENABLED
                      01562 ;               CUE_ARG,argnum,opcode, var1, [var2], [var3]
000000 02 00 00 AA    01563 UPSA_00 db      CUE_ARG, .00, OP_LIT, 0xAA
000004 02 01 01 02    01564 UPSA_01 db      CUE_ARG, .01, OP_INC, 0x02
000008 02 02 02 01 04 01565 UPSA_02 db      CUE_ARG, .02, OP_INC_RANGE, 0x01, 0x04, 0x00
       00 
00000E 02 03 03 01 06 01566 UPSA_03 db      CUE_ARG, .03, OP_INCX2_RANGE, 0x01, 0x06, 0x00
       00 
000014 02 04 04 01 06 01567 UPSA_04 db      CUE_ARG, .04, OP_INCX3_RANGE, 0x01, 0x06, 0x00
       00 
00001A 02 05 05 01 07 01568 UPSA_05 db      CUE_ARG, .05, OP_INCX4_RANGE, 0x01, 0x07, 0x00
       00 
000020 02 06 06 02    01569 UPSA_06 db      CUE_ARG, .06, OP_DEC, 0x02
000024 02 07 07 01 08 01570 UPSA_07 db      CUE_ARG, .07, OP_DEC_RANGE, 0x01, 0x08, 0x04
       04 
00002A 02 08 08 01 08 01571 UPSA_08 db      CUE_ARG, .08, OP_DECX2_RANGE, 0x01, 0x08, 0x00
       00 
000030 02 09 09 01 10 01572 UPSA_09 db      CUE_ARG, .09, OP_DECX3_RANGE, 0x01, 0x10, 0x00
       00 
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000036 02 0A 0A 01 10 01573 UPSA_10 db      CUE_ARG, .10, OP_DECX4_RANGE, 0x01, 0x10, 0x00
       00 
00003C 02 0B 0B 02 07 01574 UPSA_11 db      CUE_ARG, .11, OP_ADD, 0x02, 0x07
000041 02 0C 0C 02 07 01575 UPSA_12 db      CUE_ARG, .12, OP_ADD_AND, 0x02, 0x07, 0x1F
       1F 
000047 02 0D 0D 02 07 01576 UPSA_13 db      CUE_ARG, .13, OP_ADD_AND_SAVE, 0x02, 0x07, 0x1F
       1F 
00004D 02 0E 0E 02 00 01577 UPSA_14 db      CUE_ARG, .14, OP_ADD_IND, 0x02, 0x00, 0x00
       00 
000053 02 0F 0F 02 00 01578 UPSA_15 db      CUE_ARG, .15, OP_ADD_IND_SAVE, 0x02, 0x00, 0x00
       00 
000059 02 10 10 02 00 01579 UPSA_16 db      CUE_ARG, .16, OP_ADD_IND_AND, 0x02, 0x00, 0x00
       00 
00005F 02 11 11 02 00 01580 UPSA_17 db      CUE_ARG, .17, OP_ADD_IND_AND_SAVE, 0x02, 0x00, 0x00
       00 
000065 02 12 12 02 01 01581 UPSA_18 db      CUE_ARG, .18, OP_SUB, 0x02, 0x01
00006A 02 13 13 02 01 01582 UPSA_19 db      CUE_ARG, .19, OP_SUB_AND, 0x02, 0x01, 0x07
       07 
000070 02 14 14 02 01 01583 UPSA_20 db      CUE_ARG, .20, OP_SUB_AND_SAVE, 0x02, 0x01, 0x07
       07 
000076 02 15 15 02 00 01584 UPSA_21 db      CUE_ARG, .21, OP_SUB_IND, 0x02, 0x00, 0x00
       00 
00007C 02 16 16 02 00 01585 UPSA_22 db      CUE_ARG, .22, OP_SUB_IND_SAVE, 0x02, 0x00, 0x00
       00 
000082 02 17 17 02 00 01586 UPSA_23 db      CUE_ARG, .23, OP_SUB_IND_AND, 0x02, 0x00, 0x00
       00 
000088 02 18 18 02 00 01587 UPSA_24 db      CUE_ARG, .24, OP_SUB_IND_AND_SAVE, 0x02, 0x00, 0x00
       00 
00008E 02 19 19 CB    01588 UPSA_25 db      CUE_ARG, .25, OP_RAND, 0xCB
000092 02 1A 1A CB 88 01589 UPSA_26 db      CUE_ARG, .26, OP_RAND_RANGE, 0xCB, 0x88, 0x78
       78 
                      01590 
                      01591 ;               CUE_CMD,cmd,argmask,ckt,prescale,delay,up,on,down,off,[rpt,min,max,xfade]
000098 01 56 0F 17 01 01592 UPGC_00 db      CUE_CMD,FADE,0x0F, .23, 1,2,3,4,5,6
       02 03 04 05 06 
0000A2 01 57 0F 23 01 01593 UPGC_01 db      CUE_CMD,FADE_REPEAT,0x0F, 23, 1,2,3,4,5,6,7
       02 03 04 05 06 
       07 
0000AD 01 58 00 0F 23 01594 UPGC_02 db      CUE_CMD,FADE_MIN,0x00,0x0F, 23, 1,2,3,4,5,6,7,8
       01 02 03 04 05 
       06 07 08 
0000BA 01 5A 00 0F 23 01595 UPGC_03 db      CUE_CMD,FADE_X,0x00,0x0F, 23, 1,2,3,4,5,6,7,8,9,.10
       01 02 03 04 05 
       06 07 08 09 0A 
0000C9 01 56 0F 23 01 01596 UPGC_04 db      CUE_CMD,FADE,0x0F, 23, 1,2,3,4,5,6
       02 03 04 05 06 
0000D3 01 56 00 05 01 01597 UPGC_05 db      CUE_CMD,FADE,0x00, .5, 1,0,0xFF,0xFF,0xFF,0xFF
       00 FF FF FF FF 
                      01598 
0000DD                01599 UT_TEST1
0000DD 02 04 05 00 FF 01600         db      CUE_ARG,4,OP_INCX4_RANGE,0,0xFF,0x00 ; arg0, increment by 1, starting at 0
       00 
                      01601 
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01602                 ;                         arg0
0000E3 01 56 01 04 01 01603         db      CUE_CMD,FADE,0x01, 4, 1,0,0xFF,0xFF,0xFF,0xFF
       00 FF FF FF FF 
0000ED 01 56 01 04 01 01604         db      CUE_CMD,FADE,0x01, 4, 1,0,0xFF,0xFF,0xFF,0xFF
       00 FF FF FF FF 
0000F7 01 56 01 04 01 01605         db      CUE_CMD,FADE,0x01, 4, 1,0,0xFF,0xFF,0xFF,0xFF
       00 FF FF FF FF 
000101 01 56 01 04 01 01606         db      CUE_CMD,FADE,0x01, 4, 1,0,0xFF,0xFF,0xFF,0xFF
       00 FF FF FF FF 
                      01607 
00010B 00             01608         db      CUE_DONE
                      01609 
00010C                01610 UT_TEST2
                      01611 ; SET_HSB       CUE_CMD SET_HSB  mask  chn  hue   sat   brt     
00010C 01 23 00 00 00 01612         db      CUE_CMD,SET_HSB, 0x00, .00, 0x00, 0x00, 0xFF
       00 FF 
000113 01 23 00 01 00 01613         db      CUE_CMD,SET_HSB, 0x00, .01, 0x00, 0x00, 0x80
       00 80 
00011A 01 23 00 02 00 01614         db      CUE_CMD,SET_HSB, 0x00, .02, 0x00, 0x00, 0x00
       00 00 
000121 01 23 00 03 00 01615         db      CUE_CMD,SET_HSB, 0x00, .03, 0x00, 0x00, 0x00
       00 00 
000128 01 23 00 04 00 01616         db      CUE_CMD,SET_HSB, 0x00, .04, 0x00, 0x00, 0x00
       00 00 
00012F 01 23 00 05 00 01617         db      CUE_CMD,SET_HSB, 0x00, .05, 0x00, 0x00, 0x00
       00 00 
000136 01 23 00 06 00 01618         db      CUE_CMD,SET_HSB, 0x00, .06, 0x00, 0x00, 0x00
       00 00 
00013D 01 23 00 07 00 01619         db      CUE_CMD,SET_HSB, 0x00, .07, 0x00, 0x00, 0x00
       00 00 
000144 01 23 00 08 00 01620         db      CUE_CMD,SET_HSB, 0x00, .08, 0x00, 0x00, 0x00
       00 00 
00014B 01 23 00 09 00 01621         db      CUE_CMD,SET_HSB, 0x00, .09, 0x00, 0x00, 0x00
       00 00 
000152 01 23 00 0A 00 01622         db      CUE_CMD,SET_HSB, 0x00, .10, 0x00, 0x00, 0x00
       00 00 
000159 01 23 00 0B 00 01623         db      CUE_CMD,SET_HSB, 0x00, .11, 0x00, 0x00, 0x00
       00 00 
000160 01 23 00 0C 00 01624         db      CUE_CMD,SET_HSB, 0x00, .12, 0x00, 0x00, 0x00
       00 00 
000167 01 23 00 0D 00 01625         db      CUE_CMD,SET_HSB, 0x00, .13, 0x00, 0x00, 0x00
       00 00 
00016E 01 23 00 0E 00 01626         db      CUE_CMD,SET_HSB, 0x00, .14, 0x00, 0x00, 0x00
       00 00 
000175 01 23 00 0F 00 01627         db      CUE_CMD,SET_HSB, 0x00, .15, 0x00, 0x00, 0x00
       00 00 
00017C 01 23 00 10 00 01628         db      CUE_CMD,SET_HSB, 0x00, .16, 0x00, 0x00, 0x00
       00 00 
000183 01 23 00 11 00 01629         db      CUE_CMD,SET_HSB, 0x00, .17, 0x00, 0x00, 0x00
       00 00 
00018A 01 23 00 12 00 01630         db      CUE_CMD,SET_HSB, 0x00, .18, 0x00, 0x00, 0x00
       00 00 
000191 01 23 00 13 00 01631         db      CUE_CMD,SET_HSB, 0x00, .19, 0x00, 0x00, 0x00
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       00 00 
000198 01 23 00 14 00 01632         db      CUE_CMD,SET_HSB, 0x00, .20, 0x00, 0x00, 0x00
       00 00 
00019F 01 23 00 15 00 01633         db      CUE_CMD,SET_HSB, 0x00, .21, 0x00, 0x00, 0x00
       00 00 
0001A6 01 23 00 16 00 01634         db      CUE_CMD,SET_HSB, 0x00, .22, 0x00, 0x00, 0x00
       00 00 
0001AD 01 23 00 17 00 01635         db      CUE_CMD,SET_HSB, 0x00, .23, 0x00, 0x00, 0x00
       00 00 
0001B4 01 23 00 18 00 01636         db      CUE_CMD,SET_HSB, 0x00, .24, 0x00, 0x00, 0x00
       00 00 
0001BB 01 23 00 19 00 01637         db      CUE_CMD,SET_HSB, 0x00, .25, 0x00, 0x00, 0x00
       00 00 
0001C2 01 60 00 FE    01638         db      CUE_CMD,WATCH,0x00,NEVER
0001C6 00             01639         db      CUE_DONE
                      01640 
                      01641     endif
                      01642 
                      01643 ;******************************************************************************
                      01644 ; PLAYLIST AND CUE DATA FILE
                      01645 
                      01646 #include <led_data.inc>
                      00001 ;*****************************************************************************
                      00002 ; PIC18F family - cues and playback data file
                      00003 ;*****************************************************************************
                      00004 ;
                      00005 ;    Filename:          eFruit_cue_data.inc
                      00006 ;    Author, Company:   Alden Hart, Luke's Lights
                      00007 ;    Chip Support:      Supports PIC18F family
                      00008 ;    Revision:          090711
                      00009 ;
                      00010 ; TABLE STRUCTURE:
                      00011 ;     PLAYLIST_MASTER_TABLE     List of playlists - one or more playlists
                      00012 ;                               Can be selected by:
                      00013 ;                                       PLAYLIST command (run numbered playlist) 
                      00014 ;                                       PLAY_NEXT_PLAYLIST (end of previous playlist)
                      00015 ;                                       PLAY_PREV_PLAYLIST
                      00016 ;
                      00017 ;     PLAYLIST_CUE_NUMBER_TABLE Set of numbered cues for calling from commands
                      00018 ;                               Can be selected by:
                      00019 ;                                       CUE command (run numbered cue) 
                      00020 ;
                      00021 ;     PLAYLIST_xxxxxx           Individual playlists - one or more cues each
                      00022 ;                               Advances by WATCH command, does LOOPING
                      00023 ;
                      00024 ;     CUE_xxxxxx                Individial cues - one or more commands each
                      00025 
                      00026 DATA_LED_DATA_TABLES    code    ; set to align on 16 bit word boundaries
                      00027 
                      00028 ;******************************************************************************
                      00029 ; PLAYLIST MASTER TABLE
                      00030 ; Points to one or more playlists. 
                      00031 
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000000 0000           00032         data    PLAYLIST_DONE   ; REQUIRED
000002                00033 PLAYLIST_MASTER_TABLE
000002 ????           00034         data    PLAYLIST_01     ; This will get executed on power-up reset
000004 ????           00035         data    PLAYLIST_02
000006 0000           00036         data    PLAYLIST_DONE   ; REQUIRED
                      00037 
                      00038 
                      00039 ;******************************************************************************
                      00040 ; CUE NUMBER TABLE
                      00041 ; A playlist containing cues that rae accessed by nuymber using the CUE command
                      00042 ; The first cue is #00 and is ALL OFF by convention
                      00043 
000008                00044 CUE_NUMBER_TABLE
000008 0000           00045         data    PLAYLIST_DONE   ; REQUIRED
                      00046 
                      00047 ;---- mapping to this table
  00000000            00048 _ALL_OFF        equ     .00
  00000001            00049 _ALL_ON         equ     .01
  00000002            00050 _ALL_OFF_XFADE  equ     .02
  00000003            00051 _ALL_ON_XFADE   equ     .03
                      00052 
                      00053 ;******************************************************************************
                      00054 ; PLAYLIST TABLES
                      00055 
00000A                00056 PLAYLIST_01
                      00057 ;       data    CUE_ALL_ON
00000A ????           00058         data    CUE_ALL_DIM
                      00059 ;       data    CUE_ALL_OFF
00000C 0000           00060         data    PLAYLIST_DONE   ; REQUIRED
                      00061 
00000E                00062 PLAYLIST_02
00000E ????           00063         data    CUE_ALL_OFF
000010 0000           00064         data    PLAYLIST_DONE   ; REQUIRED
                      00065 
                      00066 ;******************************************************************************
                      00067 ; Cue command line templates (very useful)
                      00068 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
                      00069 ; SET_HSB       CUE_CMD SET_HSB  mask  chn  hue     sat     brt         
                      00070 ; PATCH         CUE_CMD PATCH  mask slave_ckt master_ckt
                      00071 ; FADE          CUE_CMD FADE mask ckt_num pres wait up dwell down off   
                      00072 ; FADE_MAX      CUE_CMD FADE_MAX mask cktnum scal wait up  dwell down off  rpt  min  max 
                      00073 ; FADE_XFADE    CUE_CMD FADE_XFADE maskHmaskL cktnum scal wait up  dwell down off  rpt  min  max  xfade
                      00074 ; ARG op1       CUE_ARG arg# opcode             op1
                      00075 ; ARG op3       CUE_ARG arg# opcode             op1,    op2,    op3
                      00076 ;       db      CUE_ARG,        1,  OP_INCX3_RANGE,     0x00,   0xC0,   0x00
                      00077 
                      00078 ;****** wCLOCK APPLICATION SPECIFIC TABLES **********
                      00079 ; cues for 5 minute intervals, hours, and plus signs
                      00080 ; These tables are indexed directly by the clock display routines
                      00081 
000012                00082 CLK_MINUTES_MAP
000012 ????           00083         data    CUE_MINUTES_00
000014 ????           00084         data    CUE_MINUTES_05
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000016 ????           00085         data    CUE_MINUTES_10
000018 ????           00086         data    CUE_MINUTES_15
00001A ????           00087         data    CUE_MINUTES_20
00001C ????           00088         data    CUE_MINUTES_25
00001E ????           00089         data    CUE_MINUTES_30
000020 ????           00090         data    CUE_MINUTES_35
000022 ????           00091         data    CUE_MINUTES_40
000024 ????           00092         data    CUE_MINUTES_45
000026 ????           00093         data    CUE_MINUTES_50
000028 ????           00094         data    CUE_MINUTES_55
00002A ????           00095         data    CUE_PANIC               ; should never hit this one
                      00096 
00002C                00097 CLK_HOURS_MAP
00002C ????           00098         data    CUE_HOURS_OFF           ; 0=dummy. never should get hit
00002E ????           00099         data    CUE_HOURS_01
000030 ????           00100         data    CUE_HOURS_02
000032 ????           00101         data    CUE_HOURS_03
000034 ????           00102         data    CUE_HOURS_04
000036 ????           00103         data    CUE_HOURS_05
000038 ????           00104         data    CUE_HOURS_06
00003A ????           00105         data    CUE_HOURS_07
00003C ????           00106         data    CUE_HOURS_08
00003E ????           00107         data    CUE_HOURS_09
000040 ????           00108         data    CUE_HOURS_10
000042 ????           00109         data    CUE_HOURS_11
000044 ????           00110         data    CUE_HOURS_12
000046 ????           00111         data    CUE_PANIC               ; should never hit this one
                      00112 
                      00113 ;CLK_PLUS_MAP
                      00114 ;       data    CUE_PLUS_0
                      00115 ;       data    CUE_PLUS_1
                      00116 ;       data    CUE_PLUS_2
                      00117 ;       data    CUE_PLUS_3
                      00118 ;       data    CUE_PLUS_4
                      00119 
                      00120 
                      00121 ;******************************************************************************
                      00122 ; Cues
                      00123 
                      00124 DATA_LED_DATA_CUES      code_pack ; set to align on 8 bit byte boundaries
                      00125 
                      00126 ;---- common equates used across cues
                      00127 
  000000FF            00128 LIT     equ     0xFF            ; maximum brightness for SET_LIT commands
  00000080            00129 DIM     equ     0x80            ; dim brightness
  000000FF            00130 XMAX    equ     0xFF            ; maximum brightness for cross fades
  00000000            00131 XMIN    equ     0x00            ; minumum brightness for cross fades
  00000020            00132 XFADE   equ     0x20            ; cross fade time
                      00133 
000000                00134 CUE_ALL_OFF_XFADE
                      00135 ; FADE_X        CUE_CMD FADE_X maskHmaskL channel scal wait up  dwell down off  rpt  min  max  xfade
                      00136 ;       db      CUE_CMD,FADE_X,0x00,0x00, ITS,    0x01,0x00,0x00,0x00,0x00,0x00,0x01,XMAX,XMAX,XFADE
                      00137 ; FADE_X        CUE_CMD FADE_X mask channel s,w,u,d,d,o,r,min, max, xfade
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00138 ;       db      CUE_CMD,FADE_X,0,0, ITS,    1,0,0,0,0,0,1,XMIN,XMIN,XFADE
                      00139 ;       db      CUE_CMD,WATCH,0x00,NEVER
000000 00             00140         db      CUE_DONE
                      00141 
                      00142 ; FADE_X        CUE_CMD FADE_X mask channel s,w,u,n,d,f,r,min, max, xfade
                      00143 ;       db      CUE_CMD,FADE_X, 0, ITS,     1,0,0,0,0,0,1,XMAX,XMAX,XFADE
                      00144 ;       db      CUE_CMD,FADE_X, 0, HALF,    1,0,0,0,0,0,1,XMIN,XMIN,XFADE
                      00145 ;       db      CUE_CMD,FADE_X, 0, TEN_,    1,0,0,0,0,0,1,XMIN,XMIN,XFADE
                      00146 ;       db      CUE_CMD,FADE_X, 0, QUARTER, 1,0,0,0,0,0,1,XMIN,XMIN,XFADE
                      00147 ;       db      CUE_CMD,FADE_X, 0, TWENTY,  1,0,0,0,0,0,1,XMIN,XMIN,XFADE
                      00148 ;       db      CUE_CMD,FADE_X, 0, FIVE_,   1,0,0,0,0,0,1,XMAX,XMAX,XFADE
                      00149 ;       db      CUE_CMD,FADE_X, 0, MINUTES, 1,0,0,0,0,0,1,XMAX,XMAX,XFADE
                      00150 ;       db      CUE_CMD,FADE_X, 0, PAST,    1,0,0,0,0,0,1,XMAX,XMAX,XFADE
                      00151 ;       db      CUE_CMD,FADE_X, 0, TO,      1,0,0,0,0,0,1,XMIN,XMIN,XFADE
                      00152 ;       db      CUE_CMD,FADE_X, 0, OCLOCK,  1,0,0,0,0,0,1,XMIN,XMIN,XFADE
                      00153 ;       db      CUE_CMD,WATCH,0x00,NEVER
                      00154 ;       db      CUE_DONE
                      00155 
000001                00156 CUE_ALL_ON_XFADE
                      00157 ; FADE_X        CUE_CMD FADE_X mask channel s,w,u,d,d,o,r,min, max, xfade
                      00158 ;       db      CUE_CMD,FADE_X,0,0, ITS,    1,0,0,0,0,0,1,XMAX,XMAX,XFADE
                      00159 ;       db      CUE_CMD,WATCH,0x00,NEVER
000001 00             00160         db      CUE_DONE
                      00161 
000002                00162 CUE_MINUTES_OFF
                      00163 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
000002 01 11 00 00 00 00164         db      CUE_CMD,SET_BRT, 0x00, ITS, 0           ; IT'S
000007 01 11 00 01 00 00165         db      CUE_CMD,SET_BRT, 0x00, HALF, 0          ; HALF
00000C 01 11 00 02 00 00166         db      CUE_CMD,SET_BRT, 0x00, TEN_, 0          ; TEN_
000011 01 11 00 03 00 00167         db      CUE_CMD,SET_BRT, 0x00, QUARTER, 0       ; QUARTER
000016 01 11 00 04 00 00168         db      CUE_CMD,SET_BRT, 0x00, TWENTY, 0        ; TWENTY
00001B 01 11 00 05 00 00169         db      CUE_CMD,SET_BRT, 0x00, FIVE_, 0         ; FIVE
000020 01 11 00 06 00 00170         db      CUE_CMD,SET_BRT, 0x00, MINUTES, 0       ; MINUTES
000025 01 11 00 07 00 00171         db      CUE_CMD,SET_BRT, 0x00, PAST, 0          ; PAST
00002A 01 11 00 08 00 00172         db      CUE_CMD,SET_BRT, 0x00, TO_, 0           ; TO
00002F 01 11 00 15 00 00173         db      CUE_CMD,SET_BRT, 0x00, OCLOCK, 0        ; O'CLOCK
                      00174 ;       db      CUE_CMD,WATCH,0x00,NEVER
000034 00             00175         db      CUE_DONE
                      00176 
000035                00177 CUE_MINUTES_00
                      00178 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
000035 01 11 00 00 00 00179         db      CUE_CMD,SET_BRT, 0x00, ITS, 0           ; IT'S
00003A 01 11 00 01 00 00180         db      CUE_CMD,SET_BRT, 0x00, HALF, 0          ; HALF
00003F 01 11 00 02 00 00181         db      CUE_CMD,SET_BRT, 0x00, TEN_, 0          ; TEN_
000044 01 11 00 03 00 00182         db      CUE_CMD,SET_BRT, 0x00, QUARTER, 0       ; QUARTER
000049 01 11 00 04 00 00183         db      CUE_CMD,SET_BRT, 0x00, TWENTY, 0        ; TWENTY
00004E 01 11 00 05 00 00184         db      CUE_CMD,SET_BRT, 0x00, FIVE_, 0         ; FIVE
000053 01 11 00 06 00 00185         db      CUE_CMD,SET_BRT, 0x00, MINUTES, 0       ; MINUTES
000058 01 11 00 07 00 00186         db      CUE_CMD,SET_BRT, 0x00, PAST, 0          ; PAST
00005D 01 11 00 08 00 00187         db      CUE_CMD,SET_BRT, 0x00, TO_, 0           ; TO_
000062 01 11 00 15 FF 00188         db      CUE_CMD,SET_BRT, 0x00, OCLOCK, LIT      ; O'CLOCK
                      00189 ;       db      CUE_CMD,WATCH,0x00,NEVER
000067 00             00190         db      CUE_DONE
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 63


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00191 
000068                00192 CUE_MINUTES_05
                      00193 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
000068 01 11 00 00 FF 00194         db      CUE_CMD,SET_BRT, 0x00, ITS, LIT         ; IT'S
00006D 01 11 00 01 00 00195         db      CUE_CMD,SET_BRT, 0x00, HALF, 0          ; HALF
000072 01 11 00 02 00 00196         db      CUE_CMD,SET_BRT, 0x00, TEN_, 0          ; TEN_
000077 01 11 00 03 00 00197         db      CUE_CMD,SET_BRT, 0x00, QUARTER, 0       ; QUARTER
00007C 01 11 00 04 00 00198         db      CUE_CMD,SET_BRT, 0x00, TWENTY, 0        ; TWENTY
000081 01 11 00 05 FF 00199         db      CUE_CMD,SET_BRT, 0x00, FIVE_, LIT       ; FIVE
000086 01 11 00 06 FF 00200         db      CUE_CMD,SET_BRT, 0x00, MINUTES, LIT     ; MINUTES
00008B 01 11 00 07 FF 00201         db      CUE_CMD,SET_BRT, 0x00, PAST, LIT        ; PAST
000090 01 11 00 08 00 00202         db      CUE_CMD,SET_BRT, 0x00, TO_, 0           ; TO_
000095 01 11 00 15 00 00203         db      CUE_CMD,SET_BRT, 0x00, OCLOCK, 0        ; O'CLOCK
                      00204 ;       db      CUE_CMD,WATCH,0x00,NEVER
00009A 00             00205         db      CUE_DONE
                      00206 
00009B                00207 CUE_MINUTES_10
                      00208 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
00009B 01 11 00 00 FF 00209         db      CUE_CMD,SET_BRT, 0x00, ITS, LIT         ; IT'S
0000A0 01 11 00 01 00 00210         db      CUE_CMD,SET_BRT, 0x00, HALF, 0          ; HALF
0000A5 01 11 00 02 FF 00211         db      CUE_CMD,SET_BRT, 0x00, TEN_, LIT        ; TEN_
0000AA 01 11 00 03 00 00212         db      CUE_CMD,SET_BRT, 0x00, QUARTER, 0       ; QUARTER
0000AF 01 11 00 04 00 00213         db      CUE_CMD,SET_BRT, 0x00, TWENTY, 0        ; TWENTY
0000B4 01 11 00 05 00 00214         db      CUE_CMD,SET_BRT, 0x00, FIVE_, 0         ; FIVE
0000B9 01 11 00 06 00 00215         db      CUE_CMD,SET_BRT, 0x00, MINUTES, 0       ; MINUTES
0000BE 01 11 00 07 FF 00216         db      CUE_CMD,SET_BRT, 0x00, PAST, LIT        ; PAST
0000C3 01 11 00 08 00 00217         db      CUE_CMD,SET_BRT, 0x00, TO_, 0           ; TO_
0000C8 01 11 00 15 00 00218         db      CUE_CMD,SET_BRT, 0x00, OCLOCK, 0        ; O'CLOCK
                      00219 ;       db      CUE_CMD,WATCH,0x00,NEVER
0000CD 00             00220         db      CUE_DONE
                      00221 
0000CE                00222 CUE_MINUTES_15
                      00223 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
0000CE 01 11 00 00 FF 00224         db      CUE_CMD,SET_BRT, 0x00, ITS, LIT         ; IT'S
0000D3 01 11 00 01 00 00225         db      CUE_CMD,SET_BRT, 0x00, HALF, 0          ; HALF
0000D8 01 11 00 02 00 00226         db      CUE_CMD,SET_BRT, 0x00, TEN_, 0          ; TEN_
0000DD 01 11 00 03 FF 00227         db      CUE_CMD,SET_BRT, 0x00, QUARTER, LIT     ; QUARTER
0000E2 01 11 00 04 00 00228         db      CUE_CMD,SET_BRT, 0x00, TWENTY, 0        ; TWENTY
0000E7 01 11 00 05 00 00229         db      CUE_CMD,SET_BRT, 0x00, FIVE_, 0         ; FIVE
0000EC 01 11 00 06 00 00230         db      CUE_CMD,SET_BRT, 0x00, MINUTES, 0       ; MINUTES
0000F1 01 11 00 07 FF 00231         db      CUE_CMD,SET_BRT, 0x00, PAST, LIT        ; PAST
0000F6 01 11 00 08 00 00232         db      CUE_CMD,SET_BRT, 0x00, TO_, 0           ; TO_
0000FB 01 11 00 15 00 00233         db      CUE_CMD,SET_BRT, 0x00, OCLOCK, 0        ; O'CLOCK
                      00234 ;       db      CUE_CMD,WATCH,0x00,NEVER
000100 00             00235         db      CUE_DONE
                      00236 
000101                00237 CUE_MINUTES_20
                      00238 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
000101 01 11 00 00 FF 00239         db      CUE_CMD,SET_BRT, 0x00, ITS, LIT         ; IT'S
000106 01 11 00 01 00 00240         db      CUE_CMD,SET_BRT, 0x00, HALF, 0          ; HALF
00010B 01 11 00 02 00 00241         db      CUE_CMD,SET_BRT, 0x00, TEN_, 0          ; TEN_
000110 01 11 00 03 00 00242         db      CUE_CMD,SET_BRT, 0x00, QUARTER, 0       ; QUARTER
000115 01 11 00 04 FF 00243         db      CUE_CMD,SET_BRT, 0x00, TWENTY, LIT      ; TWENTY
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 64


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00011A 01 11 00 05 00 00244         db      CUE_CMD,SET_BRT, 0x00, FIVE_, 0         ; FIVE
00011F 01 11 00 06 00 00245         db      CUE_CMD,SET_BRT, 0x00, MINUTES, 0       ; MINUTES
000124 01 11 00 07 FF 00246         db      CUE_CMD,SET_BRT, 0x00, PAST, LIT        ; PAST
000129 01 11 00 08 00 00247         db      CUE_CMD,SET_BRT, 0x00, TO_, 0           ; TO_
00012E 01 11 00 15 00 00248         db      CUE_CMD,SET_BRT, 0x00, OCLOCK, 0        ; O'CLOCK
                      00249 ;       db      CUE_CMD,WATCH,0x00,NEVER
000133 00             00250         db      CUE_DONE
                      00251 
000134                00252 CUE_MINUTES_25
                      00253 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
000134 01 11 00 00 FF 00254         db      CUE_CMD,SET_BRT, 0x00, ITS, LIT         ; IT'S
000139 01 11 00 01 00 00255         db      CUE_CMD,SET_BRT, 0x00, HALF, 0          ; HALF
00013E 01 11 00 02 00 00256         db      CUE_CMD,SET_BRT, 0x00, TEN_, 0          ; TEN_
000143 01 11 00 03 00 00257         db      CUE_CMD,SET_BRT, 0x00, QUARTER, 0       ; QUARTER
000148 01 11 00 04 FF 00258         db      CUE_CMD,SET_BRT, 0x00, TWENTY, LIT      ; TWENTY
00014D 01 11 00 05 FF 00259         db      CUE_CMD,SET_BRT, 0x00, FIVE_, LIT       ; FIVE
000152 01 11 00 06 FF 00260         db      CUE_CMD,SET_BRT, 0x00, MINUTES, LIT     ; MINUTES
000157 01 11 00 07 FF 00261         db      CUE_CMD,SET_BRT, 0x00, PAST, LIT        ; PAST
00015C 01 11 00 08 00 00262         db      CUE_CMD,SET_BRT, 0x00, TO_, 0           ; TO_
000161 01 11 00 15 00 00263         db      CUE_CMD,SET_BRT, 0x00, OCLOCK, 0        ; O'CLOCK
                      00264 ;       db      CUE_CMD,WATCH,0x00,NEVER
000166 00             00265         db      CUE_DONE
                      00266 
000167                00267 CUE_MINUTES_30
                      00268 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
000167 01 11 00 00 FF 00269         db      CUE_CMD,SET_BRT, 0x00, ITS, LIT         ; IT'S
00016C 01 11 00 01 FF 00270         db      CUE_CMD,SET_BRT, 0x00, HALF, LIT        ; HALF
000171 01 11 00 02 00 00271         db      CUE_CMD,SET_BRT, 0x00, TEN_, 0          ; TEN_
000176 01 11 00 03 00 00272         db      CUE_CMD,SET_BRT, 0x00, QUARTER, 0       ; QUARTER
00017B 01 11 00 04 00 00273         db      CUE_CMD,SET_BRT, 0x00, TWENTY, 0        ; TWENTY
000180 01 11 00 05 00 00274         db      CUE_CMD,SET_BRT, 0x00, FIVE_, 0         ; FIVE
000185 01 11 00 06 00 00275         db      CUE_CMD,SET_BRT, 0x00, MINUTES, 0       ; MINUTES
00018A 01 11 00 07 FF 00276         db      CUE_CMD,SET_BRT, 0x00, PAST, LIT        ; PAST
00018F 01 11 00 08 00 00277         db      CUE_CMD,SET_BRT, 0x00, TO_, 0           ; TO_
000194 01 11 00 15 00 00278         db      CUE_CMD,SET_BRT, 0x00, OCLOCK, 0        ; O'CLOCK
                      00279 ;       db      CUE_CMD,WATCH,0x00,NEVER
000199 00             00280         db      CUE_DONE
                      00281 
00019A                00282 CUE_MINUTES_35
                      00283 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
00019A 01 11 00 00 FF 00284         db      CUE_CMD,SET_BRT, 0x00, ITS, LIT         ; IT'S
00019F 01 11 00 01 00 00285         db      CUE_CMD,SET_BRT, 0x00, HALF, 0          ; HALF
0001A4 01 11 00 02 00 00286         db      CUE_CMD,SET_BRT, 0x00, TEN_, 0          ; TEN_
0001A9 01 11 00 03 00 00287         db      CUE_CMD,SET_BRT, 0x00, QUARTER, 0       ; QUARTER
0001AE 01 11 00 04 FF 00288         db      CUE_CMD,SET_BRT, 0x00, TWENTY, LIT      ; TWENTY
0001B3 01 11 00 05 FF 00289         db      CUE_CMD,SET_BRT, 0x00, FIVE_, LIT       ; FIVE
0001B8 01 11 00 06 00 00290         db      CUE_CMD,SET_BRT, 0x00, MINUTES, 0       ; MINUTES
0001BD 01 11 00 07 00 00291         db      CUE_CMD,SET_BRT, 0x00, PAST, 0          ; PAST
0001C2 01 11 00 08 FF 00292         db      CUE_CMD,SET_BRT, 0x00, TO_, LIT         ; TO_
0001C7 01 11 00 15 00 00293         db      CUE_CMD,SET_BRT, 0x00, OCLOCK, 0        ; O'CLOCK
                      00294 ;       db      CUE_CMD,WATCH,0x00,NEVER
0001CC 00             00295         db      CUE_DONE
                      00296 
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 65


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0001CD                00297 CUE_MINUTES_40
                      00298 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
0001CD 01 11 00 00 FF 00299         db      CUE_CMD,SET_BRT, 0x00, ITS, LIT         ; IT'S
0001D2 01 11 00 01 00 00300         db      CUE_CMD,SET_BRT, 0x00, HALF, 0          ; HALF
0001D7 01 11 00 02 00 00301         db      CUE_CMD,SET_BRT, 0x00, TEN_, 0          ; TEN_
0001DC 01 11 00 03 00 00302         db      CUE_CMD,SET_BRT, 0x00, QUARTER, 0       ; QUARTER
0001E1 01 11 00 04 FF 00303         db      CUE_CMD,SET_BRT, 0x00, TWENTY, LIT      ; TWENTY
0001E6 01 11 00 05 00 00304         db      CUE_CMD,SET_BRT, 0x00, FIVE_, 0         ; FIVE
0001EB 01 11 00 06 FF 00305         db      CUE_CMD,SET_BRT, 0x00, MINUTES, LIT     ; MINUTES
0001F0 01 11 00 07 00 00306         db      CUE_CMD,SET_BRT, 0x00, PAST, 0          ; PAST
0001F5 01 11 00 08 FF 00307         db      CUE_CMD,SET_BRT, 0x00, TO_, LIT         ; TO_
0001FA 01 11 00 15 00 00308         db      CUE_CMD,SET_BRT, 0x00, OCLOCK, 0        ; O'CLOCK
                      00309 ;       db      CUE_CMD,WATCH,0x00,NEVER
0001FF 00             00310         db      CUE_DONE
                      00311 
000200                00312 CUE_MINUTES_45
                      00313 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
000200 01 11 00 00 FF 00314         db      CUE_CMD,SET_BRT, 0x00, ITS, LIT         ; IT'S
000205 01 11 00 01 00 00315         db      CUE_CMD,SET_BRT, 0x00, HALF, 0          ; HALF
00020A 01 11 00 02 00 00316         db      CUE_CMD,SET_BRT, 0x00, TEN_, 0          ; TEN_
00020F 01 11 00 03 FF 00317         db      CUE_CMD,SET_BRT, 0x00, QUARTER, LIT     ; QUARTER
000214 01 11 00 04 00 00318         db      CUE_CMD,SET_BRT, 0x00, TWENTY, 0        ; TWENTY
000219 01 11 00 05 00 00319         db      CUE_CMD,SET_BRT, 0x00, FIVE_, 0         ; FIVE
00021E 01 11 00 06 00 00320         db      CUE_CMD,SET_BRT, 0x00, MINUTES, 0       ; MINUTES
000223 01 11 00 07 00 00321         db      CUE_CMD,SET_BRT, 0x00, PAST, 0          ; PAST
000228 01 11 00 08 FF 00322         db      CUE_CMD,SET_BRT, 0x00, TO_, LIT         ; TO_
00022D 01 11 00 15 00 00323         db      CUE_CMD,SET_BRT, 0x00, OCLOCK, 0        ; O'CLOCK
                      00324 ;       db      CUE_CMD,WATCH,0x00,NEVER
000232 00             00325         db      CUE_DONE
                      00326 
000233                00327 CUE_MINUTES_50
                      00328 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
000233 01 11 00 00 FF 00329         db      CUE_CMD,SET_BRT, 0x00, ITS, LIT         ; IT'S
000238 01 11 00 01 00 00330         db      CUE_CMD,SET_BRT, 0x00, HALF, 0          ; HALF
00023D 01 11 00 02 FF 00331         db      CUE_CMD,SET_BRT, 0x00, TEN_, LIT        ; TEN_
000242 01 11 00 03 00 00332         db      CUE_CMD,SET_BRT, 0x00, QUARTER, 0       ; QUARTER
000247 01 11 00 04 00 00333         db      CUE_CMD,SET_BRT, 0x00, TWENTY, 0        ; TWENTY
00024C 01 11 00 05 00 00334         db      CUE_CMD,SET_BRT, 0x00, FIVE_, 0         ; FIVE
000251 01 11 00 06 FF 00335         db      CUE_CMD,SET_BRT, 0x00, MINUTES, LIT     ; MINUTES
000256 01 11 00 07 00 00336         db      CUE_CMD,SET_BRT, 0x00, PAST, 0          ; PAST
00025B 01 11 00 08 FF 00337         db      CUE_CMD,SET_BRT, 0x00, TO_, LIT         ; TO_
000260 01 11 00 15 00 00338         db      CUE_CMD,SET_BRT, 0x00, OCLOCK, 0        ; O'CLOCK
                      00339 ;       db      CUE_CMD,WATCH,0x00,NEVER
000265 00             00340         db      CUE_DONE
                      00341 
000266                00342 CUE_MINUTES_55
                      00343 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
000266 01 11 00 00 FF 00344         db      CUE_CMD,SET_BRT, 0x00, ITS, LIT         ; IT'S
00026B 01 11 00 01 00 00345         db      CUE_CMD,SET_BRT, 0x00, HALF, 0          ; HALF
000270 01 11 00 02 00 00346         db      CUE_CMD,SET_BRT, 0x00, TEN_, 0          ; TEN_
000275 01 11 00 03 00 00347         db      CUE_CMD,SET_BRT, 0x00, QUARTER, 0       ; QUARTER
00027A 01 11 00 04 00 00348         db      CUE_CMD,SET_BRT, 0x00, TWENTY, 0        ; TWENTY
00027F 01 11 00 05 FF 00349         db      CUE_CMD,SET_BRT, 0x00, FIVE_, LIT       ; FIVE
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 66


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000284 01 11 00 06 FF 00350         db      CUE_CMD,SET_BRT, 0x00, MINUTES, LIT     ; MINUTES
000289 01 11 00 07 00 00351         db      CUE_CMD,SET_BRT, 0x00, PAST, 0          ; PAST
00028E 01 11 00 08 FF 00352         db      CUE_CMD,SET_BRT, 0x00, TO_, LIT         ; TO_
000293 01 11 00 15 00 00353         db      CUE_CMD,SET_BRT, 0x00, OCLOCK, 0        ; O'CLOCK
                      00354 ;       db      CUE_CMD,WATCH,0x00,NEVER
000298 00             00355         db      CUE_DONE
                      00356 
                      00357 ; FADE_X        CUE_CMD FADE_X mask channel s,w,u,d,d,o,r,min, max, xfade
                      00358 ;       db      CUE_CMD,FADE_X,0,0, ITS,    1,0,0,0,0,0,1,XMAX,XMAX,XFADE
                      00359 ;       db      CUE_CMD,WATCH,0x00,NEVER
                      00360 ;       db      CUE_DONE
                      00361 
000299                00362 CUE_HOURS_OFF
                      00363 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
000299 01 11 00 09 00 00364         db      CUE_CMD,SET_BRT, 0x00, ONE, 0           ; ONE
00029E 01 11 00 0A 00 00365         db      CUE_CMD,SET_BRT, 0x00, TWO, 0           ; TWO
0002A3 01 11 00 0B 00 00366         db      CUE_CMD,SET_BRT, 0x00, THREE, 0         ; THREE
0002A8 01 11 00 0C 00 00367         db      CUE_CMD,SET_BRT, 0x00, FOUR, 0          ; FOUR
0002AD 01 11 00 0D 00 00368         db      CUE_CMD,SET_BRT, 0x00, FIVE, 0          ; FIVE
0002B2 01 11 00 0E 00 00369         db      CUE_CMD,SET_BRT, 0x00, SIX, 0           ; SIX
0002B7 01 11 00 0F 00 00370         db      CUE_CMD,SET_BRT, 0x00, SEVEN, 0         ; SEVEN
0002BC 01 11 00 10 00 00371         db      CUE_CMD,SET_BRT, 0x00, EIGHT, 0         ; EIGHT
0002C1 01 11 00 11 00 00372         db      CUE_CMD,SET_BRT, 0x00, NINE, 0          ; NiNE
0002C6 01 11 00 12 00 00373         db      CUE_CMD,SET_BRT, 0x00, TEN, 0           ; TEN_
0002CB 01 11 00 13 00 00374         db      CUE_CMD,SET_BRT, 0x00, ELEVEN, 0        ; ELEVEN
0002D0 01 11 00 14 00 00375         db      CUE_CMD,SET_BRT, 0x00, TWELVE, 0        ; TWELVE
                      00376 ;       db      CUE_CMD,WATCH,0x00,NEVER
0002D5 00             00377         db      CUE_DONE
                      00378 
0002D6                00379 CUE_HOURS_01
                      00380 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
0002D6 01 11 00 09 FF 00381         db      CUE_CMD,SET_BRT, 0x00, ONE, LIT         ; ONE
0002DB 01 11 00 0A 00 00382         db      CUE_CMD,SET_BRT, 0x00, TWO, 0           ; TWO
0002E0 01 11 00 0B 00 00383         db      CUE_CMD,SET_BRT, 0x00, THREE, 0         ; THREE
0002E5 01 11 00 0C 00 00384         db      CUE_CMD,SET_BRT, 0x00, FOUR, 0          ; FOUR
0002EA 01 11 00 0D 00 00385         db      CUE_CMD,SET_BRT, 0x00, FIVE, 0          ; FIVE
0002EF 01 11 00 0E 00 00386         db      CUE_CMD,SET_BRT, 0x00, SIX, 0           ; SIX
0002F4 01 11 00 0F 00 00387         db      CUE_CMD,SET_BRT, 0x00, SEVEN, 0         ; SEVEN
0002F9 01 11 00 10 00 00388         db      CUE_CMD,SET_BRT, 0x00, EIGHT, 0         ; EIGHT
0002FE 01 11 00 11 00 00389         db      CUE_CMD,SET_BRT, 0x00, NINE, 0          ; NiNE
000303 01 11 00 12 00 00390         db      CUE_CMD,SET_BRT, 0x00, TEN, 0           ; TEN_
000308 01 11 00 13 00 00391         db      CUE_CMD,SET_BRT, 0x00, ELEVEN, 0        ; ELEVEN
00030D 01 11 00 14 00 00392         db      CUE_CMD,SET_BRT, 0x00, TWELVE, 0        ; TWELVE
                      00393 ;       db      CUE_CMD,WATCH,0x00,NEVER
000312 00             00394         db      CUE_DONE
                      00395 
000313                00396 CUE_HOURS_02
                      00397 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
000313 01 11 00 09 00 00398         db      CUE_CMD,SET_BRT, 0x00, ONE, 0           ; ONE
000318 01 11 00 0A FF 00399         db      CUE_CMD,SET_BRT, 0x00, TWO, LIT         ; TWO
00031D 01 11 00 0B 00 00400         db      CUE_CMD,SET_BRT, 0x00, THREE, 0         ; THREE
000322 01 11 00 0C 00 00401         db      CUE_CMD,SET_BRT, 0x00, FOUR, 0          ; FOUR
000327 01 11 00 0D 00 00402         db      CUE_CMD,SET_BRT, 0x00, FIVE, 0          ; FIVE
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 67


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00032C 01 11 00 0E 00 00403         db      CUE_CMD,SET_BRT, 0x00, SIX, 0           ; SIX
000331 01 11 00 0F 00 00404         db      CUE_CMD,SET_BRT, 0x00, SEVEN, 0         ; SEVEN
000336 01 11 00 10 00 00405         db      CUE_CMD,SET_BRT, 0x00, EIGHT, 0         ; EIGHT
00033B 01 11 00 11 00 00406         db      CUE_CMD,SET_BRT, 0x00, NINE, 0          ; NiNE
000340 01 11 00 12 00 00407         db      CUE_CMD,SET_BRT, 0x00, TEN, 0           ; TEN_
000345 01 11 00 13 00 00408         db      CUE_CMD,SET_BRT, 0x00, ELEVEN, 0        ; ELEVEN
00034A 01 11 00 14 00 00409         db      CUE_CMD,SET_BRT, 0x00, TWELVE, 0        ; TWELVE
                      00410 ;       db      CUE_CMD,WATCH,0x00,NEVER
00034F 00             00411         db      CUE_DONE
                      00412 
000350                00413 CUE_HOURS_03
                      00414 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
000350 01 11 00 09 00 00415         db      CUE_CMD,SET_BRT, 0x00, ONE, 0           ; ONE
000355 01 11 00 0A 00 00416         db      CUE_CMD,SET_BRT, 0x00, TWO, 0           ; TWO
00035A 01 11 00 0B FF 00417         db      CUE_CMD,SET_BRT, 0x00, THREE, LIT       ; THREE
00035F 01 11 00 0C 00 00418         db      CUE_CMD,SET_BRT, 0x00, FOUR, 0          ; FOUR
000364 01 11 00 0D 00 00419         db      CUE_CMD,SET_BRT, 0x00, FIVE, 0          ; FIVE
000369 01 11 00 0E 00 00420         db      CUE_CMD,SET_BRT, 0x00, SIX, 0           ; SIX
00036E 01 11 00 0F 00 00421         db      CUE_CMD,SET_BRT, 0x00, SEVEN, 0         ; SEVEN
000373 01 11 00 10 00 00422         db      CUE_CMD,SET_BRT, 0x00, EIGHT, 0         ; EIGHT
000378 01 11 00 11 00 00423         db      CUE_CMD,SET_BRT, 0x00, NINE, 0          ; NiNE
00037D 01 11 00 12 00 00424         db      CUE_CMD,SET_BRT, 0x00, TEN, 0           ; TEN_
000382 01 11 00 13 00 00425         db      CUE_CMD,SET_BRT, 0x00, ELEVEN, 0        ; ELEVEN
000387 01 11 00 14 00 00426         db      CUE_CMD,SET_BRT, 0x00, TWELVE, 0        ; TWELVE
                      00427 ;       db      CUE_CMD,WATCH,0x00,NEVER
00038C 00             00428         db      CUE_DONE
                      00429 
00038D                00430 CUE_HOURS_04
                      00431 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
00038D 01 11 00 09 00 00432         db      CUE_CMD,SET_BRT, 0x00, ONE, 0           ; ONE
000392 01 11 00 0A 00 00433         db      CUE_CMD,SET_BRT, 0x00, TWO, 0           ; TWO
000397 01 11 00 0B 00 00434         db      CUE_CMD,SET_BRT, 0x00, THREE, 0         ; THREE
00039C 01 11 00 0C FF 00435         db      CUE_CMD,SET_BRT, 0x00, FOUR, LIT        ; FOUR
0003A1 01 11 00 0D 00 00436         db      CUE_CMD,SET_BRT, 0x00, FIVE, 0          ; FIVE
0003A6 01 11 00 0E 00 00437         db      CUE_CMD,SET_BRT, 0x00, SIX, 0           ; SIX
0003AB 01 11 00 0F 00 00438         db      CUE_CMD,SET_BRT, 0x00, SEVEN, 0         ; SEVEN
0003B0 01 11 00 10 00 00439         db      CUE_CMD,SET_BRT, 0x00, EIGHT, 0         ; EIGHT
0003B5 01 11 00 11 00 00440         db      CUE_CMD,SET_BRT, 0x00, NINE, 0          ; NiNE
0003BA 01 11 00 12 00 00441         db      CUE_CMD,SET_BRT, 0x00, TEN, 0           ; TEN
0003BF 01 11 00 13 00 00442         db      CUE_CMD,SET_BRT, 0x00, ELEVEN, 0        ; ELEVEN
0003C4 01 11 00 14 00 00443         db      CUE_CMD,SET_BRT, 0x00, TWELVE, 0        ; TWELVE
                      00444 ;       db      CUE_CMD,WATCH,0x00,NEVER
0003C9 00             00445         db      CUE_DONE
                      00446 
0003CA                00447 CUE_HOURS_05
                      00448 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
0003CA 01 11 00 09 00 00449         db      CUE_CMD,SET_BRT, 0x00, ONE, 0           ; ONE
0003CF 01 11 00 0A 00 00450         db      CUE_CMD,SET_BRT, 0x00, TWO, 0           ; TWO
0003D4 01 11 00 0B 00 00451         db      CUE_CMD,SET_BRT, 0x00, THREE, 0         ; THREE
0003D9 01 11 00 0C 00 00452         db      CUE_CMD,SET_BRT, 0x00, FOUR, 0          ; FOUR
0003DE 01 11 00 0D FF 00453         db      CUE_CMD,SET_BRT, 0x00, FIVE, LIT        ; FIVE
0003E3 01 11 00 0E 00 00454         db      CUE_CMD,SET_BRT, 0x00, SIX, 0           ; SIX
0003E8 01 11 00 0F 00 00455         db      CUE_CMD,SET_BRT, 0x00, SEVEN, 0         ; SEVEN
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 68


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0003ED 01 11 00 10 00 00456         db      CUE_CMD,SET_BRT, 0x00, EIGHT, 0         ; EIGHT
0003F2 01 11 00 11 00 00457         db      CUE_CMD,SET_BRT, 0x00, NINE, 0          ; NiNE
0003F7 01 11 00 12 00 00458         db      CUE_CMD,SET_BRT, 0x00, TEN, 0           ; TEN
0003FC 01 11 00 13 00 00459         db      CUE_CMD,SET_BRT, 0x00, ELEVEN, 0        ; ELEVEN
000401 01 11 00 14 00 00460         db      CUE_CMD,SET_BRT, 0x00, TWELVE, 0        ; TWELVE
                      00461 ;       db      CUE_CMD,WATCH,0x00,NEVER
000406 00             00462         db      CUE_DONE
                      00463 
000407                00464 CUE_HOURS_06
                      00465 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
000407 01 11 00 09 00 00466         db      CUE_CMD,SET_BRT, 0x00, ONE, 0           ; ONE
00040C 01 11 00 0A 00 00467         db      CUE_CMD,SET_BRT, 0x00, TWO, 0           ; TWO
000411 01 11 00 0B 00 00468         db      CUE_CMD,SET_BRT, 0x00, THREE, 0         ; THREE
000416 01 11 00 0C 00 00469         db      CUE_CMD,SET_BRT, 0x00, FOUR, 0          ; FOUR
00041B 01 11 00 0D 00 00470         db      CUE_CMD,SET_BRT, 0x00, FIVE, 0          ; FIVE
000420 01 11 00 0E FF 00471         db      CUE_CMD,SET_BRT, 0x00, SIX, LIT         ; SIX
000425 01 11 00 0F 00 00472         db      CUE_CMD,SET_BRT, 0x00, SEVEN, 0         ; SEVEN
00042A 01 11 00 10 00 00473         db      CUE_CMD,SET_BRT, 0x00, EIGHT, 0         ; EIGHT
00042F 01 11 00 11 00 00474         db      CUE_CMD,SET_BRT, 0x00, NINE, 0          ; NiNE
000434 01 11 00 12 00 00475         db      CUE_CMD,SET_BRT, 0x00, TEN, 0           ; TEN
000439 01 11 00 13 00 00476         db      CUE_CMD,SET_BRT, 0x00, ELEVEN, 0        ; ELEVEN
00043E 01 11 00 14 00 00477         db      CUE_CMD,SET_BRT, 0x00, TWELVE, 0        ; TWELVE
                      00478 ;       db      CUE_CMD,WATCH,0x00,NEVER
000443 00             00479         db      CUE_DONE
                      00480 
000444                00481 CUE_HOURS_07
                      00482 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
000444 01 11 00 09 00 00483         db      CUE_CMD,SET_BRT, 0x00, ONE, 0           ; ONE
000449 01 11 00 0A 00 00484         db      CUE_CMD,SET_BRT, 0x00, TWO, 0           ; TWO
00044E 01 11 00 0B 00 00485         db      CUE_CMD,SET_BRT, 0x00, THREE, 0         ; THREE
000453 01 11 00 0C 00 00486         db      CUE_CMD,SET_BRT, 0x00, FOUR, 0          ; FOUR
000458 01 11 00 0D 00 00487         db      CUE_CMD,SET_BRT, 0x00, FIVE, 0          ; FIVE
00045D 01 11 00 0E 00 00488         db      CUE_CMD,SET_BRT, 0x00, SIX, 0           ; SIX
000462 01 11 00 0F FF 00489         db      CUE_CMD,SET_BRT, 0x00, SEVEN, LIT       ; SEVEN
000467 01 11 00 10 00 00490         db      CUE_CMD,SET_BRT, 0x00, EIGHT, 0         ; EIGHT
00046C 01 11 00 11 00 00491         db      CUE_CMD,SET_BRT, 0x00, NINE, 0          ; NiNE
000471 01 11 00 12 00 00492         db      CUE_CMD,SET_BRT, 0x00, TEN, 0           ; TEN
000476 01 11 00 13 00 00493         db      CUE_CMD,SET_BRT, 0x00, ELEVEN, 0        ; ELEVEN
00047B 01 11 00 14 00 00494         db      CUE_CMD,SET_BRT, 0x00, TWELVE, 0        ; TWELVE
                      00495 ;       db      CUE_CMD,WATCH,0x00,NEVER
000480 00             00496         db      CUE_DONE
                      00497 
000481                00498 CUE_HOURS_08
                      00499 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
000481 01 11 00 09 00 00500         db      CUE_CMD,SET_BRT, 0x00, ONE, 0           ; ONE
000486 01 11 00 0A 00 00501         db      CUE_CMD,SET_BRT, 0x00, TWO, 0           ; TWO
00048B 01 11 00 0B 00 00502         db      CUE_CMD,SET_BRT, 0x00, THREE, 0         ; THREE
000490 01 11 00 0C 00 00503         db      CUE_CMD,SET_BRT, 0x00, FOUR, 0          ; FOUR
000495 01 11 00 0D 00 00504         db      CUE_CMD,SET_BRT, 0x00, FIVE, 0          ; FIVE
00049A 01 11 00 0E 00 00505         db      CUE_CMD,SET_BRT, 0x00, SIX, 0           ; SIX
00049F 01 11 00 0F 00 00506         db      CUE_CMD,SET_BRT, 0x00, SEVEN, 0         ; SEVEN
0004A4 01 11 00 10 FF 00507         db      CUE_CMD,SET_BRT, 0x00, EIGHT, LIT       ; EIGHT
0004A9 01 11 00 11 00 00508         db      CUE_CMD,SET_BRT, 0x00, NINE, 0          ; NiNE
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 69


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0004AE 01 11 00 12 00 00509         db      CUE_CMD,SET_BRT, 0x00, TEN, 0           ; TEN
0004B3 01 11 00 13 00 00510         db      CUE_CMD,SET_BRT, 0x00, ELEVEN, 0        ; ELEVEN
0004B8 01 11 00 14 00 00511         db      CUE_CMD,SET_BRT, 0x00, TWELVE, 0        ; TWELVE
                      00512 ;       db      CUE_CMD,WATCH,0x00,NEVER
0004BD 00             00513         db      CUE_DONE
                      00514 
0004BE                00515 CUE_HOURS_09
                      00516 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
0004BE 01 11 00 09 00 00517         db      CUE_CMD,SET_BRT, 0x00, ONE, 0           ; ONE
0004C3 01 11 00 0A 00 00518         db      CUE_CMD,SET_BRT, 0x00, TWO, 0           ; TWO
0004C8 01 11 00 0B 00 00519         db      CUE_CMD,SET_BRT, 0x00, THREE, 0         ; THREE
0004CD 01 11 00 0C 00 00520         db      CUE_CMD,SET_BRT, 0x00, FOUR, 0          ; FOUR
0004D2 01 11 00 0D 00 00521         db      CUE_CMD,SET_BRT, 0x00, FIVE, 0          ; FIVE
0004D7 01 11 00 0E 00 00522         db      CUE_CMD,SET_BRT, 0x00, SIX, 0           ; SIX
0004DC 01 11 00 0F 00 00523         db      CUE_CMD,SET_BRT, 0x00, SEVEN, 0         ; SEVEN
0004E1 01 11 00 10 00 00524         db      CUE_CMD,SET_BRT, 0x00, EIGHT, 0         ; EIGHT
0004E6 01 11 00 11 FF 00525         db      CUE_CMD,SET_BRT, 0x00, NINE, LIT        ; NiNE
0004EB 01 11 00 12 00 00526         db      CUE_CMD,SET_BRT, 0x00, TEN, 0           ; TEN
0004F0 01 11 00 13 00 00527         db      CUE_CMD,SET_BRT, 0x00, ELEVEN, 0        ; ELEVEN
0004F5 01 11 00 14 00 00528         db      CUE_CMD,SET_BRT, 0x00, TWELVE, 0        ; TWELVE
                      00529 ;       db      CUE_CMD,WATCH,0x00,NEVER
0004FA 00             00530         db      CUE_DONE
                      00531 
0004FB                00532 CUE_HOURS_10
                      00533 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
0004FB 01 11 00 09 00 00534         db      CUE_CMD,SET_BRT, 0x00, ONE, 0           ; ONE
000500 01 11 00 0A 00 00535         db      CUE_CMD,SET_BRT, 0x00, TWO, 0           ; TWO
000505 01 11 00 0B 00 00536         db      CUE_CMD,SET_BRT, 0x00, THREE, 0         ; THREE
00050A 01 11 00 0C 00 00537         db      CUE_CMD,SET_BRT, 0x00, FOUR, 0          ; FOUR
00050F 01 11 00 0D 00 00538         db      CUE_CMD,SET_BRT, 0x00, FIVE, 0          ; FIVE
000514 01 11 00 0E 00 00539         db      CUE_CMD,SET_BRT, 0x00, SIX, 0           ; SIX
000519 01 11 00 0F 00 00540         db      CUE_CMD,SET_BRT, 0x00, SEVEN, 0         ; SEVEN
00051E 01 11 00 10 00 00541         db      CUE_CMD,SET_BRT, 0x00, EIGHT, 0         ; EIGHT
000523 01 11 00 11 00 00542         db      CUE_CMD,SET_BRT, 0x00, NINE, 0          ; NiNE
000528 01 11 00 12 FF 00543         db      CUE_CMD,SET_BRT, 0x00, TEN, LIT         ; TEN
00052D 01 11 00 13 00 00544         db      CUE_CMD,SET_BRT, 0x00, ELEVEN, 0        ; ELEVEN
000532 01 11 00 14 00 00545         db      CUE_CMD,SET_BRT, 0x00, TWELVE, 0        ; TWELVE
                      00546 ;       db      CUE_CMD,WATCH,0x00,NEVER
000537 00             00547         db      CUE_DONE
                      00548 
000538                00549 CUE_HOURS_11
                      00550 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
000538 01 11 00 09 00 00551         db      CUE_CMD,SET_BRT, 0x00, ONE, 0           ; ONE
00053D 01 11 00 0A 00 00552         db      CUE_CMD,SET_BRT, 0x00, TWO, 0           ; TWO
000542 01 11 00 0B 00 00553         db      CUE_CMD,SET_BRT, 0x00, THREE, 0         ; THREE
000547 01 11 00 0C 00 00554         db      CUE_CMD,SET_BRT, 0x00, FOUR, 0          ; FOUR
00054C 01 11 00 0D 00 00555         db      CUE_CMD,SET_BRT, 0x00, FIVE, 0          ; FIVE
000551 01 11 00 0E 00 00556         db      CUE_CMD,SET_BRT, 0x00, SIX, 0           ; SIX
000556 01 11 00 0F 00 00557         db      CUE_CMD,SET_BRT, 0x00, SEVEN, 0         ; SEVEN
00055B 01 11 00 10 00 00558         db      CUE_CMD,SET_BRT, 0x00, EIGHT, 0         ; EIGHT
000560 01 11 00 11 00 00559         db      CUE_CMD,SET_BRT, 0x00, NINE, 0          ; NiNE
000565 01 11 00 12 00 00560         db      CUE_CMD,SET_BRT, 0x00, TEN, 0           ; TEN
00056A 01 11 00 13 FF 00561         db      CUE_CMD,SET_BRT, 0x00, ELEVEN, LIT      ; ELEVEN
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 70


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00056F 01 11 00 14 00 00562         db      CUE_CMD,SET_BRT, 0x00, TWELVE, 0        ; TWELVE
                      00563 ;       db      CUE_CMD,WATCH,0x00,NEVER
000574 00             00564         db      CUE_DONE
                      00565 
000575                00566 CUE_HOURS_12
                      00567 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
000575 01 11 00 09 00 00568         db      CUE_CMD,SET_BRT, 0x00, ONE, 0           ; ONE
00057A 01 11 00 0A 00 00569         db      CUE_CMD,SET_BRT, 0x00, TWO, 0           ; TWO
00057F 01 11 00 0B 00 00570         db      CUE_CMD,SET_BRT, 0x00, THREE, 0         ; THREE
000584 01 11 00 0C 00 00571         db      CUE_CMD,SET_BRT, 0x00, FOUR, 0          ; FOUR
000589 01 11 00 0D 00 00572         db      CUE_CMD,SET_BRT, 0x00, FIVE, 0          ; FIVE
00058E 01 11 00 0E 00 00573         db      CUE_CMD,SET_BRT, 0x00, SIX, 0           ; SIX
000593 01 11 00 0F 00 00574         db      CUE_CMD,SET_BRT, 0x00, SEVEN, 0         ; SEVEN
000598 01 11 00 10 00 00575         db      CUE_CMD,SET_BRT, 0x00, EIGHT, 0         ; EIGHT
00059D 01 11 00 11 00 00576         db      CUE_CMD,SET_BRT, 0x00, NINE, 0          ; NiNE
0005A2 01 11 00 12 00 00577         db      CUE_CMD,SET_BRT, 0x00, TEN, 0           ; TEN
0005A7 01 11 00 13 00 00578         db      CUE_CMD,SET_BRT, 0x00, ELEVEN, 0        ; ELEVEN
0005AC 01 11 00 14 FF 00579         db      CUE_CMD,SET_BRT, 0x00, TWELVE, LIT      ; TWELVE
                      00580 ;       db      CUE_CMD,WATCH,0x00,NEVER
0005B1 00             00581         db      CUE_DONE
                      00582 
                      00583 ; FADE_X        CUE_CMD FADE_X mask channel s,w,u,d,d,o,r,min, max, xfade
                      00584 ;       db      CUE_CMD,FADE_X,0,0, ITS,    1,0,0,0,0,0,1,XMAX,XMAX,XFADE
                      00585 ;       db      CUE_CMD,WATCH,0x00,NEVER
                      00586 ;       db      CUE_DONE
                      00587 
                      00588    if FALSE
                      00589 CUE_PLUS_0
                      00590         db      CUE_CMD,SET_BRT, 0x00, .22, 0           ; PLUS 1
                      00591         db      CUE_CMD,SET_BRT, 0x00, .23, 0           ; PLUS 2
                      00592         db      CUE_CMD,SET_BRT, 0x00, .24, 0           ; PLUS 3
                      00593         db      CUE_CMD,SET_BRT, 0x00, .25, 0           ; PLUS 4
                      00594 ;       db      CUE_CMD,WATCH,0x00,NEVER
                      00595         db      CUE_DONE
                      00596 
                      00597 CUE_PLUS_1
                      00598         db      CUE_CMD,SET_BRT, 0x00, .22, LIT         ; PLUS 1
                      00599         db      CUE_CMD,SET_BRT, 0x00, .23, 0           ; PLUS 2
                      00600         db      CUE_CMD,SET_BRT, 0x00, .24, 0           ; PLUS 3
                      00601         db      CUE_CMD,SET_BRT, 0x00, .25, 0           ; PLUS 4
                      00602 ;       db      CUE_CMD,WATCH,0x00,NEVER
                      00603         db      CUE_DONE
                      00604 
                      00605 CUE_PLUS_2
                      00606         db      CUE_CMD,SET_BRT, 0x00, .22, LIT         ; PLUS 1
                      00607         db      CUE_CMD,SET_BRT, 0x00, .23, LIT         ; PLUS 2
                      00608         db      CUE_CMD,SET_BRT, 0x00, .24, 0           ; PLUS 3
                      00609         db      CUE_CMD,SET_BRT, 0x00, .25, 0           ; PLUS 4
                      00610 ;       db      CUE_CMD,WATCH,0x00,NEVER
                      00611         db      CUE_DONE
                      00612 
                      00613 CUE_PLUS_3
                      00614         db      CUE_CMD,SET_BRT, 0x00, .22, LIT         ; PLUS 1
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 71


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00615         db      CUE_CMD,SET_BRT, 0x00, .23, LIT         ; PLUS 2
                      00616         db      CUE_CMD,SET_BRT, 0x00, .24, LIT         ; PLUS 3
                      00617         db      CUE_CMD,SET_BRT, 0x00, .25, 0           ; PLUS 4
                      00618 ;       db      CUE_CMD,WATCH,0x00,NEVER
                      00619         db      CUE_DONE
                      00620 
                      00621 CUE_PLUS_4
                      00622         db      CUE_CMD,SET_BRT, 0x00, .22, LIT         ; PLUS 1
                      00623         db      CUE_CMD,SET_BRT, 0x00, .23, LIT         ; PLUS 2
                      00624         db      CUE_CMD,SET_BRT, 0x00, .24, LIT         ; PLUS 3
                      00625         db      CUE_CMD,SET_BRT, 0x00, .25, LIT         ; PLUS 4
                      00626 ;       db      CUE_CMD,WATCH,0x00,NEVER
                      00627         db      CUE_DONE
                      00628 
                      00629     endif
                      00630 
0005B2                00631 CUE_ALL_DIM
                      00632 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
0005B2 01 11 00 00 80 00633         db      CUE_CMD,SET_BRT, 0x00, ITS, DIM         ; IT'S
0005B7 01 11 00 01 80 00634         db      CUE_CMD,SET_BRT, 0x00, HALF, DIM        ; HALF
0005BC 01 11 00 02 80 00635         db      CUE_CMD,SET_BRT, 0x00, TEN_, DIM        ; TEN_
0005C1 01 11 00 03 80 00636         db      CUE_CMD,SET_BRT, 0x00, QUARTER, DIM     ; QUARTER
0005C6 01 11 00 04 80 00637         db      CUE_CMD,SET_BRT, 0x00, TWENTY, DIM      ; TWENTY
0005CB 01 11 00 05 80 00638         db      CUE_CMD,SET_BRT, 0x00, FIVE_, DIM       ; FIVE
0005D0 01 11 00 06 80 00639         db      CUE_CMD,SET_BRT, 0x00, MINUTES, DIM     ; MINUTES
0005D5 01 11 00 07 80 00640         db      CUE_CMD,SET_BRT, 0x00, PAST, DIM        ; PAST
0005DA 01 11 00 08 80 00641         db      CUE_CMD,SET_BRT, 0x00, TO_, DIM         ; TO_
0005DF 01 11 00 09 80 00642         db      CUE_CMD,SET_BRT, 0x00, ONE, DIM         ; ONE
0005E4 01 11 00 0A 80 00643         db      CUE_CMD,SET_BRT, 0x00, TWO, DIM         ; TWO
0005E9 01 11 00 0B 80 00644         db      CUE_CMD,SET_BRT, 0x00, THREE, DIM       ; THREE
0005EE 01 11 00 0C 80 00645         db      CUE_CMD,SET_BRT, 0x00, FOUR, DIM        ; FOUR
0005F3 01 11 00 0D 80 00646         db      CUE_CMD,SET_BRT, 0x00, FIVE, DIM        ; FIVE
0005F8 01 11 00 0E 80 00647         db      CUE_CMD,SET_BRT, 0x00, SIX, DIM         ; SIX
0005FD 01 11 00 0F 80 00648         db      CUE_CMD,SET_BRT, 0x00, SEVEN, DIM       ; SEVEN
000602 01 11 00 10 80 00649         db      CUE_CMD,SET_BRT, 0x00, EIGHT, DIM       ; EIGHT
000607 01 11 00 11 80 00650         db      CUE_CMD,SET_BRT, 0x00, NINE, DIM        ; NiNE
00060C 01 11 00 12 80 00651         db      CUE_CMD,SET_BRT, 0x00, TEN, DIM         ; TEN_
000611 01 11 00 13 80 00652         db      CUE_CMD,SET_BRT, 0x00, ELEVEN, DIM      ; ELEVEN
000616 01 11 00 14 80 00653         db      CUE_CMD,SET_BRT, 0x00, TWELVE, DIM      ; TWELVE
00061B 01 11 00 15 80 00654         db      CUE_CMD,SET_BRT, 0x00, OCLOCK, DIM      ; O'CLOCK
                      00655 ;       db      CUE_CMD,SET_BRT, 0x00, .22, DIM         ; PLUS 1
                      00656 ;       db      CUE_CMD,SET_BRT, 0x00, .23, DIM         ; PLUS 2
                      00657 ;       db      CUE_CMD,SET_BRT, 0x00, .24, DIM         ; PLUS 3
                      00658 ;       db      CUE_CMD,SET_BRT, 0x00, .25, DIM         ; PLUS 4
                      00659 ;       db      CUE_CMD,WATCH,0x00,NEVER
000620 00             00660         db      CUE_DONE
                      00661 
000621                00662 CUE_PANIC
                      00663 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
000621 01 11 00 00 FF 00664         db      CUE_CMD,SET_BRT, 0x00, ITS, LIT         ; IT'S
000626 01 11 00 01 00 00665         db      CUE_CMD,SET_BRT, 0x00, HALF, 0          ; HALF
00062B 01 11 00 02 FF 00666         db      CUE_CMD,SET_BRT, 0x00, TEN_, LIT        ; TEN_
000630 01 11 00 03 00 00667         db      CUE_CMD,SET_BRT, 0x00, QUARTER, 0       ; QUARTER
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 72


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000635 01 11 00 04 FF 00668         db      CUE_CMD,SET_BRT, 0x00, TWENTY, LIT      ; TWENTY
00063A 01 11 00 05 00 00669         db      CUE_CMD,SET_BRT, 0x00, FIVE_, 0         ; FIVE
00063F 01 11 00 06 FF 00670         db      CUE_CMD,SET_BRT, 0x00, MINUTES, LIT     ; MINUTES
000644 01 11 00 07 00 00671         db      CUE_CMD,SET_BRT, 0x00, PAST, 0          ; PAST
000649 01 11 00 08 FF 00672         db      CUE_CMD,SET_BRT, 0x00, TO_, LIT         ; TO_
00064E 01 11 00 09 00 00673         db      CUE_CMD,SET_BRT, 0x00, ONE, 0           ; ONE
000653 01 11 00 0A FF 00674         db      CUE_CMD,SET_BRT, 0x00, TWO, LIT         ; TWO
000658 01 11 00 0B 00 00675         db      CUE_CMD,SET_BRT, 0x00, THREE, 0         ; THREE
00065D 01 11 00 0C FF 00676         db      CUE_CMD,SET_BRT, 0x00, FOUR, LIT        ; FOUR
000662 01 11 00 0D 00 00677         db      CUE_CMD,SET_BRT, 0x00, FIVE, 0          ; FIVE
000667 01 11 00 0E FF 00678         db      CUE_CMD,SET_BRT, 0x00, SIX, LIT         ; SIX
00066C 01 11 00 0F 00 00679         db      CUE_CMD,SET_BRT, 0x00, SEVEN, 0         ; SEVEN
000671 01 11 00 10 FF 00680         db      CUE_CMD,SET_BRT, 0x00, EIGHT, LIT       ; EIGHT
000676 01 11 00 11 00 00681         db      CUE_CMD,SET_BRT, 0x00, NINE, 0          ; NiNE
00067B 01 11 00 12 FF 00682         db      CUE_CMD,SET_BRT, 0x00, TEN, LIT         ; TEN_
000680 01 11 00 13 00 00683         db      CUE_CMD,SET_BRT, 0x00, ELEVEN, 0        ; ELEVEN
000685 01 11 00 14 FF 00684         db      CUE_CMD,SET_BRT, 0x00, TWELVE, LIT      ; TWELVE
00068A 01 11 00 15 00 00685         db      CUE_CMD,SET_BRT, 0x00, OCLOCK, 0        ; O'CLOCK
                      00686 ;       db      CUE_CMD,SET_BRT, 0x00, .22, 0           ; PLUS 1
                      00687 ;       db      CUE_CMD,SET_BRT, 0x00, .23, DIM         ; PLUS 2
                      00688 ;       db      CUE_CMD,SET_BRT, 0x00, .24, DIM         ; PLUS 3
                      00689 ;       db      CUE_CMD,SET_BRT, 0x00, .25, DIM         ; PLUS 4
                      00690 ;       db      CUE_CMD,WATCH,0x00,NEVER
00068F 00             00691         db      CUE_DONE
                      00692 
000690                00693 CUE_ALL_OFF
                      00694 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
000690 01 11 00 00 00 00695         db      CUE_CMD,SET_BRT, 0x00, ITS, 0           ; IT'S
000695 01 11 00 01 00 00696         db      CUE_CMD,SET_BRT, 0x00, HALF, 0          ; HALF
00069A 01 11 00 02 00 00697         db      CUE_CMD,SET_BRT, 0x00, TEN_, 0          ; TEN_
00069F 01 11 00 03 00 00698         db      CUE_CMD,SET_BRT, 0x00, QUARTER, 0       ; QUARTER
0006A4 01 11 00 04 00 00699         db      CUE_CMD,SET_BRT, 0x00, TWENTY, 0        ; TWENTY
0006A9 01 11 00 05 00 00700         db      CUE_CMD,SET_BRT, 0x00, FIVE_, 0         ; FIVE
0006AE 01 11 00 06 00 00701         db      CUE_CMD,SET_BRT, 0x00, MINUTES, 0       ; MINUTES
0006B3 01 11 00 07 00 00702         db      CUE_CMD,SET_BRT, 0x00, PAST, 0          ; PAST
0006B8 01 11 00 08 00 00703         db      CUE_CMD,SET_BRT, 0x00, TO_, 0           ; TO_
0006BD 01 11 00 09 00 00704         db      CUE_CMD,SET_BRT, 0x00, ONE, 0           ; ONE
0006C2 01 11 00 0A 00 00705         db      CUE_CMD,SET_BRT, 0x00, TWO, 0           ; TWO
0006C7 01 11 00 0B 00 00706         db      CUE_CMD,SET_BRT, 0x00, THREE, 0         ; THREE
0006CC 01 11 00 0C 00 00707         db      CUE_CMD,SET_BRT, 0x00, FOUR, 0          ; FOUR
0006D1 01 11 00 0D 00 00708         db      CUE_CMD,SET_BRT, 0x00, FIVE, 0          ; FIVE
0006D6 01 11 00 0E 00 00709         db      CUE_CMD,SET_BRT, 0x00, SIX, 0           ; SIX
0006DB 01 11 00 0F 00 00710         db      CUE_CMD,SET_BRT, 0x00, SEVEN, 0         ; SEVEN
0006E0 01 11 00 10 00 00711         db      CUE_CMD,SET_BRT, 0x00, EIGHT, 0         ; EIGHT
0006E5 01 11 00 11 00 00712         db      CUE_CMD,SET_BRT, 0x00, NINE, 0          ; NiNE
0006EA 01 11 00 12 00 00713         db      CUE_CMD,SET_BRT, 0x00, TEN, 0           ; TEN_
0006EF 01 11 00 13 00 00714         db      CUE_CMD,SET_BRT, 0x00, ELEVEN, 0        ; ELEVEN
0006F4 01 11 00 14 00 00715         db      CUE_CMD,SET_BRT, 0x00, TWELVE, 0        ; TWELVE
0006F9 01 11 00 15 00 00716         db      CUE_CMD,SET_BRT, 0x00, OCLOCK, 0        ; O'CLOCK
                      00717 ;       db      CUE_CMD,SET_BRT, 0x00, .22, 0           ; PLUS 1
                      00718 ;       db      CUE_CMD,SET_BRT, 0x00, .23, 0           ; PLUS 2
                      00719 ;       db      CUE_CMD,SET_BRT, 0x00, .24, 0           ; PLUS 3
                      00720 ;       db      CUE_CMD,SET_BRT, 0x00, .25, 0           ; PLUS 4
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 73


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00721 ;       db      CUE_CMD,WATCH,0x00,NEVER
0006FE 00             00722         db      CUE_DONE
                      00723 
0006FF                00724 CUE_ALL_ON
                      00725 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
0006FF 01 11 00 00 FF 00726         db      CUE_CMD,SET_BRT, 0x00, ITS, LIT
000704 01 11 00 01 FF 00727         db      CUE_CMD,SET_BRT, 0x00, HALF, LIT
000709 01 11 00 02 FF 00728         db      CUE_CMD,SET_BRT, 0x00, TEN_, LIT
00070E 01 11 00 03 FF 00729         db      CUE_CMD,SET_BRT, 0x00, QUARTER, LIT
000713 01 11 00 04 FF 00730         db      CUE_CMD,SET_BRT, 0x00, TWENTY, LIT
000718 01 11 00 05 FF 00731         db      CUE_CMD,SET_BRT, 0x00, FIVE_, LIT
00071D 01 11 00 06 FF 00732         db      CUE_CMD,SET_BRT, 0x00, MINUTES, LIT
000722 01 11 00 07 FF 00733         db      CUE_CMD,SET_BRT, 0x00, PAST, LIT
000727 01 11 00 08 FF 00734         db      CUE_CMD,SET_BRT, 0x00, TO_, LIT
00072C 01 11 00 09 FF 00735         db      CUE_CMD,SET_BRT, 0x00, ONE, LIT
000731 01 11 00 0A FF 00736         db      CUE_CMD,SET_BRT, 0x00, TWO, LIT
000736 01 11 00 0B FF 00737         db      CUE_CMD,SET_BRT, 0x00, THREE, LIT
00073B 01 11 00 0C FF 00738         db      CUE_CMD,SET_BRT, 0x00, FOUR, LIT
000740 01 11 00 0D FF 00739         db      CUE_CMD,SET_BRT, 0x00, FIVE, LIT
000745 01 11 00 0E FF 00740         db      CUE_CMD,SET_BRT, 0x00, SIX, LIT
00074A 01 11 00 0F FF 00741         db      CUE_CMD,SET_BRT, 0x00, SEVEN, LIT
00074F 01 11 00 10 FF 00742         db      CUE_CMD,SET_BRT, 0x00, EIGHT, LIT
000754 01 11 00 11 FF 00743         db      CUE_CMD,SET_BRT, 0x00, NINE, LIT
000759 01 11 00 12 FF 00744         db      CUE_CMD,SET_BRT, 0x00, TEN, LIT
00075E 01 11 00 13 FF 00745         db      CUE_CMD,SET_BRT, 0x00, ELEVEN, LIT
000763 01 11 00 14 FF 00746         db      CUE_CMD,SET_BRT, 0x00, TWELVE, LIT
000768 01 11 00 15 FF 00747         db      CUE_CMD,SET_BRT, 0x00, OCLOCK, LIT
                      00748 ;       db      CUE_CMD,SET_BRT, 0x00, .22, LIT
                      00749 ;       db      CUE_CMD,SET_BRT, 0x00, .23, LIT
                      00750 ;       db      CUE_CMD,SET_BRT, 0x00, .24, LIT
                      00751 ;       db      CUE_CMD,SET_BRT, 0x00, .25, LIT
00076D 01 60 00 FE    00752         db      CUE_CMD,WATCH,0x00,NEVER
000771 00             00753         db      CUE_DONE
                      00754 
                      00755     if FALSE
                      00756 
                      00757 CUE_PORTA_ON
                      00758 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
                      00759         db      CUE_CMD,SET_BRT, 0x00, ITS, LIT         ; IT'S
                      00760         db      CUE_CMD,SET_BRT, 0x00, TWO, LIT         ; TWO
                      00761         db      CUE_CMD,SET_BRT, 0x00, SIX, LIT         ; SIX
                      00762         db      CUE_CMD,SET_BRT, 0x00, SEVEN, LIT               ; SEVEN
                      00763         db      CUE_CMD,SET_BRT, 0x00, TEN, LIT         ; TEN
                      00764         db      CUE_CMD,SET_BRT, 0x00, ELEVEN, LIT              ; ELEVEN
                      00765 
                      00766         db      CUE_CMD,SET_BRT, 0x00, HALF, 0          ; HALF
                      00767         db      CUE_CMD,SET_BRT, 0x00, TEN_, 0          ; TEN_
                      00768         db      CUE_CMD,SET_BRT, 0x00, QUARTER, 0               ; QUARTER
                      00769         db      CUE_CMD,SET_BRT, 0x00, TWENTY, 0                ; TWENTY
                      00770         db      CUE_CMD,SET_BRT, 0x00, FIVE_, 0         ; FIVE
                      00771         db      CUE_CMD,SET_BRT, 0x00, MINUTES, 0               ; MINUTES
                      00772         db      CUE_CMD,SET_BRT, 0x00, PAST, 0          ; PAST
                      00773         db      CUE_CMD,SET_BRT, 0x00, TO_, 0           ; TO_
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 74


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00774         db      CUE_CMD,SET_BRT, 0x00, ONE, 0           ; ONE
                      00775         db      CUE_CMD,SET_BRT, 0x00, THREE, 0         ; THREE
                      00776         db      CUE_CMD,SET_BRT, 0x00, FOUR, 0          ; FOUR
                      00777         db      CUE_CMD,SET_BRT, 0x00, FIVE, 0          ; FIVE
                      00778         db      CUE_CMD,SET_BRT, 0x00, EIGHT, 0         ; EIGHT
                      00779         db      CUE_CMD,SET_BRT, 0x00, NINE, 0          ; NiNE
                      00780         db      CUE_CMD,SET_BRT, 0x00, TWELVE, 0                ; TWELVE
                      00781         db      CUE_CMD,SET_BRT, 0x00, OCLOCK, 0                ; O'CLOCK
                      00782         db      CUE_CMD,SET_BRT, 0x00, .22, 0           ; PLUS 1
                      00783         db      CUE_CMD,SET_BRT, 0x00, .23, 0           ; PLUS 2
                      00784         db      CUE_CMD,SET_BRT, 0x00, .24, 0           ; PLUS 3
                      00785         db      CUE_CMD,SET_BRT, 0x00, .25, 0           ; PLUS 4
                      00786 ;       db      CUE_CMD,WATCH,0x00,NEVER
                      00787         db      CUE_DONE
                      00788 
                      00789 CUE_PORTB_ON
                      00790 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
                      00791         db      CUE_CMD,SET_BRT, 0x00, TWELVE, LIT              ; TWELVE
                      00792         db      CUE_CMD,SET_BRT, 0x00, OCLOCK, LIT              ; O'CLOCK
                      00793         db      CUE_CMD,SET_BRT, 0x00, .22, LIT         ; PLUS 1
                      00794         db      CUE_CMD,SET_BRT, 0x00, .23, LIT         ; PLUS 2
                      00795         db      CUE_CMD,SET_BRT, 0x00, .24, LIT         ; PLUS 3
                      00796         db      CUE_CMD,SET_BRT, 0x00, .25, LIT         ; PLUS 4
                      00797 
                      00798         db      CUE_CMD,SET_BRT, 0x00, ITS, 0           ; IT'S
                      00799         db      CUE_CMD,SET_BRT, 0x00, HALF, 0          ; HALF
                      00800         db      CUE_CMD,SET_BRT, 0x00, TEN_, 0          ; TEN_
                      00801         db      CUE_CMD,SET_BRT, 0x00, QUARTER, 0               ; QUARTER
                      00802         db      CUE_CMD,SET_BRT, 0x00, TWENTY, 0                ; TWENTY
                      00803         db      CUE_CMD,SET_BRT, 0x00, FIVE_, 0         ; FIVE
                      00804         db      CUE_CMD,SET_BRT, 0x00, MINUTES, 0               ; MINUTES
                      00805         db      CUE_CMD,SET_BRT, 0x00, PAST, 0          ; PAST
                      00806         db      CUE_CMD,SET_BRT, 0x00, TO_, 0           ; TO_
                      00807         db      CUE_CMD,SET_BRT, 0x00, ONE, 0           ; ONE
                      00808         db      CUE_CMD,SET_BRT, 0x00, TWO, 0           ; TWO
                      00809         db      CUE_CMD,SET_BRT, 0x00, THREE, 0         ; THREE
                      00810         db      CUE_CMD,SET_BRT, 0x00, FOUR, 0          ; FOUR
                      00811         db      CUE_CMD,SET_BRT, 0x00, FIVE, 0          ; FIVE
                      00812         db      CUE_CMD,SET_BRT, 0x00, SIX, 0           ; SIX
                      00813         db      CUE_CMD,SET_BRT, 0x00, SEVEN, 0         ; SEVEN
                      00814         db      CUE_CMD,SET_BRT, 0x00, EIGHT, 0         ; EIGHT
                      00815         db      CUE_CMD,SET_BRT, 0x00, NINE, 0          ; NiNE
                      00816         db      CUE_CMD,SET_BRT, 0x00, TEN, 0           ; TEN
                      00817         db      CUE_CMD,SET_BRT, 0x00, ELEVEN, 0                ; ELEVEN
                      00818 ;       db      CUE_CMD,WATCH,0x00,NEVER
                      00819         db      CUE_DONE
                      00820 
                      00821 CUE_PORTC_ON
                      00822 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
                      00823         db      CUE_CMD,SET_BRT, 0x00, HALF, LIT                ; HALF
                      00824         db      CUE_CMD,SET_BRT, 0x00, TWENTY, LIT              ; TWENTY
                      00825         db      CUE_CMD,SET_BRT, 0x00, MINUTES, LIT             ; MINUTES
                      00826         db      CUE_CMD,SET_BRT, 0x00, PAST, LIT                ; PAST
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 75


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00827         db      CUE_CMD,SET_BRT, 0x00, TO_, LIT         ; TO_
                      00828         db      CUE_CMD,SET_BRT, 0x00, THREE, LIT               ; THREE
                      00829 
                      00830         db      CUE_CMD,SET_BRT, 0x00, ITS, 0           ; IT'S
                      00831         db      CUE_CMD,SET_BRT, 0x00, TEN_, 0          ; TEN_
                      00832         db      CUE_CMD,SET_BRT, 0x00, QUARTER, 0               ; QUARTER
                      00833         db      CUE_CMD,SET_BRT, 0x00, FIVE_, 0         ; FIVE
                      00834         db      CUE_CMD,SET_BRT, 0x00, ONE, 0           ; ONE
                      00835         db      CUE_CMD,SET_BRT, 0x00, TWO, 0           ; TWO
                      00836         db      CUE_CMD,SET_BRT, 0x00, FOUR, 0          ; FOUR
                      00837         db      CUE_CMD,SET_BRT, 0x00, FIVE, 0          ; FIVE
                      00838         db      CUE_CMD,SET_BRT, 0x00, SIX, 0           ; SIX
                      00839         db      CUE_CMD,SET_BRT, 0x00, SEVEN, 0         ; SEVEN
                      00840         db      CUE_CMD,SET_BRT, 0x00, EIGHT, 0         ; EIGHT
                      00841         db      CUE_CMD,SET_BRT, 0x00, NINE, 0          ; NiNE
                      00842         db      CUE_CMD,SET_BRT, 0x00, TEN, 0           ; TEN
                      00843         db      CUE_CMD,SET_BRT, 0x00, ELEVEN, 0                ; ELEVEN
                      00844         db      CUE_CMD,SET_BRT, 0x00, TWELVE, 0                ; TWELVE
                      00845         db      CUE_CMD,SET_BRT, 0x00, OCLOCK, 0                ; O'CLOCK
                      00846         db      CUE_CMD,SET_BRT, 0x00, .22, 0           ; PLUS 1
                      00847         db      CUE_CMD,SET_BRT, 0x00, .23, 0           ; PLUS 2
                      00848         db      CUE_CMD,SET_BRT, 0x00, .24, 0           ; PLUS 3
                      00849         db      CUE_CMD,SET_BRT, 0x00, .25, 0           ; PLUS 4
                      00850 ;       db      CUE_CMD,WATCH,0x00,NEVER
                      00851         db      CUE_DONE
                      00852 
                      00853 CUE_PORTD_ON
                      00854 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
                      00855         db      CUE_CMD,SET_BRT, 0x00, TEN_, LIT                ; TEN_
                      00856         db      CUE_CMD,SET_BRT, 0x00, QUARTER, LIT             ; QUARTER
                      00857         db      CUE_CMD,SET_BRT, 0x00, FIVE_, LIT               ; FIVE
                      00858         db      CUE_CMD,SET_BRT, 0x00, THREE, LIT               ; THREE
                      00859         db      CUE_CMD,SET_BRT, 0x00, FOUR, LIT                ; FOUR
                      00860         db      CUE_CMD,SET_BRT, 0x00, SEVEN, LIT               ; SEVEN
                      00861         db      CUE_CMD,SET_BRT, 0x00, EIGHT, LIT               ; EIGHT
                      00862 
                      00863         db      CUE_CMD,SET_BRT, 0x00, ITS, 0           ; IT'S
                      00864         db      CUE_CMD,SET_BRT, 0x00, HALF, 0          ; HALF
                      00865         db      CUE_CMD,SET_BRT, 0x00, TWENTY, 0                ; TWENTY
                      00866         db      CUE_CMD,SET_BRT, 0x00, MINUTES, 0               ; MINUTES
                      00867         db      CUE_CMD,SET_BRT, 0x00, PAST, 0          ; PAST
                      00868         db      CUE_CMD,SET_BRT, 0x00, TO_, 0           ; TO_
                      00869         db      CUE_CMD,SET_BRT, 0x00, ONE, 0           ; ONE
                      00870         db      CUE_CMD,SET_BRT, 0x00, TWO, 0           ; TWO
                      00871         db      CUE_CMD,SET_BRT, 0x00, FIVE, 0          ; FIVE
                      00872         db      CUE_CMD,SET_BRT, 0x00, SIX, 0           ; SIX
                      00873         db      CUE_CMD,SET_BRT, 0x00, NINE, 0          ; NiNE
                      00874         db      CUE_CMD,SET_BRT, 0x00, TEN, 0           ; TEN
                      00875         db      CUE_CMD,SET_BRT, 0x00, ELEVEN, 0                ; ELEVEN
                      00876         db      CUE_CMD,SET_BRT, 0x00, TWELVE, 0                ; TWELVE
                      00877         db      CUE_CMD,SET_BRT, 0x00, OCLOCK, 0                ; O'CLOCK
                      00878         db      CUE_CMD,SET_BRT, 0x00, .22, 0           ; PLUS 1
                      00879         db      CUE_CMD,SET_BRT, 0x00, .23, 0           ; PLUS 2
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 76


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00880         db      CUE_CMD,SET_BRT, 0x00, .24, 0           ; PLUS 3
                      00881         db      CUE_CMD,SET_BRT, 0x00, .25, 0           ; PLUS 4
                      00882 ;       db      CUE_CMD,WATCH,0x00,NEVER
                      00883         db      CUE_DONE
                      00884 
                      00885 CUE_PORTE_ON
                      00886 ; SET_BRT       CUE_CMD SET_BRT  mask  chn  brt         
                      00887         db      CUE_CMD,SET_BRT, 0x00, ONE, LIT         ; ONE
                      00888         db      CUE_CMD,SET_BRT, 0x00, FIVE, LIT                ; FIVE
                      00889         db      CUE_CMD,SET_BRT, 0x00, NINE, LIT                ; NiNE
                      00890 
                      00891         db      CUE_CMD,SET_BRT, 0x00, ITS, 0           ; IT'S
                      00892         db      CUE_CMD,SET_BRT, 0x00, HALF, 0          ; HALF
                      00893         db      CUE_CMD,SET_BRT, 0x00, TEN_, 0          ; TEN_
                      00894         db      CUE_CMD,SET_BRT, 0x00, QUARTER, 0               ; QUARTER
                      00895         db      CUE_CMD,SET_BRT, 0x00, TWENTY, 0                ; TWENTY
                      00896         db      CUE_CMD,SET_BRT, 0x00, FIVE_, 0         ; FIVE
                      00897         db      CUE_CMD,SET_BRT, 0x00, MINUTES, 0               ; MINUTES
                      00898         db      CUE_CMD,SET_BRT, 0x00, PAST, 0          ; PAST
                      00899         db      CUE_CMD,SET_BRT, 0x00, TO_, 0           ; TO_
                      00900         db      CUE_CMD,SET_BRT, 0x00, TWO, 0           ; TWO
                      00901         db      CUE_CMD,SET_BRT, 0x00, THREE, 0         ; THREE
                      00902         db      CUE_CMD,SET_BRT, 0x00, FOUR, 0          ; FOUR
                      00903         db      CUE_CMD,SET_BRT, 0x00, SIX, 0           ; SIX
                      00904         db      CUE_CMD,SET_BRT, 0x00, SEVEN, 0         ; SEVEN
                      00905         db      CUE_CMD,SET_BRT, 0x00, EIGHT, 0         ; EIGHT
                      00906         db      CUE_CMD,SET_BRT, 0x00, TEN, 0           ; TEN_
                      00907         db      CUE_CMD,SET_BRT, 0x00, ELEVEN, 0                ; ELEVEN
                      00908         db      CUE_CMD,SET_BRT, 0x00, TWELVE, 0                ; TWELVE
                      00909         db      CUE_CMD,SET_BRT, 0x00, OCLOCK, 0                ; O'CLOCK
                      00910         db      CUE_CMD,SET_BRT, 0x00, .22, 0           ; PLUS 1
                      00911         db      CUE_CMD,SET_BRT, 0x00, .23, 0           ; PLUS 2
                      00912         db      CUE_CMD,SET_BRT, 0x00, .24, 0           ; PLUS 3
                      00913         db      CUE_CMD,SET_BRT, 0x00, .25, 0           ; PLUS 4
                      00914 ;       db      CUE_CMD,WATCH,0x00,NEVER
                      00915         db      CUE_DONE
                      00916 
                      00917     endif
                      00918 
                      00919         END
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 77


SYMBOL TABLE
  LABEL                             VALUE 

A                                 00000000
ABDEN                             00000000
ABDOVF                            00000007
ACCESS                            00000000
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACQT0                             00000003
ACQT1                             00000004
ACQT2                             00000005
ADCON0                            00000FC2
ADCON1                            00000FC1
ADCON2                            00000FC0
ADCS0                             00000000
ADCS1                             00000001
ADCS2                             00000002
ADDEN                             00000003
ADEN                              00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADIP                              00000006
ADON                              00000000
ADRES                             00000FC3
ADRESH                            00000FC4
ADRESL                            00000FC3
AN10                              00000001
AN11                              00000004
AN12                              00000000
AN4                               00000005
AN8                               00000002
AN9                               00000003
APP_INCLUDE_FILE                  wClock.inc
ARG_HI_FLAG                       00000000
ARG_NUM_MAX                       00000000
B                                 00000001
BANKED                            00000001
BASE_OF_TABLES                    00002000
BAUDCON                           00000FB8
BAUDCTL                           00000FB8
BCLIE                             00000003
BCLIF                             00000003
BCLIP                             00000003
BF                                00000000
BGST                              00000005
BLU                               000000AB
BLU_OFFSET                        00000002
BOR                               00000000
BRG16                             00000003
BRGH                              00000002
BRT                               00000002
BRT_OFFSET                        00000002
BSR                               00000FE0
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 78


SYMBOL TABLE
  LABEL                             VALUE 

C                                 00000000
C1INV                             00000004
C1OUT                             00000006
C2INV                             00000005
C2OUT                             00000007
CCL2                              0000002A
CCL_HOURS                         00000056
CCL_HR                            00000060
CCL_MIN                           0000003E
CCP1                              00000002
CCP1CON                           00000FBD
CCP1IE                            00000002
CCP1IF                            00000002
CCP1IP                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           00000FBA
CCP2IE                            00000000
CCP2IF                            00000000
CCP2IP                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCP2_PORTB                        00000003
CCP2_PORTC                        00000001
CCPR1                             00000FBE
CCPR1H                            00000FBF
CCPR1L                            00000FBE
CCPR2                             00000FBB
CCPR2H                            00000FBC
CCPR2L                            00000FBB
CCR_DSP                           00000020
CCR_EXIT                          00000024
CFGS                              00000006
CGC_COMMON_EXIT                   000005C0
CGC_ERROR                         0000052C
CGC_FADE                          0000056A
CGC_H1                            00000536
CGC_P1                            00000584
CGC_P2                            0000058A
CGC_P3                            000005AA
CGC_PATCH                         00000530
CGC_SET_BRT                       00000530
CGC_SET_HSB                       00000530
CGC_SET_RGB                       00000552
CGC_WATCH                         00000554
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 79


SYMBOL TABLE
  LABEL                             VALUE 

CGNL01                            000004A8
CGNL02                            000004B0
CGN_01                            0000044E
CGN_ARGUMENT                      00000490
CGN_COMMAND                       0000048A
CGN_DONE                          00000486
CGN_EXIT                          000004CC
CGN_JUMP                          000004CA
CGN_LOOP                          00000496
CGN_LOOP_LOCAL                    000004C6
CGN_LOOP_REMOTE                   000004C8
CHN_NUM_MAX                       00000015
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CIS                               00000003
CK                                00000006
CKE                               00000006
CKP                               00000004
CKT_NUM_MAX                       0000001D
CKT_TABLE_INCREMENT               00000005
CKT_TABLE_LEN                     00000027
CKT_WRITE_CHANNEL                 00000000
CLK_HOURS_MAP                     0000002C
CLK_MINUTES_MAP                   00000012
CLK_TIMER                         00000BDC
CM0                               00000000
CM1                               00000001
CM2                               00000002
CMCON                             00000FB4
CMD_LOADER                        00000000
CMD_VALIDATE_CMDCODE              00000000
CMIE                              00000006
CMIF                              00000006
CMIP                              00000006
CREN                              00000004
CS                                00000002
CSA_DSP                           000005DE
CSA_OP_ADD                        00000644
CSA_OP_ADD_AND                    0000063E
CSA_OP_ADD_AND_SAVE               0000063E
CSA_OP_ADD_IND                    00000644
CSA_OP_ADD_IND_AND                0000063E
CSA_OP_ADD_IND_AND_SAVE           0000063E
CSA_OP_ADD_IND_SAVE               00000644
CSA_OP_DEC                        0000064A
CSA_OP_DECX2_RANGE                0000063E
CSA_OP_DECX3_RANGE                0000063E
CSA_OP_DECX4_RANGE                0000063E
CSA_OP_DEC_RANGE                  0000063E
CSA_OP_INC                        0000064A
CSA_OP_INCX2_RANGE                0000063E
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 80


SYMBOL TABLE
  LABEL                             VALUE 

CSA_OP_INCX3_RANGE                0000063E
CSA_OP_INCX4_RANGE                0000063E
CSA_OP_INC_RANGE                  0000063E
CSA_OP_LIT                        0000064A
CSA_OP_RAND                       0000064A
CSA_OP_RAND_RANGE                 0000063E
CSA_OP_SUB                        00000644
CSA_OP_SUB_AND                    0000063E
CSA_OP_SUB_AND_SAVE               0000063E
CSA_OP_SUB_IND                    00000644
CSA_OP_SUB_IND_AND                0000063E
CSA_OP_SUB_IND_AND_SAVE           0000063E
CSA_OP_SUB_IND_SAVE               00000644
CSRC                              00000007
CUE_ALL_DIM                       000005B2
CUE_ALL_OFF                       00000690
CUE_ALL_OFF_XFADE                 00000000
CUE_ALL_ON                        000006FF
CUE_ALL_ON_XFADE                  00000001
CUE_ARG                           00000002
CUE_CHECK_ARGNUM                  000008B8
CUE_CHECK_OPCODE                  000008C2
CUE_CLK_LOADER                    00000026
CUE_CLK_READOUT                   00000000
CUE_CMD                           00000001
CUE_DONE                          00000000
CUE_GET_ARGUMENT                  00000654
CUE_GET_COMMAND                   000004D0
CUE_GET_NEXT_COMMAND              00000442
CUE_HOURS_01                      000002D6
CUE_HOURS_02                      00000313
CUE_HOURS_03                      00000350
CUE_HOURS_04                      0000038D
CUE_HOURS_05                      000003CA
CUE_HOURS_06                      00000407
CUE_HOURS_07                      00000444
CUE_HOURS_08                      00000481
CUE_HOURS_09                      000004BE
CUE_HOURS_10                      000004FB
CUE_HOURS_11                      00000538
CUE_HOURS_12                      00000575
CUE_HOURS_OFF                     00000299
CUE_JUMP                          00000005
CUE_LOAD_CUE                      0000042C
CUE_LOOP                          00000003
CUE_LOOP_BLOCK                    00000004
CUE_MAX                           00000005
CUE_MINUTES_00                    00000035
CUE_MINUTES_05                    00000068
CUE_MINUTES_10                    0000009B
CUE_MINUTES_15                    000000CE
CUE_MINUTES_20                    00000101
CUE_MINUTES_25                    00000134
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 81


SYMBOL TABLE
  LABEL                             VALUE 

CUE_MINUTES_30                    00000167
CUE_MINUTES_35                    0000019A
CUE_MINUTES_40                    000001CD
CUE_MINUTES_45                    00000200
CUE_MINUTES_50                    00000233
CUE_MINUTES_55                    00000266
CUE_MINUTES_OFF                   00000002
CUE_NUMBER_TABLE                  00000008
CUE_PANIC                         00000621
CUE_RUN_CUE                       0000040A
CUE_SET_ARGUMENT                  000005CA
CUE_SET_ARG_ADDR                  000008A0
CUE_SET_ARG_ADDR2                 000008AC
CUE_TABLES_START                  00002600
CUE_WATCHER                       000003F2
CUW_EXIT_NO_CHANGE                00000408
CUW_RUN_NEXT_CUE                  00000404
CVR0                              00000000
CVR1                              00000001
CVR2                              00000002
CVR3                              00000003
CVRCON                            00000FB5
CVREN                             00000007
CVROE                             00000006
CVRR                              00000005
CVRSS                             00000004
CYCLE_START_FLAG                  00000001
CYN                               0000007F
D                                 00000005
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DC2B0                             00000004
DC2B1                             00000005
DDRA                              TRISA
DDRB                              TRISB
DDRC                              TRISC
DDRD                              TRISD
DDRE                              TRISE
DEVTYPE                           00004420
DEV_FAMILY                        00000018
DEV_INCLUDE_FILE                  d18f4520.inc
DIAGNOSTICS_ENABLED               00000001
DIM                               00000080
DIRTY_BIT                         00000000
DONE                              00000001
D_A                               00000005
ECCP1AS                           00000FB6
ECCPAS                            00000FB6
ECCPAS0                           00000004
ECCPAS1                           00000005
ECCPAS2                           00000006
ECCPASE                           00000007
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 82


SYMBOL TABLE
  LABEL                             VALUE 

EEADR                             00000FA9
EECON1                            00000FA6
EECON2                            00000FA7
EEDATA                            00000FA8
EEIE                              00000004
EEIF                              00000004
EEIP                              00000004
EEPGD                             00000007
EIGHT                             00000010
ELEVEN                            00000013
ERR_BAD_ARGNUM                    00000003
ERR_BAD_CHANNEL                   00000002
ERR_BAD_COMMAND                   00000001
ERR_BAD_OPCODE                    00000004
ERR_CMD_LOADER_FAILED             00000005
ERR_GET_COMMAND_FAILED            00000006
ERR_GET_NEXT_CMD_FAILED           00000007
ERR_NO_ERROR                      00000000
EXT_OFFSET                        00000003
FADE                              00000056
FADE_MAX                          00000059
FADE_MIN                          00000058
FADE_REPEAT                       00000057
FADE_X                            0000005A
FALSE                             00000000
FAST                              00000001
FDR_TABLE_LEN                     0000000D
FDR_TEST_FDR_DONE                 00000000
FERR                              00000002
FIVE                              0000000D
FIVE_                             00000005
FLTS                              00000002
FOSC                              00000024
FOUR                              0000000C
FREE                              00000004
FSR0                              00000000
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1                              00000001
FSR1H                             00000FE2
FSR1L                             00000FE1
FSR2                              00000002
FSR2H                             00000FDA
FSR2L                             00000FD9
GCEN                              00000007
GIE                               00000007
GIEH                              00000007
GIEL                              00000006
GO                                00000001
GO_DONE                           00000001
GRN                               00000055
GRN_OFFSET                        00000001
HALF                              00000001
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 83


SYMBOL TABLE
  LABEL                             VALUE 

HLVDCON                           00000FD2
HLVDEN                            00000004
HLVDIE                            00000002
HLVDIF                            00000002
HLVDIP                            00000002
HLVDL0                            00000000
HLVDL1                            00000001
HLVDL2                            00000002
HLVDL3                            00000003
HSB_TABLES_LEN                    00000600
HSB_TABLES_START                  00002000
HUE                               00000000
HUE_OFFSET                        00000000
IBF                               00000007
IBOV                              00000005
ICD_ENABLED                       00000000
IDLEN                             00000007
INDF0                             00000FEF
INDF1                             00000FE7
INDF2                             00000FDF
INIT_PORTS_EXTERNAL               00000001
INIT_T0_EXTERNAL                  00000001
INIT_T1_EXTERNAL                  00000001
INIT_WATCHDOG_TIMER               00000001
INT0                              00000000
INT0E                             00000004
INT0F                             00000001
INT0IE                            00000004
INT0IF                            00000001
INT1                              00000001
INT1E                             00000003
INT1F                             00000000
INT1IE                            00000003
INT1IF                            00000000
INT1IP                            00000006
INT1P                             00000006
INT2                              00000002
INT2E                             00000004
INT2F                             00000001
INT2IE                            00000004
INT2IF                            00000001
INT2IP                            00000007
INT2P                             00000007
INTCON                            00000FF2
INTCON2                           00000FF1
INTCON3                           00000FF0
INTEDG0                           00000006
INTEDG1                           00000005
INTEDG2                           00000004
INTSRC                            00000007
IOFS                              00000002
IPEN                              00000007
IPR1                              00000F9F
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 84


SYMBOL TABLE
  LABEL                             VALUE 

IPR2                              00000FA2
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
IRVST                             00000005
ITS                               00000000
IVRST                             00000005
KBI0                              00000004
KBI1                              00000005
KBI2                              00000006
KBI3                              00000007
LATA                              00000F89
LATA0                             00000000
LATA1                             00000001
LATA2                             00000002
LATA3                             00000003
LATA4                             00000004
LATA5                             00000005
LATA6                             00000006
LATA7                             00000007
LATB                              00000F8A
LATB0                             00000000
LATB1                             00000001
LATB2                             00000002
LATB3                             00000003
LATB4                             00000004
LATB5                             00000005
LATB6                             00000006
LATB7                             00000007
LATC                              00000F8B
LATC0                             00000000
LATC1                             00000001
LATC2                             00000002
LATC3                             00000003
LATC4                             00000004
LATC5                             00000005
LATC6                             00000006
LATC7                             00000007
LATD                              00000F8C
LATD0                             00000000
LATD1                             00000001
LATD2                             00000002
LATD3                             00000003
LATD4                             00000004
LATD5                             00000005
LATD6                             00000006
LATD7                             00000007
LATE                              00000F8D
LATE0                             00000000
LATE1                             00000001
LATE2                             00000002
LED_INCLUDE_FILE                  led.inc
LIT                               000000FF
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 85


SYMBOL TABLE
  LABEL                             VALUE 

LVDCON                            00000FD2
LVDEN                             00000004
LVDIE                             00000002
LVDIF                             00000002
LVDIN                             00000005
LVDIP                             00000002
LVDL0                             00000000
LVDL1                             00000001
LVDL2                             00000002
LVDL3                             00000003
LVV0                              00000000
LVV1                              00000001
LVV2                              00000002
LVV3                              00000003
MAG                               000000D5
MAXRAM                            000002FF
MINUTES                           00000006
MONOCHROME_MODE                   00000001
N                                 00000004
NEVER                             000000FE
NINE                              00000011
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_CS                            00000002
NOT_DONE                          00000001
NOT_PD                            00000002
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RD                            00000000
NOT_RI                            00000004
NOT_SS                            00000005
NOT_T1SYNC                        00000002
NOT_T3SYNC                        00000002
NOT_TO                            00000003
NOT_W                             00000002
NOT_WR                            00000001
NOT_WRITE                         00000002
NOW                               000000FF
OBF                               00000006
OCLOCK                            00000015
OERR                              00000001
OFF                               00000000
ON                                00000001
ONE                               00000009
OP_ADD                            0000000B
OP_ADD_AND                        0000000C
OP_ADD_AND_SAVE                   0000000D
OP_ADD_IND                        0000000E
OP_ADD_IND_AND                    00000010
OP_ADD_IND_AND_SAVE               00000011
OP_ADD_IND_SAVE                   0000000F
OP_DEC                            00000006
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 86


SYMBOL TABLE
  LABEL                             VALUE 

OP_DECX2_RANGE                    00000008
OP_DECX3_RANGE                    00000009
OP_DECX4_RANGE                    0000000A
OP_DEC_RANGE                      00000007
OP_INC                            00000001
OP_INCX2_RANGE                    00000003
OP_INCX3_RANGE                    00000004
OP_INCX4_RANGE                    00000005
OP_INC_RANGE                      00000002
OP_LIT                            00000000
OP_OPCODE_MAX                     0000001A
OP_RAND                           00000019
OP_RAND_RANGE                     0000001A
OP_SUB                            00000012
OP_SUB_AND                        00000013
OP_SUB_AND_SAVE                   00000014
OP_SUB_IND                        00000015
OP_SUB_IND_AND                    00000017
OP_SUB_IND_AND_SAVE               00000018
OP_SUB_IND_SAVE                   00000016
ORN                               00000015
OSCCON                            00000FD3
OSCFIE                            00000007
OSCFIF                            00000007
OSCFIP                            00000007
OSCTUNE                           00000F9B
OSTS                              00000003
OV                                00000003
P                                 00000004
P1B                               00000005
P1C                               00000006
P1D                               00000007
P1M0                              00000006
P1M1                              00000007
PAST                              00000007
PATCH                             00000041
PC                                00000FF9
PCAx                              000008C0
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PCOx                              000008CA
PD                                00000002
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
PDC4                              00000004
PDC5                              00000005
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 87


SYMBOL TABLE
  LABEL                             VALUE 

PDC6                              00000006
PEIE                              00000006
PEN                               00000002
PGAOD2R                           00000778
PGAOD3R                           00000790
PGAOD4R                           000007A8
PGAODR                            00000760
PGA_01                            00000682
PGA_DSP                           00000692
PGA_OK                            00000894
PGA_OP_ADD                        000007AE
PGA_OP_ADD_AND                    000007B8
PGA_OP_ADD_AND_SAVE               000007C6
PGA_OP_ADD_IND                    000007D6
PGA_OP_ADD_IND_AND                0000080C
PGA_OP_ADD_IND_AND_SAVE           0000082A
PGA_OP_ADD_IND_SAVE               000007F0
PGA_OP_DEC                        0000074A
PGA_OP_DECX2_RANGE                00000766
PGA_OP_DECX3_RANGE                0000077E
PGA_OP_DECX4_RANGE                00000796
PGA_OP_DEC_RANGE                  00000752
PGA_OP_INC                        000006F4
PGA_OP_INCX2_RANGE                0000070E
PGA_OP_INCX3_RANGE                00000722
PGA_OP_INCX4_RANGE                00000736
PGA_OP_INC_RANGE                  000006FC
PGA_OP_LIT                        000006F2
PGA_OP_RAND                       00000874
PGA_OP_RAND_RANGE                 0000087E
PGA_OP_SUB                        0000084A
PGA_OP_SUB_AND                    00000854
PGA_OP_SUB_AND_SAVE               00000862
PGA_OP_SUB_IND                    00000872
PGA_OP_SUB_IND_AND                00000872
PGA_OP_SUB_IND_AND_SAVE           00000872
PGA_OP_SUB_IND_SAVE               00000872
PGC                               00000006
PGD                               00000007
PGM                               00000005
PGNC_01                           00000392
PGNC_DONE                         00000396
PGNC_ERR                          0000039A
PGNC_OK                           00000392
PGP_01                            00000350
PGP_RESTART                       0000035C
PIE1                              00000F9D
PIE2                              00000FA0
PIR1                              00000F9E
PIR2                              00000FA1
PLAYLIST_01                       0000000A
PLAYLIST_02                       0000000E
PLAYLIST_CODA                     00000001
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 88


SYMBOL TABLE
  LABEL                             VALUE 

PLAYLIST_DONE                     00000000
PLAYLIST_MASTER_TABLE             00000002
PLAY_GET_NEXT_CUE                 00000372
PLAY_GET_NEXT_PLAYLIST            00000346
PLAY_GET_PREV_PLAYLIST            0000034C
PLAY_INIT                         00000334
PLAY_RUN_NEXT_CUE                 00000366
PLLEN                             00000006
PLP_01                            00000438
PLUSW0                            00000FEB
PLUSW1                            00000FE3
PLUSW2                            00000FDB
POAI1                             000007E2
POAIA1                            00000818
POAIAS1                           00000836
POAIS1                            000007FC
POR                               00000001
PORTA                             00000F80
PORTB                             00000F81
PORTC                             00000F82
PORTD                             00000F83
PORTE                             00000F84
POSTDEC0                          00000FED
POSTDEC1                          00000FE5
POSTDEC2                          00000FDD
POSTINC0                          00000FEE
POSTINC1                          00000FE6
POSTINC2                          00000FDE
PR2                               00000FCB
PREINC0                           00000FEC
PREINC1                           00000FE4
PREINC2                           00000FDC
PRNC_OK                           00000370
PROD                              00000FF3
PRODH                             00000FF4
PRODL                             00000FF3
PRSEN                             00000007
PSA                               00000003
PSP0                              00000000
PSP1                              00000001
PSP2                              00000002
PSP3                              00000003
PSP4                              00000004
PSP5                              00000005
PSP6                              00000006
PSP7                              00000007
PSPIE                             00000007
PSPIF                             00000007
PSPIP                             00000007
PSPMODE                           00000004
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 89


SYMBOL TABLE
  LABEL                             VALUE 

PSSBD1                            00000001
PWM1CON                           00000FB7
QUARTER                           00000003
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RA6                               00000006
RA7                               00000007
RAND                              000008CC
RAND1                             000008D2
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RBIP                              00000000
RBPU                              00000007
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RCEN                              00000003
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCIP                              00000005
RCMT                              00000006
RCON                              00000FD0
RCREG                             00000FAE
RCSTA                             00000FAB
RD                                00000000
RD0                               00000000
RD1                               00000001
RD16                              00000007
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 90


SYMBOL TABLE
  LABEL                             VALUE 

RE0                               00000000
RE1                               00000001
RE2                               00000002
RE3                               00000003
RED                               00000000
RED_OFFSET                        00000000
RI                                00000004
RSEN                              00000001
RX                                00000007
RX9                               00000006
RX9D                              00000000
RXDTP                             00000005
RX_ENABLED                        00000000
R_W                               00000002
S                                 00000003
SAT                               00000001
SAT_OFFSET                        00000001
SBOREN                            00000006
SCK                               00000003
SCKP                              00000004
SCL                               00000003
SCS0                              00000000
SCS1                              00000001
SDA                               00000004
SDI                               00000004
SDO                               00000005
SECOND_FLAG                       00000003
SEN                               00000000
SENDB                             00000003
SET_BRT                           00000011
SET_HSB                           00000023
SET_RGB                           00000033
SEVEN                             0000000F
SIX                               0000000E
SMP                               00000007
SP0                               00000000
SP1                               00000001
SP2                               00000002
SP3                               00000003
SP4                               00000004
SPBRG                             00000FAF
SPBRGH                            00000FB0
SPEN                              00000007
SREN                              00000005
SS                                00000005
SSPADD                            00000FC8
SSPBUF                            00000FC9
SSPCON1                           00000FC6
SSPCON2                           00000FC5
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPIP                             00000003
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 91


SYMBOL TABLE
  LABEL                             VALUE 

SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000FC7
STATUS                            00000FD8
STKFUL                            00000007
STKOVF                            00000007
STKPTR                            00000FFC
STKUNF                            00000006
SWDTE                             00000000
SWDTEN                            00000000
SWITCH_READ_FLAG                  00000002
SW_DEBOUNCE_MAX                   00000008
SW_HELD_COUNT                     0000003C
SW_STATE_FALLING_bp               00000002
SW_STATE_ON_bp                    00000000
SW_STATE_RISING_bp                00000001
SYNC                              00000004
T016BIT                           00000006
T08BIT                            00000006
T0CKI                             00000004
T0CON                             00000FD5
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0PS0                             00000000
T0PS1                             00000001
T0PS2                             00000002
T0PS3                             00000003
T0SE                              00000004
T13CKI                            00000000
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000FCD
T1OSCEN                           00000003
T1OSI                             00000001
T1OSO                             00000000
T1RUN                             00000006
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000FCA
T2OUTPS0                          00000003
T2OUTPS1                          00000004
T2OUTPS2                          00000005
T2OUTPS3                          00000006
T3CCP1                            00000003
T3CCP2                            00000006
T3CKPS0                           00000004
T3CKPS1                           00000005
T3CON                             00000FB1
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 92


SYMBOL TABLE
  LABEL                             VALUE 

T3SYNC                            00000002
TABLAT                            00000FF5
TBLPTR                            00000FF6
TBLPTRH                           00000FF7
TBLPTRL                           00000FF6
TBLPTRU                           00000FF8
TEN                               00000012
TEN_                              00000002
THREE                             0000000B
TMR0H                             00000FD7
TMR0IE                            00000005
TMR0IF                            00000002
TMR0IP                            00000002
TMR0L                             00000FD6
TMR0ON                            00000007
TMR1CS                            00000001
TMR1H                             00000FCF
TMR1IE                            00000000
TMR1IF                            00000000
TMR1IP                            00000000
TMR1L                             00000FCE
TMR1ON                            00000000
TMR2                              00000FCC
TMR2IE                            00000001
TMR2IF                            00000001
TMR2IP                            00000001
TMR2ON                            00000002
TMR3CS                            00000001
TMR3H                             00000FB3
TMR3IE                            00000001
TMR3IF                            00000001
TMR3IP                            00000001
TMR3L                             00000FB2
TMR3ON                            00000000
TO                                00000003
TOS                               00000FFD
TOSH                              00000FFE
TOSL                              00000FFD
TOSU                              00000FFF
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TO_                               00000008
TRISA                             00000F92
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISA6                            00000006
TRISA7                            00000007
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 93


SYMBOL TABLE
  LABEL                             VALUE 

TRISB                             00000F93
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000F94
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000F95
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000F96
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TRUE                              00000001
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TWELVE                            00000014
TWENTY                            00000004
TWO                               0000000A
TX                                00000006
TX9                               00000006
TX9D                              00000000
TXCKP                             00000004
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXIP                              00000004
TXREG                             00000FAD
TXSTA                             00000FAC
UA                                00000001
UNITS_ENABLED                     00000001
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 94


SYMBOL TABLE
  LABEL                             VALUE 

UPGC_00                           00000098
UPGC_01                           000000A2
UPGC_02                           000000AD
UPGC_03                           000000BA
UPGC_04                           000000C9
UPGC_05                           000000D3
UPSA_00                           00000000
UPSA_01                           00000004
UPSA_02                           00000008
UPSA_03                           0000000E
UPSA_04                           00000014
UPSA_05                           0000001A
UPSA_06                           00000020
UPSA_07                           00000024
UPSA_08                           0000002A
UPSA_09                           00000030
UPSA_10                           00000036
UPSA_11                           0000003C
UPSA_12                           00000041
UPSA_13                           00000047
UPSA_14                           0000004D
UPSA_15                           00000053
UPSA_16                           00000059
UPSA_17                           0000005F
UPSA_18                           00000065
UPSA_19                           0000006A
UPSA_20                           00000070
UPSA_21                           00000076
UPSA_22                           0000007C
UPSA_23                           00000082
UPSA_24                           00000088
UPSA_25                           0000008E
UPSA_26                           00000092
UT_CUE_GET_ARGUMENT               00000AA8
UT_CUE_GET_COMMMAND               00000B84
UT_CUE_GET_NEXT                   00000B94
UT_CUE_LOAD_CUE                   00000910
UT_CUE_RUN_CUE                    000008E6
UT_CUE_SET_ARGUMENT               0000091E
UT_PLAY                           000008E0
UT_TEST1                          000000DD
UT_TEST2                          0000010C
UT_WALK_PLAYLIST                  000008F2
VCFG0                             00000004
VCFG1                             00000005
VDIRMAG                           00000007
VIO                               000000D5
W                                 00000000
WATCH                             00000060
WCOL                              00000007
WDTCON                            00000FD1
WR                                00000001
WREG                              00000FE8
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 95


SYMBOL TABLE
  LABEL                             VALUE 

WREN                              00000002
WRERR                             00000003
WUE                               00000001
XFADE                             00000020
XMAX                              000000FF
XMIN                              00000000
YEL                               0000002A
Z                                 00000002
_ALL_OFF                          00000000
_ALL_OFF_XFADE                    00000002
_ALL_ON                           00000001
_ALL_ON_XFADE                     00000003
_BOREN_NOSLP_2L                   000000FD
_BOREN_OFF_2L                     000000F9
_BOREN_ON_2L                      000000FB
_BOREN_SBORDIS_2L                 000000FF
_BORV_0_2L                        000000E7
_BORV_1_2L                        000000EF
_BORV_2_2L                        000000F7
_BORV_3_2L                        000000FF
_CCP2MX_PORTBE_3H                 000000FE
_CCP2MX_PORTC_3H                  000000FF
_CONFIG1H                         00300001
_CONFIG2H                         00300003
_CONFIG2L                         00300002
_CONFIG3H                         00300005
_CONFIG4L                         00300006
_CONFIG5H                         00300009
_CONFIG5L                         00300008
_CONFIG6H                         0030000B
_CONFIG6L                         0030000A
_CONFIG7H                         0030000D
_CONFIG7L                         0030000C
_CP0_OFF_5L                       000000FF
_CP0_ON_5L                        000000FE
_CP1_OFF_5L                       000000FF
_CP1_ON_5L                        000000FD
_CPB_OFF_5H                       000000FF
_CPB_ON_5H                        000000BF
_CPD_OFF_5H                       000000FF
_CPD_ON_5H                        0000007F
_DEBUG_OFF_4L                     000000FF
_DEBUG_ON_4L                      0000007F
_DEVID1                           003FFFFE
_DEVID2                           003FFFFF
_EBTR0_OFF_7L                     000000FF
_EBTR0_ON_7L                      000000FE
_EBTR1_OFF_7L                     000000FF
_EBTR1_ON_7L                      000000FD
_EBTRB_OFF_7H                     000000FF
_EBTRB_ON_7H                      000000BF
_FCMEN_OFF_1H                     000000BF
_FCMEN_ON_1H                      000000FF
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 96


SYMBOL TABLE
  LABEL                             VALUE 

_IDLOC0                           00200000
_IDLOC1                           00200001
_IDLOC2                           00200002
_IDLOC3                           00200003
_IDLOC4                           00200004
_IDLOC5                           00200005
_IDLOC6                           00200006
_IDLOC7                           00200007
_IESO_OFF_1H                      0000007F
_IESO_ON_1H                       000000FF
_LPT1OSC_OFF_3H                   000000FB
_LPT1OSC_ON_3H                    000000FF
_LVP_OFF_4L                       000000FB
_LVP_ON_4L                        000000FF
_MCLRE_OFF_3H                     0000007F
_MCLRE_ON_3H                      000000FF
_OSC_ECIO6_1H                     000000F5
_OSC_EC_1H                        000000F4
_OSC_HSPLL_1H                     000000F6
_OSC_HS_1H                        000000F2
_OSC_INTIO67_1H                   000000F8
_OSC_INTIO7_1H                    000000F9
_OSC_LP_1H                        000000F0
_OSC_RCIO6_1H                     000000F7
_OSC_RC_1H                        000000F3
_OSC_XT_1H                        000000F1
_PBADEN_OFF_3H                    000000FD
_PBADEN_ON_3H                     000000FF
_PLAY_DECR_MASTER_PTR             000003B2
_PLAY_INCR_MASTER_PTR             000003A8
_PLAY_INCR_PLAY_PTR               000003D2
_PLAY_RESET_MASTER_PTR            0000039E
_PLAY_SET_CUE_PTR                 000003DC
_PLAY_SET_PLAY_PTR                000003BC
_PWRT_OFF_2L                      000000FF
_PWRT_ON_2L                       000000FE
_STVREN_OFF_4L                    000000FE
_STVREN_ON_4L                     000000FF
_WDTPS_1024_2H                    000000F5
_WDTPS_128_2H                     000000EF
_WDTPS_16384_2H                   000000FD
_WDTPS_16_2H                      000000E9
_WDTPS_1_2H                       000000E1
_WDTPS_2048_2H                    000000F7
_WDTPS_256_2H                     000000F1
_WDTPS_2_2H                       000000E3
_WDTPS_32768_2H                   000000FF
_WDTPS_32_2H                      000000EB
_WDTPS_4096_2H                    000000F9
_WDTPS_4_2H                       000000E5
_WDTPS_512_2H                     000000F3
_WDTPS_64_2H                      000000ED
_WDTPS_8192_2H                    000000FB
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 97


SYMBOL TABLE
  LABEL                             VALUE 

_WDTPS_8_2H                       000000E7
_WDT_OFF_2H                       000000FE
_WDT_ON_2H                        000000FF
_WRT0_OFF_6L                      000000FF
_WRT0_ON_6L                       000000FE
_WRT1_OFF_6L                      000000FF
_WRT1_ON_6L                       000000FD
_WRTB_OFF_6H                      000000FF
_WRTB_ON_6H                       000000BF
_WRTC_OFF_6H                      000000FF
_WRTC_ON_6H                       000000DF
_WRTD_OFF_6H                      000000FF
_WRTD_ON_6H                       0000007F
_XINST_OFF_4L                     000000BF
_XINST_ON_4L                      000000FF
__18F4420                         00000001
_hour00                           0000027E
_hour01                           0000028C
_hour02                           0000029A
_hour03                           000002A8
_hour04                           000002B6
_hour05                           000002C4
_hour06                           000002D2
_hour07                           000002E0
_hour08                           000002EE
_hour09                           000002FC
_hour10                           0000030A
_hour11                           00000318
_hour12                           00000326
_min00                            0000007A
_min05                            00000088
_min10                            000000BA
_min15                            000000E0
_min20                            00000106
_min25                            0000012C
_min30                            0000016A
_min35                            00000190
_min40                            000001C2
_min45                            000001F4
_min50                            0000021A
_min55                            0000024C
arg_table                         0000001E
c00                               00000000
c01                               00000004
c02                               00000008
c03                               0000000C
c04                               00000010
c05                               00000014
c06                               00000018
c07                               0000001C
c08                               00000020
c09                               00000024
c10                               00000028
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 98


SYMBOL TABLE
  LABEL                             VALUE 

c11                               0000002C
c12                               00000030
c13                               00000034
c14                               00000038
c15                               0000003C
c16                               00000040
c17                               00000044
c18                               00000048
c19                               0000004C
c20                               00000050
c21                               00000054
c22                               00000058
c23                               0000005C
c24                               00000060
c25                               00000064
c26                               00000068
c27                               0000006C
c28                               00000070
c29                               00000074
c30                               00000078
c31                               0000007C
c32                               00000080
c33                               00000084
c34                               00000088
c35                               0000008C
c36                               00000090
c37                               00000094
c38                               00000098
c39                               0000009C
c40                               000000A0
c41                               000000A4
c42                               000000A8
c43                               000000AC
c44                               000000B0
c45                               000000B4
c46                               000000B8
c47                               000000BC
c48                               000000C0
c49                               000000C4
c50                               000000C8
c51                               000000CC
c52                               000000D0
c53                               000000D4
c54                               000000D8
c55                               000000DC
c56                               000000E0
c57                               000000E4
c58                               000000E8
c59                               000000EC
c60                               000000F0
c61                               000000F4
c62                               000000F8
c63                               000000FC
MPASM  5.34                       LED_CUE.ASM   5-22-2010  11:42:48         PAGE 99


SYMBOL TABLE
  LABEL                             VALUE 

ccload                            
chn_level                         00000000
chn_num                           00000000
cmd_buffer                        00000000
cue_argcount                      0000000F
cue_argflags                      00000014
cue_argmask                       00000011
cue_argmask_hi                    00000012
cue_argnum                        00000010
cue_argvalue                      00000013
cue_clk_hour                      00000000
cue_clk_min                       00000001
cue_clk_min_five                  00000002
cue_clk_min_plus                  00000003
cue_command                       0000000E
cue_fsr1_temp_hi                  0000000C
cue_fsr1_temp_lo                  0000000D
cue_loop_counter                  00000016
cue_loop_table_hi                 00000017
cue_loop_table_lo                 00000018
cue_loop_work                     00000015
cue_num_hi                        0000000A
cue_num_lo                        0000000B
cue_op1                           0000001A
cue_op2                           0000001B
cue_op3                           0000001C
cue_opcode                        00000019
cue_ptr_hi                        00000008
cue_ptr_lo                        00000009
cue_watch                         0000001D
play_master_ptr_hi                00000004
play_master_ptr_lo                00000005
play_ptr_hi                       00000006
play_ptr_lo                       00000007
setptr                            
switch                            
switch01b                         00000000
switch01p                         00000F80
tbladdr                           
tblindx                           
tblread                           
temp_tblptrh                      00000000
temp_tblptrl                      00000000
ut_getc                           
ut_lodc                           
ut_pga                            
ut_plp                            
ut_psa                            

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

